#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : mpmc
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN mpmc

## Peripheral Options
OPTION HDL = MIXED
OPTION IMP_NETLIST = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION RUN_NGCBUILD = TRUE
OPTION USAGE_LEVEL = BASE_USER
OPTION IPLEVEL_DRC_PROC = check_iplevel_drcs
OPTION SYSLEVEL_DRC_PROC = check_syslevel_drcs
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_syslevel_update
OPTION CLK_FREQ_RATIOS = (MPMC_Clk0 / MPMC_Clk90=(1/1), MPMC_Clk0 / MPMC_Clk0_DIV2=(2/1), MPMC_Clk0 / MPMC_CTRL_Clk=([1:2]/1), MPMC_Clk0 / (FSL0_M_Clk, FSL1_M_Clk, FSL2_M_Clk, FSL3_M_Clk, FSL4_M_Clk, FSL5_M_Clk, FSL6_M_Clk, FSL7_M_Clk)=([1:2]/1), MPMC_Clk0 / (SPLB0_Clk, SPLB1_Clk, SPLB2_Clk, SPLB3_Clk, SPLB4_Clk, SPLB5_Clk, SPLB6_Clk, SPLB7_Clk)=([1:2]/1), MPMC_Clk0 / (SDMA0_Clk, SDMA1_Clk, SDMA2_Clk, SDMA3_Clk, SDMA4_Clk, SDMA5_Clk, SDMA6_Clk, SDMA7_Clk)=([1:2]/1), SDMA0_Clk / SDMA_CTRL0_Clk=([1:2]/1), SDMA1_Clk / SDMA_CTRL1_Clk=([1:2]/1), SDMA2_Clk / SDMA_CTRL2_Clk=([1:2]/1), SDMA3_Clk / SDMA_CTRL3_Clk=([1:2]/1), SDMA4_Clk / SDMA_CTRL4_Clk=([1:2]/1), SDMA5_Clk / SDMA_CTRL5_Clk=([1:2]/1), SDMA6_Clk / SDMA_CTRL6_Clk=([1:2]/1), SDMA7_Clk / SDMA_CTRL7_Clk=([1:2]/1))
OPTION ADDITIONAL_OUTPUTS = UCF_CONSTRAINTS
OPTION DATASHEET_NAME = mpmc.pdf
OPTION DESC = Multi-Port Memory Controller(DDR/DDR2/SDRAM)
OPTION LONG_DESC = Multi-port memory controller.
OPTION IP_GROUP = Memory and Memory Controller:MICROBLAZE:PPC
OPTION DATASHEET_NAME = mpmc
OPTION ARCH_SUPPORT_MAP = (aspartan3=PRODUCTION, spartan3=PRODUCTION, spartan3an=PRODUCTION, spartan3a=PRODUCTION, spartan3e=PRODUCTION, spartan3adsp=PRODUCTION, virtex4lx=PRODUCTION, virtex4sx=PRODUCTION, virtex4fx=PRODUCTION, virtex5lx=PRODUCTION, virtex5sx=PRODUCTION, virtex5fx=PRODUCTION, aspartan3e=PRODUCTION, aspartan3a=PRODUCTION, aspartan3adsp=PRODUCTION, qvirtex4lx=PRODUCTION, qvirtex4sx=PRODUCTION, qvirtex4fx=PRODUCTION, qrvirtex4lx=PRODUCTION, qrvirtex4sx=PRODUCTION, qrvirtex4fx=PRODUCTION, spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION)
OPTION STYLE = HDL

IO_INTERFACE IO_IF = memory_0, IO_TYPE = XIL_MEMORY_V1

## Bus Interfaces
BUS_INTERFACE BUS = XCL0, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 1 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = XCL0_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 1 && C_XCL0_B_IN_USE && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = SPLB0, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 2 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG == 4))
BUS_INTERFACE BUS = SDMA_CTRL0, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = SDMA_LL0, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = MPMC_PIM0, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 4 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG == 4))
BUS_INTERFACE BUS = PPC440MC0, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC0, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 6 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG == 4))
BUS_INTERFACE BUS = MCB0, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 7 && C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = XCL1, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 1 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = XCL1_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 1 && C_XCL1_B_IN_USE && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = SPLB1, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG == 4))
BUS_INTERFACE BUS = SDMA_CTRL1, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = SDMA_LL1, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = MPMC_PIM1, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 4 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG == 4))
BUS_INTERFACE BUS = PPC440MC1, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC1, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 6 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG == 4))
BUS_INTERFACE BUS = MCB1, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 7 && C_USE_MCB_S6_PHY && C_PORT_CONFIG < 4)
BUS_INTERFACE BUS = XCL2, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 1 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = XCL2_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 1 && C_XCL2_B_IN_USE && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = SPLB2, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = SDMA_CTRL2, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = SDMA_LL2, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = MPMC_PIM2, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 4 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = PPC440MC2, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC2, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 6 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 2))
BUS_INTERFACE BUS = MCB2, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 2 && (C_PIM2_BASETYPE == 7 || C_PIM2_BASETYPE == 8 || C_PIM2_BASETYPE == 9) && C_USE_MCB_S6_PHY && C_PORT_CONFIG < 3)
BUS_INTERFACE BUS = XCL3, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 1 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = XCL3_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 1 && C_XCL3_B_IN_USE && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = SPLB3, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = SDMA_CTRL3, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = SDMA_LL3, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = MPMC_PIM3, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 4 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = PPC440MC3, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC3, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 6 && !(C_USE_MCB_S6_PHY && C_PORT_CONFIG > 1))
BUS_INTERFACE BUS = MCB3, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 3 && (C_PIM3_BASETYPE == 7 || C_PIM3_BASETYPE == 8 || C_PIM3_BASETYPE == 9) && C_USE_MCB_S6_PHY && C_PORT_CONFIG < 2)
BUS_INTERFACE BUS = XCL4, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 1 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = XCL4_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 1 && C_XCL4_B_IN_USE && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SPLB4, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_CTRL4, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_LL4, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MPMC_PIM4, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 4 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = PPC440MC4, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC4, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 6 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MCB4, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 4 && (C_PIM4_BASETYPE == 8 || C_PIM4_BASETYPE == 9) && C_USE_MCB_S6_PHY && C_PORT_CONFIG == 0)
BUS_INTERFACE BUS = XCL5, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 1 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = XCL5_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 1 && C_XCL5_B_IN_USE && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SPLB5, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_CTRL5, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_LL5, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MPMC_PIM5, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 4 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = PPC440MC5, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC5, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 6 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MCB5, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 5 && (C_PIM5_BASETYPE == 8 || C_PIM5_BASETYPE == 9) && C_USE_MCB_S6_PHY && C_PORT_CONFIG == 0)
BUS_INTERFACE BUS = XCL6, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 1 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = XCL6_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 1 && C_XCL6_B_IN_USE && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SPLB6, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_CTRL6, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_LL6, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MPMC_PIM6, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 4 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = PPC440MC6, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC6, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 6 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MCB6, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (0)
BUS_INTERFACE BUS = XCL7, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 1 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = XCL7_B, BUS_STD = XIL_MEMORY_CHANNEL, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 1 && C_XCL7_B_IN_USE && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SPLB7, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_CTRL7, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = SDMA_LL7, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MPMC_PIM7, BUS_STD = XIL_NPI, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 4 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = PPC440MC7, BUS_STD = XIL_PPC440MC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 5 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = VFBC7, BUS_STD = XIL_VFBC, BUS_TYPE = TARGET, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 6 && !C_USE_MCB_S6_PHY)
BUS_INTERFACE BUS = MCB7, BUS_STD = XIL_MCB_PORT, BUS_TYPE = TARGET, ISVALID = (0)
BUS_INTERFACE BUS = MPMC_CTRL, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE || [xstrncmp C_MEM_TYPE  SDRAM ])

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_BASEFAMILY = virtex5, DT = STRING, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_basefamily
PARAMETER C_SUBFAMILY = fx, DT = STRING, TYPE = NON_HDL
PARAMETER C_DEVICE = 5vlx50t, DT = STRING, TYPE = NON_HDL
PARAMETER C_PACKAGE = ff1136, DT = STRING, TYPE = NON_HDL
PARAMETER C_SPEEDGRADE = -1, DT = STRING, TYPE = NON_HDL
PARAMETER C_SPEEDGRADE_INT = 1, DT = INTEGER, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_speedgrade
PARAMETER C_NUM_PORTS = 1, DT = INTEGER, RANGE = (1:8), IPLEVEL_DRC_PROC = iplevel_drc_num_ports
PARAMETER C_PORT_CONFIG = 1, DT = INTEGER, RANGE = (0:4), ASSIGNMENT = REQUIRE, VALUES = (0=B32 B32 U32 U32 U32 U32, 1=B32 B32 B32 B32, 2=B64 B32 B32, 3=B64 B64, 4=B128), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_PORT_CONFIG
PARAMETER C_ALL_PIMS_SHARE_ADDRESSES = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_MPMC_BASEADDR = 0xFFFFFFFF, BUS = XCL0:XCL0_B:SPLB0:SDMA_LL0:PPC440MC0:VFBC0:XCL1:XCL1_B:SPLB1:SDMA_LL1:PPC440MC1:VFBC1:XCL2:XCL2_B:SPLB2:SDMA_LL2:PPC440MC2:VFBC2:XCL3:XCL3_B:SPLB3:SDMA_LL3:PPC440MC3:VFBC3:XCL4:XCL4_B:SPLB4:SDMA_LL4:PPC440MC4:VFBC4:XCL5:XCL5_B:SPLB5:SDMA_LL5:PPC440MC5:VFBC5:XCL6:XCL6_B:SPLB6:SDMA_LL6:PPC440MC6:VFBC6:XCL7:XCL7_B:SPLB7:SDMA_LL7:PPC440MC7:VFBC7, ADDRESS = BASE, PAIR = C_MPMC_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_ALL_PIMS_SHARE_ADDRESSES), IO_IF = memory_0, IO_IS = C_BASEADDR, ASSIGNMENT = REQUIRE
PARAMETER C_MPMC_HIGHADDR = 0x00000000, BUS = XCL0:XCL0_B:SPLB0:SDMA_LL0:PPC440MC0:VFBC0:XCL1:XCL1_B:SPLB1:SDMA_LL1:PPC440MC1:VFBC1:XCL2:XCL2_B:SPLB2:SDMA_LL2:PPC440MC2:VFBC2:XCL3:XCL3_B:SPLB3:SDMA_LL3:PPC440MC3:VFBC3:XCL4:XCL4_B:SPLB4:SDMA_LL4:PPC440MC4:VFBC4:XCL5:XCL5_B:SPLB5:SDMA_LL5:PPC440MC5:VFBC5:XCL6:XCL6_B:SPLB6:SDMA_LL6:PPC440MC6:VFBC6:XCL7:XCL7_B:SPLB7:SDMA_LL7:PPC440MC7:VFBC7, ADDRESS = HIGH, PAIR = C_MPMC_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_ALL_PIMS_SHARE_ADDRESSES), IO_IF = memory_0, IO_IS = C_HIGHADDR, ASSIGNMENT = REQUIRE
PARAMETER C_MPMC_SW_BASEADDR = 0xFFFFFFFF, DT = STD_LOGIC_VECTOR, ISVALID = (C_ALL_PIMS_SHARE_ADDRESSES == 0), TYPE = NON_HDL
PARAMETER C_MPMC_SW_HIGHADDR = 0x00000000, DT = STD_LOGIC_VECTOR, ISVALID = (C_ALL_PIMS_SHARE_ADDRESSES == 0), TYPE = NON_HDL
PARAMETER C_SDMA_CTRL_BASEADDR = 0xFFFFFFFF, DT = STD_LOGIC_VECTOR, BUS = SDMA_CTRL0:SDMA_CTRL1:SDMA_CTRL2:SDMA_CTRL3:SDMA_CTRL4:SDMA_CTRL5:SDMA_CTRL6:SDMA_CTRL7, ADDRESS = BASE, PAIR = C_SDMA_CTRL_HIGHADDR, ADDR_TYPE = REGISTER, ISVALID = ((C_ALL_PIMS_SHARE_ADDRESSES) && ((C_PIM0_BASETYPE == 3) || (C_PIM1_BASETYPE == 3) || (C_PIM2_BASETYPE == 3) || (C_PIM3_BASETYPE == 3) || (C_PIM4_BASETYPE == 3) || (C_PIM5_BASETYPE == 3) || (C_PIM6_BASETYPE == 3) || (C_PIM7_BASETYPE == 3))), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL_HIGHADDR = 0x00000000, DT = STD_LOGIC_VECTOR, BUS = SDMA_CTRL0:SDMA_CTRL1:SDMA_CTRL2:SDMA_CTRL3:SDMA_CTRL4:SDMA_CTRL5:SDMA_CTRL6:SDMA_CTRL7, ADDRESS = HIGH, PAIR = C_SDMA_CTRL_BASEADDR, ADDR_TYPE = REGISTER, ISVALID = ((C_ALL_PIMS_SHARE_ADDRESSES) && ((C_PIM0_BASETYPE == 3) || (C_PIM1_BASETYPE == 3) || (C_PIM2_BASETYPE == 3) || (C_PIM3_BASETYPE == 3) || (C_PIM4_BASETYPE == 3) || (C_PIM5_BASETYPE == 3) || (C_PIM6_BASETYPE == 3) || (C_PIM7_BASETYPE == 3))), ASSIGNMENT = REQUIRE
PARAMETER C_MPMC_CTRL_BASEADDR = 0xFFFFFFFF, DT = STD_LOGIC_VECTOR, BUS = MPMC_CTRL, ADDRESS = BASE, PAIR = C_MPMC_CTRL_HIGHADDR, ADDR_TYPE = REGISTER, ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE), ASSIGNMENT = REQUIRE
PARAMETER C_MPMC_CTRL_HIGHADDR = 0x00000000, DT = STD_LOGIC_VECTOR, BUS = MPMC_CTRL, ADDRESS = HIGH, PAIR = C_MPMC_CTRL_BASEADDR, ADDR_TYPE = REGISTER, ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE), ASSIGNMENT = REQUIRE
PARAMETER C_MPMC_CTRL_AWIDTH = 32, DT = INTEGER, BUS = MPMC_CTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_MPMC_CTRL_DWIDTH = 64, DT = INTEGER, BUS = MPMC_CTRL, RANGE = (32,64,128), ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_MPMC_CTRL_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = MPMC_CTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_MPMC_CTRL_NUM_MASTERS = 1, DT = INTEGER, BUS = MPMC_CTRL, RANGE = (0:16), ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_MPMC_CTRL_MID_WIDTH = 1, DT = INTEGER, BUS = MPMC_CTRL, RANGE = (0:4), ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_MPMC_CTRL_P2P = 1, DT = INTEGER, BUS = MPMC_CTRL, RANGE = (0,1), ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_MPMC_CTRL_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = MPMC_CTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_MPMC_CTRL_SMALLEST_MASTER = 32, DT = INTEGER, BUS = MPMC_CTRL, RANGE = (32,64,128), ISVALID = (C_INCLUDE_ECC_SUPPORT || C_USE_STATIC_PHY || C_DEBUG_REG_ENABLE || C_PM_ENABLE)
PARAMETER C_NUM_IDELAYCTRL = 1, DT = INTEGER, RANGE = (0:16), IO_IF = memory_0, IO_IS = C_NUM_IDELAYCTRL, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_num_idelayctrl, ISVALID = (C_USE_MIG_V4_PHY | C_USE_MIG_V5_PHY)
PARAMETER C_IDELAYCTRL_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, IO_IF = memory_0, IO_IS = C_IDELAYCTRL_LOC, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_idelayctrl_loc, ISVALID = (C_USE_MIG_V4_PHY | C_USE_MIG_V5_PHY)
PARAMETER C_IODELAY_GRP = NOT_SET, DT = STRING, ASSIGNMENT = OPTIONAL_UPDATE, IO_IF = memory_0, IO_IS = C_IODELAY_GRP, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_iodelay_grp, ISVALID = (C_USE_MIG_V6_PHY)
PARAMETER C_MCB_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, VALUES = (NOT_SET=NOT SET, MEMC1=MEMC1, MEMC2=MEMC2, MEMC3=MEMC3, MEMC4=MEMC4), IO_IF = memory_0, IO_IS = C_MCB_LOC, ASSIGNMENT = REQUIRE, ISVALID = (C_USE_MCB_S6_PHY)
PARAMETER C_MMCM_EXT_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, IO_IS = C_MMCM_EXT_LOC, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mmcm_loc, ISVALID = (C_USE_MIG_V6_PHY)
PARAMETER C_MMCM_INT_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, IO_IS = C_MMCM_INT_LOC, ISVALID = (0)
PARAMETER C_MAX_REQ_ALLOWED = 1, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_ARB_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_WR_DATAPATH_TML_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_RD_DATAPATH_TML_MAX_FANOUT = 0, DT = INTEGER, RANGE = (0,1,2,4,8), ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_ARB_USE_DEFAULT = 0, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_ARB0_ALGO = ROUND_ROBIN, DT = STRING, VALUES = (ROUND_ROBIN=Round Robin, FIXED=Fixed, CUSTOM=Custom)
PARAMETER C_ARB0_NUM_SLOTS = 8, DT = INTEGER, RANGE = (1:16), ISVALID = ([xstrncmp C_ARB0_ALGO  CUSTOM ]), IPLEVEL_DRC_PROC = iplevel_drc_arb0_num_slots
PARAMETER C_ARB0_SLOT0 = 01234567, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 0  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT1 = 12345670, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 1  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT2 = 23456701, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 2  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT3 = 34567012, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 3  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT4 = 45670123, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 4  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT5 = 56701234, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 5  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT6 = 67012345, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 6  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT7 = 70123456, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 7  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT8 = 01234567, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 8  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT9 = 12345670, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 9  && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT10 = 23456701, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 10 && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT11 = 34567012, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 11 && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT12 = 45670123, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 12 && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT13 = 56701234, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 13 && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT14 = 67012345, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 14 && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_ARB0_SLOT15 = 70123456, DT = STRING, ISVALID = (C_ARB0_NUM_SLOTS > 15 && [xstrncmp C_ARB0_ALGO  CUSTOM ]), TYPE = NON_HDL
PARAMETER C_PM_ENABLE = 0, DT = INTEGER, RANGE = (0,1)
PARAMETER C_PM_DC_WIDTH = 48, DT = INTEGER, RANGE = (1:64), ISVALID = (C_PM_ENABLE)
PARAMETER C_PM_GC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PM_ENABLE)
PARAMETER C_PM_GC_WIDTH = 48, DT = INTEGER, RANGE = (1:64), ISVALID = (C_PM_ENABLE)
PARAMETER C_PM_SHIFT_CNT_BY = 1, DT = INTEGER, RANGE = (0:3), ISVALID = (C_PM_ENABLE)
PARAMETER C_SKIP_SIM_INIT_DELAY = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_USE_MIG_S3_PHY = 0, DT = INTEGER, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_phy, ASSIGNMENT = UPDATE
PARAMETER C_USE_MIG_V4_PHY = 0, DT = INTEGER, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_phy, ASSIGNMENT = UPDATE
PARAMETER C_USE_MIG_V5_PHY = 0, DT = INTEGER, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_phy, ASSIGNMENT = UPDATE
PARAMETER C_USE_MIG_V6_PHY = 0, DT = INTEGER, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_phy, ASSIGNMENT = UPDATE
PARAMETER C_USE_MCB_S6_PHY = 0, DT = INTEGER, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_phy, ASSIGNMENT = UPDATE
PARAMETER C_USE_STATIC_PHY = 0, DT = INTEGER, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_phy, ASSIGNMENT = OPTIONAL_UPDATE, IO_IF = memory_0, IO_IS = C_USE_STATIC_PHY, ISVALID = (![xstrncmp C_BASEFAMILY  spartan6 ] && ![xstrncmp C_BASEFAMILY  virtex6 ])
PARAMETER C_STATIC_PHY_RDDATA_CLK_SEL = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_USE_STATIC_PHY)
PARAMETER C_STATIC_PHY_RDDATA_SWAP_RISE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_USE_STATIC_PHY && ![xstrncmp C_MEM_TYPE  SDRAM ])
PARAMETER C_STATIC_PHY_RDEN_DELAY = 5, DT = INTEGER, RANGE = (0:15), ISVALID = (C_USE_STATIC_PHY), IO_IF = memory_0, IO_IS = C_STATIC_PHY_RDEN_DELAY
PARAMETER C_DEBUG_REG_ENABLE = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_USE_MIG_S3_PHY || C_USE_MIG_V4_PHY || C_USE_MIG_V5_PHY)
PARAMETER C_SPECIAL_BOARD = NONE, DT = STRING, VALUES = (NONE=NONE, S3E_STKIT=S3E_STKIT, S3E_1600E=S3E_1600E, S3A_STKIT=S3A_STKIT), IO_IF = memory_0, IO_IS = C_SPECIAL_BOARD, ISVALID = (C_USE_MIG_S3_PHY)
PARAMETER C_USE_MIG_FLOW = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_USE_MIG_S3_PHY || C_USE_MIG_V4_PHY || C_USE_MIG_V5_PHY || C_USE_MIG_V6_PHY), TYPE = NON_HDL, SYSLEVEL_DRC_PROC = syslevel_drc_mig_flow
PARAMETER C_MEM_ADDR_ORDER = BANK_ROW_COLUMN, DT = STRING, VALUES = (BANK_ROW_COLUMN=BANK_ROW_COLUMN, ROW_BANK_COLUMN=ROW_BANK_COLUMN), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_ADDR_ORDER
PARAMETER C_MEM_CALIBRATION_MODE = 1, DT = INTEGER, RANGE = (0:1), VALUES = (1=CALIBRATION, 0=NO CALIBRATION), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_CALIBRATION_MODE
PARAMETER C_MEM_CALIBRATION_DELAY = HALF, DT = STRING, VALUES = (QUARTER=QUARTER, FULL=FULL, HALF=HALF, THREEQUARTER=THREEQUARTER), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_CALIBRATION_DELAY
PARAMETER C_MEM_CALIBRATION_SOFT_IP = FALSE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_CALIBRATION_SOFT_IP
PARAMETER C_MEM_CALIBRATION_BYPASS = NO, DT = STRING, VALUES = (YES=YES, NO=NO), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_CALIBRATION_BYPASS
PARAMETER C_MPMC_MCB_DRP_CLK_PRESENT = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_USE_MCB_S6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mpmc_mcb_drp_clk_present
PARAMETER C_MEM_SKIP_IN_TERM_CAL = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_USE_MCB_S6_PHY && [xstrncmp C_MEM_CALIBRATION_SOFT_IP  TRUE ] && ![xstrncmp C_MEM_TYPE  LPDDR ]), IO_IS = C_MEM_SKIP_IN_TERM_CAL
PARAMETER C_MEM_SKIP_DYNAMIC_CAL = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_USE_MCB_S6_PHY && [xstrncmp C_MEM_CALIBRATION_SOFT_IP  TRUE ]), IO_IS = C_MEM_SKIP_DYNAMIC_CAL
PARAMETER C_MEM_SKIP_DYN_IN_TERM = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_USE_MCB_S6_PHY && [xstrncmp C_MEM_CALIBRATION_SOFT_IP  TRUE ] && ![xstrncmp C_MEM_TYPE  LPDDR ]), IO_IS = C_MEM_SKIP_DYN_IN_TERM
PARAMETER C_MEM_INCDEC_THRESHOLD = 0x02, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_INCDEC_THRESHOLD
PARAMETER C_MEM_CHECK_MAX_INDELAY = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_CHECK_MAX_INDELAY
PARAMETER C_MEM_CHECK_MAX_TAP_REG = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_CHECK_MAX_TAP_REG
PARAMETER C_MEM_TZQINIT_MAXCNT = 528, DT = INTEGER, ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MEM_TZQINIT_MAXCNT
PARAMETER C_MPMC_CLK_MEM_2X_PERIOD_PS = 1, DT = INTEGER, RANGE = (1,1250:12500), ASSIGNMENT = OPTIONAL_UPDATE, CLK_PORT = MPMC_Clk_Mem_2x, CLK_UNIT = PS, ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MPMC_CLK_MEM_2X_PERIOD_PS
PARAMETER C_MCB_USE_EXTERNAL_BUFPLL = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_USE_EXTERNAL_BUFPLL
PARAMETER C_MCB_LDQSP_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_LDQSP_TAP_DELAY_VAL
PARAMETER C_MCB_UDQSP_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_UDQSP_TAP_DELAY_VAL
PARAMETER C_MCB_LDQSN_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_LDQSN_TAP_DELAY_VAL
PARAMETER C_MCB_UDQSN_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_UDQSN_TAP_DELAY_VAL
PARAMETER C_MCB_DQ0_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ0_TAP_DELAY_VAL
PARAMETER C_MCB_DQ1_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ1_TAP_DELAY_VAL
PARAMETER C_MCB_DQ2_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ2_TAP_DELAY_VAL
PARAMETER C_MCB_DQ3_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ3_TAP_DELAY_VAL
PARAMETER C_MCB_DQ4_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ4_TAP_DELAY_VAL
PARAMETER C_MCB_DQ5_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ5_TAP_DELAY_VAL
PARAMETER C_MCB_DQ6_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ6_TAP_DELAY_VAL
PARAMETER C_MCB_DQ7_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ7_TAP_DELAY_VAL
PARAMETER C_MCB_DQ8_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ8_TAP_DELAY_VAL
PARAMETER C_MCB_DQ9_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ9_TAP_DELAY_VAL
PARAMETER C_MCB_DQ10_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ10_TAP_DELAY_VAL
PARAMETER C_MCB_DQ11_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ11_TAP_DELAY_VAL
PARAMETER C_MCB_DQ12_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ12_TAP_DELAY_VAL
PARAMETER C_MCB_DQ13_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ13_TAP_DELAY_VAL
PARAMETER C_MCB_DQ14_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ14_TAP_DELAY_VAL
PARAMETER C_MCB_DQ15_TAP_DELAY_VAL = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_USE_MCB_S6_PHY), IO_IS = C_MCB_DQ15_TAP_DELAY_VAL
PARAMETER C_MCB_RZQ_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, IO_IS = C_MCB_RZQ_LOC, ISVALID = (C_USE_MCB_S6_PHY)
PARAMETER C_MCB_ZIO_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, IO_IS = C_MCB_ZIO_LOC, ISVALID = (C_USE_MCB_S6_PHY)
PARAMETER C_MEM_TYPE = DDR2, DT = STRING, VALUES = (DDR3=DDR3, DDR2=DDR2, DDR=DDR, LPDDR=LPDDR, SDRAM=SDRAM), IPLEVEL_DRC_PROC = iplevel_drc_mem_type, IO_IF = memory_0, IO_IS = C_MEM_TYPE
PARAMETER C_MEM_PARTNO = NONE, DT = STRING, TYPE = NON_HDL, IO_IF = memory_0, IO_IS = C_MEM_PARTNO, ASSIGNMENT = REQUIRE, IPLEVEL_DRC_PROC = iplevel_drc_partno
PARAMETER C_MEM_PART_DATA_DEPTH = 16, DT = INTEGER, RANGE = (1,2,4,8,16,32,64,128,256,512,1024), ASSIGNMENT = REQUIRE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_DATA_DEPTH
PARAMETER C_MEM_PART_DATA_WIDTH = 8, DT = INTEGER, RANGE = (4,8,16,32,64), ASSIGNMENT = REQUIRE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_DATA_WIDTH, IPLEVEL_DRC_PROC = iplevel_drc_mem_data_width
PARAMETER C_MEM_PART_NUM_BANK_BITS = 2, DT = INTEGER, RANGE = (1:4), ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_NUM_BANK_BITS
PARAMETER C_MEM_PART_NUM_ROW_BITS = 13, DT = INTEGER, RANGE = (1:20), ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_NUM_ROW_BITS
PARAMETER C_MEM_PART_NUM_COL_BITS = 9, DT = INTEGER, RANGE = (1:20), ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_NUM_COL_BITS
PARAMETER C_MEM_PART_TRAS = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TRAS
PARAMETER C_MEM_PART_TRASMAX = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TRASMAX, TYPE = NON_HDL
PARAMETER C_MEM_PART_TRC = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TRC, TYPE = NON_HDL
PARAMETER C_MEM_PART_TRCD = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TRCD
PARAMETER C_MEM_PART_TDQSS = 1, DT = INTEGER, RANGE = (1), ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && [xstrncmp C_MEM_TYPE  DDR ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TDQSS, TYPE = NON_HDL
PARAMETER C_MEM_PART_TWR = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TWR
PARAMETER C_MEM_PART_TRP = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TRP
PARAMETER C_MEM_PART_TMRD = 4, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = (0), IO_IF = memory_0, IO_IS = C_MEM_PART_TMRD, TYPE = NON_HDL
PARAMETER C_MEM_PART_TRRD = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TRRD, TYPE = NON_HDL
PARAMETER C_MEM_PART_TRFC = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TRFC
PARAMETER C_MEM_PART_TREFI = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TREFI
PARAMETER C_MEM_PART_TAL = 0, DT = INTEGER, RANGE = (0), ISVALID = (0), IO_IF = memory_0, IO_IS = C_MEM_PART_TAL, TYPE = NON_HDL
PARAMETER C_MEM_PART_TCCD = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && ([xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ])), IO_IF = memory_0, IO_IS = C_MEM_PART_TCCD, TYPE = NON_HDL
PARAMETER C_MEM_PART_TWTR = 0, DT = INTEGER, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && ([xstrncmp C_MEM_TYPE  LPDDR ] || [xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ])), IO_IF = memory_0, IO_IS = C_MEM_PART_TWTR
PARAMETER C_MEM_PART_TRTP = 7500, DT = INTEGER, RANGE = (7500), ISVALID = (0), IO_IF = memory_0, IO_IS = C_MEM_PART_TRTP
PARAMETER C_MEM_PART_TZQINIT = 512, DT = INTEGER, RANGE = (512), ISVALID = (0), IO_IF = memory_0, IO_IS = C_MEM_PART_TZQCS, TYPE = NON_HDL
PARAMETER C_MEM_PART_TZQCS = 64, DT = INTEGER, RANGE = (64), ISVALID = (0), IO_IF = memory_0, IO_IS = C_MEM_PART_TZQCS, TYPE = NON_HDL
PARAMETER C_MEM_PART_TPRDI = 1000000, DT = INTEGER, ISVALID = (C_USE_MIG_V6_PHY), IO_IF = memory_0, IO_IS = C_MEM_PART_TPRDI
PARAMETER C_MEM_PART_TZQI = 128000000, DT = INTEGER, ISVALID = (C_USE_MIG_V6_PHY && [xstrncmp C_MEM_TYPE  DDR3 ]), IO_IF = memory_0, IO_IS = C_MEM_PART_TZQI
PARAMETER C_MEM_PART_CAS_A_FMAX = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_A_FMAX
PARAMETER C_MEM_PART_CAS_A = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = REQUIRE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ]), VALUES = (1.5 = 1.5 (2), 2 = 2, 2.5 = 2.5 (3), 3 = 3, 3.5 = 3.5 (4), 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9, 10 = 10), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_A, IPLEVEL_DRC_PROC = iplevel_drc_cas_check
PARAMETER C_MEM_PART_CAS_B_FMAX = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && C_MEM_PART_CAS_A_FMAX != 0), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_B_FMAX
PARAMETER C_MEM_PART_CAS_B = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && C_MEM_PART_CAS_A_FMAX != 0), VALUES = (1.5 = 1.5 (2), 2 = 2, 2.5 = 2.5 (3), 3 = 3, 3.5 = 3.5 (4), 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9, 10 = 10), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_B, IPLEVEL_DRC_PROC = iplevel_drc_cas_check
PARAMETER C_MEM_PART_CAS_C_FMAX = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && C_MEM_PART_CAS_B_FMAX != 0), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_C_FMAX
PARAMETER C_MEM_PART_CAS_C = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && C_MEM_PART_CAS_B_FMAX != 0), VALUES = (1.5 = 1.5 (2), 2 = 2, 2.5 = 2.5 (3), 3 = 3, 3.5 = 3.5 (4), 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9, 10 = 10), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_C, IPLEVEL_DRC_PROC = iplevel_drc_cas_check
PARAMETER C_MEM_PART_CAS_D_FMAX = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && C_MEM_PART_CAS_C_FMAX != 0), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_D_FMAX
PARAMETER C_MEM_PART_CAS_D = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, ISVALID = ([xstrncmp C_MEM_PARTNO  CUSTOM ] && C_MEM_PART_CAS_C_FMAX != 0), VALUES = (1.5 = 1.5 (2), 2 = 2, 2.5 = 2.5 (3), 3 = 3, 3.5 = 3.5 (4), 4 = 4, 5 = 5, 6 = 6, 7 = 7, 8 = 8, 9 = 9, 10 = 10), IO_IF = memory_0, IO_IS = C_MEM_PART_CAS_D, IPLEVEL_DRC_PROC = iplevel_drc_cas_check
PARAMETER C_MPMC_CLK0_PERIOD_PS = 1, DT = INTEGER, RANGE = (1:1000000), ASSIGNMENT = OPTIONAL_UPDATE, CLK_PORT = MPMC_Clk0, CLK_UNIT = PS
PARAMETER C_MPMC_CLK_MEM_PERIOD_PS = 1, DT = INTEGER, RANGE = (1:1000000), ASSIGNMENT = OPTIONAL_UPDATE, CLK_PORT = MPMC_Clk_Mem, CLK_UNIT = PS, TYPE = NON_HDL, ISVALID = (C_USE_STATIC_PHY || C_USE_MIG_V6_PHY)
PARAMETER C_MEM_CAS_LATENCY = 3, DT = INTEGER, RANGE = (2:10), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_mem_cas_latency
PARAMETER C_MEM_ODT_TYPE = 0, DT = INTEGER, RANGE = (0:5), VALUES = (0= Disabled/Disabled , 1= 75 Ohm/RZQ/4 , 2= 150 Ohm/RZQ/2 , 3= 50 Ohm/RZQ/6, 4=Reserved/RZQ/12, 5=Reserved/RZQ/8), ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ]), IPLEVEL_DRC_PROC = iplevel_drc_mem_odt_type, IO_IS = C_MEM_ODT_TYPE
PARAMETER C_MEM_REDUCED_DRV = 0, DT = INTEGER, RANGE = (0:3), VALUES = (0=FULL/RZQ/6/FULL, 1=REDUCED/RZQ/7/HALF, 2=RESERVED/RESERVED/QUARTER, 3=RESERVED/RESERVED/THREEQUARTERS), IPLEVEL_DRC_PROC = iplevel_drc_mem_reduced_drv, ISVALID = ([xstrncmp C_MEM_TYPE  LPDDR ] || [xstrncmp C_MEM_TYPE  DDR ] || [xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ])
PARAMETER C_MEM_REG_DIMM = 0, DT = INTEGER, RANGE = (0,1), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, IO_IF = memory_0, IO_IS = C_MEM_REG_DIMM, ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_MEM_CLK_WIDTH = 1, DT = INTEGER, RANGE = (1:16), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, IO_IF = memory_0, IO_IS = C_MEM_CLK_WIDTH, ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_MEM_ODT_WIDTH = 1, DT = INTEGER, RANGE = (1:16), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, IO_IF = memory_0, IO_IS = C_MEM_ODT_WIDTH, ISVALID = (([xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ]) && !C_USE_MCB_S6_PHY), IPLEVEL_DRC_PROC = iplevel_drc_ranks_x_dimms_multiple
PARAMETER C_MEM_CE_WIDTH = 1, DT = INTEGER, RANGE = (1:16), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, IO_IF = memory_0, IO_IS = C_MEM_CE_WIDTH, ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_MEM_CS_N_WIDTH = 1, DT = INTEGER, RANGE = (1:16), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, IO_IF = memory_0, IO_IS = C_MEM_CS_N_WIDTH, IPLEVEL_DRC_PROC = iplevel_drc_ranks_x_dimms_multiple, ISVALID = (!C_USE_MCB_S6_PHY)
PARAMETER C_MEM_ADDR_WIDTH = 13, DT = INTEGER, RANGE = (1:20), IO_IF = memory_0, IO_IS = C_MEM_ADDR_WIDTH, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_addr_width
PARAMETER C_MEM_BANKADDR_WIDTH = 2, DT = INTEGER, RANGE = (1:4), IO_IF = memory_0, IO_IS = C_MEM_BANKADDR_WIDTH, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_bankaddr_width
PARAMETER C_MEM_DATA_WIDTH = 64, DT = INTEGER, RANGE = (4,8,16,32,64), IO_IF = memory_0, IO_IS = C_MEM_DATA_WIDTH, IPLEVEL_DRC_PROC = iplevel_drc_mem_data_width
PARAMETER C_MEM_BITS_DATA_PER_DQS = 8, DT = INTEGER, RANGE = (4:8), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_bits_data
PARAMETER C_MEM_DM_WIDTH = 8, DT = INTEGER, RANGE = (1,2,4,8), IO_IF = memory_0, IO_IS = C_MEM_DM_WIDTH, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dm_width, ASSIGNMENT = UPDATE
PARAMETER C_MEM_DQS_WIDTH = 8, DT = INTEGER, RANGE = (1,2,4,8), IO_IF = memory_0, IO_IS = C_MEM_DQS_WIDTH, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_width, ASSIGNMENT = UPDATE
PARAMETER C_MEM_NUM_DIMMS = 1, DT = INTEGER, RANGE = (1)
PARAMETER C_MEM_NUM_RANKS = 1, DT = INTEGER, RANGE = (1:2), ISVALID = (!C_USE_MCB_S6_PHY), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_parameter, IPLEVEL_DRC_PROC = iplevel_drc_mem_num_ranks
PARAMETER C_MEM_DQS_IO_COL = 0x000000000000000000, DT = STD_LOGIC_VECTOR, IPLEVEL_DRC_PROC = iplevel_drc_mig_v3, ASSIGNMENT = CONSTANT
PARAMETER C_MEM_DQ_IO_MS = 0x000000000000000000, DT = STD_LOGIC_VECTOR, IPLEVEL_DRC_PROC = iplevel_drc_mig_v3, ASSIGNMENT = CONSTANT
PARAMETER C_DDR2_DQSN_ENABLE = 1, DT = INTEGER, RANGE = (0,1), IO_IS = C_DDR2_DQSN_ENABLE, IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ]), IPLEVEL_DRC_PROC = iplevel_drc_ddr2_dqsn_enable
PARAMETER C_INCLUDE_ECC_SUPPORT = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_USE_MIG_S3_PHY || C_USE_MIG_V4_PHY || C_USE_MIG_V5_PHY || C_USE_STATIC_PHY)
PARAMETER C_ECC_DEFAULT_ON = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_INCLUDE_ECC_TEST = 0, DT = INTEGER, RANGE = (0,1), ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_ECC_SEC_THRESHOLD = 1, DT = INTEGER, RANGE = (1:4095), ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_ECC_DEC_THRESHOLD = 1, DT = INTEGER, RANGE = (1:4095), ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_ECC_PEC_THRESHOLD = 1, DT = INTEGER, RANGE = (1:4095), ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_ECC_DATA_WIDTH = 0, DT = INTEGER, RANGE = (0,3:8), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_ecc_datawidth, ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_ECC_DM_WIDTH = 0, DT = INTEGER, RANGE = (0:1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_ecc_dmwidth, ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_ECC_DQS_WIDTH = 0, DT = INTEGER, RANGE = (0:1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_ecc_dqswidth, ISVALID = (C_INCLUDE_ECC_SUPPORT)
PARAMETER C_MEM_PA_SR = 0, DT = INTEGER, RANGE = (0:1), VALUES = (0=FULL, 1=HALF), ISVALID = (C_USE_MCB_S6_PHY && [xstrncmp C_MEM_TYPE  LPDDR ]), IPLEVEL_DRC_PROC = iplevel_drc_mem_pa_sr
PARAMETER C_MEM_CAS_WR_LATENCY = 5, DT = INTEGER, RANGE = (5:8), ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ]), ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_mem_cas_wr_latency
PARAMETER C_MEM_AUTO_SR = ENABLED, DT = STRING, VALUES = (ENABLED=ENABLED, MANUAL=MANUAL), ISVALID = (C_USE_MCB_S6_PHY && [xstrncmp C_MEM_TYPE  DDR3 ])
PARAMETER C_MEM_HIGH_TEMP_SR = NORMAL, DT = STRING, VALUES = (NORMAL=NORMAL, EXTENDED=EXTENDED), ISVALID = (C_USE_MCB_S6_PHY && ([xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ]))
PARAMETER C_MEM_DYNAMIC_WRITE_ODT = OFF, DT = STRING, VALUES = (OFF=OFF, DIV2=DIV2, DIV4=DIV4), ISVALID = (C_USE_MCB_S6_PHY && [xstrncmp C_MEM_TYPE  DDR3 ])
PARAMETER C_MEM_WRLVL = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_USE_MIG_V6_PHY && [xstrncmp C_MEM_TYPE  DDR3 ])
PARAMETER C_IDELAY_CLK_FREQ = DEFAULT, DT = STRING, VALUES = (DEFAULT=DEFAULT, 200.0=200.0, 300.0=300.0)
PARAMETER C_MEM_PHASE_DETECT = DEFAULT, DT = STRING, VALUES = (DEFAULT=DEFAULT, ON=ON, OFF=OFF)
PARAMETER C_MEM_IBUF_LPWR_MODE = DEFAULT, DT = STRING, VALUES = (DEFAULT=DEFAULT, ON=ON, OFF=OFF)
PARAMETER C_MEM_IODELAY_HP_MODE = DEFAULT, DT = STRING, VALUES = (DEFAULT=DEFAULT, ON=ON, OFF=OFF)
PARAMETER C_MEM_SIM_INIT_OPTION = DEFAULT, DT = STRING, VALUES = (DEFAULT=DEFAULT, SKIP_INIT=SKIP_INIT, SKIP_PU_DELAY=SKIP_PU_DELAY, NONE=NONE)
PARAMETER C_MEM_SIM_CAL_OPTION = DEFAULT, DT = STRING, VALUES = (DEFAULT=DEFAULT, SKIP_CAL=SKIP_CAL, FAST_CAL=FAST_CAL, FAST_WIN_DETECT=FAST_WIN_DETECT, NONE=NONE)
PARAMETER C_MEM_CAL_WIDTH = DEFAULT, DT = STRING, VALUES = (DEFAULT=DEFAULT, FULL=FULL, HALF=HALF)
PARAMETER C_MEM_NDQS_COL0 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, RANGE = (0:18), ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_NDQS_COL0
PARAMETER C_MEM_NDQS_COL1 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, RANGE = (0:18), ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_NDQS_COL1
PARAMETER C_MEM_NDQS_COL2 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, RANGE = (0:18), ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_NDQS_COL2
PARAMETER C_MEM_NDQS_COL3 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, RANGE = (0:18), ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_NDQS_COL3
PARAMETER C_MEM_DQS_LOC_COL0 = 0x000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_DQS_LOC_COL0
PARAMETER C_MEM_DQS_LOC_COL1 = 0x000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_DQS_LOC_COL1
PARAMETER C_MEM_DQS_LOC_COL2 = 0x000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_DQS_LOC_COL2
PARAMETER C_MEM_DQS_LOC_COL3 = 0x000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_MIG_V6_PHY), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mem_dqs_col, IO_IS = C_MEM_DQS_LOC_COL3
PARAMETER C_MAINT_PRESCALER_PERIOD = 200000, DT = INTEGER, ISVALID = (C_USE_MIG_V6_PHY), IO_IS = C_MAINT_PRESCALER_PERIOD
PARAMETER C_TBY4TAPVALUE = 9999, DT = INTEGER, RANGE = (0:63,9999), ISVALID = (C_USE_MIG_V4_PHY)
PARAMETER C_PIM0_BASEADDR = 0xFFFFFFFF, BUS = XCL0:XCL0_B:SPLB0:SDMA_LL0:PPC440MC0:VFBC0, ADDRESS = BASE, PAIR = C_PIM0_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ((C_PIM0_BASETYPE != 0 && C_PIM0_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM0_HIGHADDR = 0x00000000, BUS = XCL0:XCL0_B:SPLB0:SDMA_LL0:PPC440MC0:VFBC0, ADDRESS = HIGH, PAIR = C_PIM0_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ((C_PIM0_BASETYPE != 0 && C_PIM0_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM0_OFFSET = 0x00000000, BUS = XCL0:XCL0_B:SPLB0:SDMA_LL0:PPC440MC0, DT = STD_LOGIC_VECTOR, ISVALID = ((C_PIM0_BASETYPE == 1 || C_PIM0_BASETYPE == 2 || C_PIM0_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM0_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM0:VFBC0:MCB0, RANGE = (32,64,128), ISVALID = (C_PIM0_BASETYPE == 4 || C_PIM0_BASETYPE == 6 || ((C_PIM0_BASETYPE == 7 || C_PIM0_BASETYPE == 8 || C_PIM0_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM0_BASETYPE = 2, DT = INTEGER, BUS = XCL0:XCL0_B:SPLB0:SDMA_LL0:MPMC_PIM0:PPC440MC0:VFBC0:MCB0, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM0_SUBTYPE = PLB, DT = STRING, BUS = XCL0:SPLB0:SDMA_LL0:MPMC_PIM0:PPC440MC0:VFBC0:MCB0, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_PIM0_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL0_LINESIZE = 4, DT = INTEGER, BUS = XCL0, RANGE = (1,4,8,16), ISVALID = (C_PIM0_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL0_WRITEXFER = 1, DT = INTEGER, BUS = XCL0, RANGE = (0:2), ISVALID = (C_PIM0_BASETYPE == 1)
PARAMETER C_XCL0_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL0, RANGE = (0:3), ISVALID = (C_PIM0_BASETYPE == 1)
PARAMETER C_XCL0_B_IN_USE = 0, DT = INTEGER, BUS = XCL0, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE == 1)
PARAMETER C_PIM0_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL0_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_XCL0_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL0_B_LINESIZE = 4, DT = INTEGER, BUS = XCL0_B, RANGE = (1,4,8,16), ISVALID = (C_XCL0_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL0_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL0_B, RANGE = (0:2), ISVALID = (C_XCL0_B_IN_USE)
PARAMETER C_SPLB0_AWIDTH = 32, DT = INTEGER, BUS = SPLB0, ASSIGNMENT = CONSTANT, ISVALID = (C_PIM0_BASETYPE == 2)
PARAMETER C_SPLB0_DWIDTH = 64, DT = INTEGER, BUS = SPLB0, RANGE = (32,64,128), ISVALID = (C_PIM0_BASETYPE == 2)
PARAMETER C_SPLB0_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB0, RANGE = (32,64), ISVALID = (C_PIM0_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB0_NATIVE_DWIDTH
PARAMETER C_SPLB0_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB0, RANGE = (0:16), ISVALID = (C_PIM0_BASETYPE == 2)
PARAMETER C_SPLB0_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB0, RANGE = (0:4), ISVALID = (C_PIM0_BASETYPE == 2)
PARAMETER C_SPLB0_P2P = 1, DT = INTEGER, BUS = SPLB0, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE == 2)
PARAMETER C_SPLB0_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB0, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE == 2)
PARAMETER C_SPLB0_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB0, RANGE = (32,64,128), ISVALID = (C_PIM0_BASETYPE == 2)
PARAMETER C_SDMA_CTRL0_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL0, ADDRESS = BASE, PAIR = C_SDMA_CTRL0_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_PIM0_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL0_HIGHADDR = 0x00000000, BUS = SDMA_CTRL0, ADDRESS = HIGH, PAIR = C_SDMA_CTRL0_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_PIM0_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL0_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL0, ASSIGNMENT = CONSTANT, ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA_CTRL0_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL0, RANGE = (32,64,128), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA_CTRL0_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL0, RANGE = (32,64), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA_CTRL0_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL0, RANGE = (0:16), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA_CTRL0_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL0, RANGE = (0:4), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA_CTRL0_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL0, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA_CTRL0_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL0, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA_CTRL0_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL0, RANGE = (32,64,128), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA0_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL0, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA0_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL0, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA0_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL0, RANGE = (0:1023), ISVALID = (C_PIM0_BASETYPE == 3)
PARAMETER C_SDMA0_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL0, RANGE = (1:2), ISVALID = (C_PIM0_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC0_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC0, RANGE = (2,4,8), ISVALID = (C_PIM0_BASETYPE == 5)
PARAMETER C_PPC440MC0_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC0, RANGE = (0:2), ISVALID = (C_PIM0_BASETYPE == 5)
PARAMETER C_VFBC0_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC0, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_PIM0_BASETYPE == 6)
PARAMETER C_VFBC0_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC0, ISVALID = (C_PIM0_BASETYPE == 6)
PARAMETER C_VFBC0_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC0, RANGE = (8,16,32,64), ISVALID = (C_PIM0_BASETYPE == 6)
PARAMETER C_VFBC0_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC0, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_PIM0_BASETYPE == 6)
PARAMETER C_VFBC0_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC0, ISVALID = (C_PIM0_BASETYPE == 6)
PARAMETER C_PI0_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_PIM0_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM0_BASETYPE == 6)
PARAMETER C_PI0_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_PIM0_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM0_BASETYPE == 6), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI0_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI0_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE != 0 && ![xstrncmp C_PI0_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI0_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE != 0 && ![xstrncmp C_PI0_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI0_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE != 0 && ![xstrncmp C_PI0_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI0_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE != 0 && ![xstrncmp C_PI0_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI0_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI0_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_PIM0_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PIM1_BASEADDR = 0xFFFFFFFF, BUS = XCL1:XCL1_B:SPLB1:SDMA_LL1:PPC440MC1:VFBC1, ADDRESS = BASE, PAIR = C_PIM1_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 1 && (C_PIM1_BASETYPE != 0 && C_PIM1_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM1_HIGHADDR = 0x00000000, BUS = XCL1:XCL1_B:SPLB1:SDMA_LL1:PPC440MC1:VFBC1, ADDRESS = HIGH, PAIR = C_PIM1_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 1 && (C_PIM1_BASETYPE != 0 && C_PIM1_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM1_OFFSET = 0x00000000, BUS = XCL1:XCL1_B:SPLB1:SDMA_LL1:PPC440MC1, DT = STD_LOGIC_VECTOR, ISVALID = (C_NUM_PORTS > 1 && (C_PIM1_BASETYPE == 1 || C_PIM1_BASETYPE == 2 || C_PIM1_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM1_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM1:VFBC1:MCB1, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 4 || C_PIM1_BASETYPE == 6 || ((C_PIM1_BASETYPE == 7 || C_PIM1_BASETYPE == 8 || C_PIM1_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM1_BASETYPE = 0, DT = INTEGER, BUS = XCL1:SPLB1:SDMA_LL1:MPMC_PIM1:PPC440MC1:VFBC1:MCB1, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM1_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL1:SPLB1:SDMA_LL1:MPMC_PIM1:PPC440MC1:VFBC1:MCB1, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL1_LINESIZE = 4, DT = INTEGER, BUS = XCL1, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL1_WRITEXFER = 1, DT = INTEGER, BUS = XCL1, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 1)
PARAMETER C_XCL1_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL1, RANGE = (0:3), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 1)
PARAMETER C_XCL1_B_IN_USE = 0, DT = INTEGER, BUS = XCL1, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 1)
PARAMETER C_PIM1_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL1_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 1 && C_XCL1_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL1_B_LINESIZE = 4, DT = INTEGER, BUS = XCL1_B, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 1 && C_XCL1_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL1_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL1_B, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 1 && C_XCL1_B_IN_USE)
PARAMETER C_SPLB1_AWIDTH = 32, DT = INTEGER, BUS = SPLB1, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2)
PARAMETER C_SPLB1_DWIDTH = 64, DT = INTEGER, BUS = SPLB1, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2)
PARAMETER C_SPLB1_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB1, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB1_NATIVE_DWIDTH
PARAMETER C_SPLB1_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB1, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2)
PARAMETER C_SPLB1_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB1, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2)
PARAMETER C_SPLB1_P2P = 1, DT = INTEGER, BUS = SPLB1, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2)
PARAMETER C_SPLB1_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB1, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2)
PARAMETER C_SPLB1_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB1, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 2)
PARAMETER C_SDMA_CTRL1_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL1, ADDRESS = BASE, PAIR = C_SDMA_CTRL1_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL1_HIGHADDR = 0x00000000, BUS = SDMA_CTRL1, ADDRESS = HIGH, PAIR = C_SDMA_CTRL1_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL1_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL1, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA_CTRL1_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL1, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA_CTRL1_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL1, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA_CTRL1_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL1, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA_CTRL1_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL1, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA_CTRL1_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL1, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA_CTRL1_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL1, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA_CTRL1_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL1, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA1_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL1, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA1_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL1, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA1_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL1, RANGE = (0:1023), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PARAMETER C_SDMA1_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL1, RANGE = (1:2), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC1_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC1, RANGE = (2,4,8), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 5)
PARAMETER C_PPC440MC1_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC1, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 5)
PARAMETER C_VFBC1_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC1, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 6)
PARAMETER C_VFBC1_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC1, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 6)
PARAMETER C_VFBC1_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC1, RANGE = (8,16,32,64), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 6)
PARAMETER C_VFBC1_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC1, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 6)
PARAMETER C_VFBC1_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC1, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 6)
PARAMETER C_PI1_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM1_BASETYPE == 6)
PARAMETER C_PI1_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM1_BASETYPE == 6), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI1_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI1_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && ![xstrncmp C_PI1_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI1_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && ![xstrncmp C_PI1_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI1_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && ![xstrncmp C_PI1_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI1_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && ![xstrncmp C_PI1_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI1_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI1_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PIM2_BASEADDR = 0xFFFFFFFF, BUS = XCL2:XCL2_B:SPLB2:SDMA_LL2:PPC440MC2:VFBC2, ADDRESS = BASE, PAIR = C_PIM2_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 2 && (C_PIM2_BASETYPE != 0 && C_PIM2_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM2_HIGHADDR = 0x00000000, BUS = XCL2:XCL2_B:SPLB2:SDMA_LL2:PPC440MC2:VFBC2, ADDRESS = HIGH, PAIR = C_PIM2_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 2 && (C_PIM2_BASETYPE != 0 && C_PIM2_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM2_OFFSET = 0x00000000, BUS = XCL2:XCL2_B:SPLB2:SDMA_LL2:PPC440MC2, DT = STD_LOGIC_VECTOR, ISVALID = (C_NUM_PORTS > 2 && (C_PIM2_BASETYPE == 1 || C_PIM2_BASETYPE == 2 || C_PIM2_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM2_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM2:VFBC2:MCB2, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 4 || C_PIM2_BASETYPE == 6 || ((C_PIM2_BASETYPE == 7 || C_PIM2_BASETYPE == 8 || C_PIM2_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM2_BASETYPE = 0, DT = INTEGER, BUS = XCL2:SPLB2:SDMA_LL2:MPMC_PIM2:PPC440MC2:VFBC2:MCB2, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM2_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL2:SPLB2:SDMA_LL2:MPMC_PIM2:PPC440MC2:VFBC2:MCB2, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL2_LINESIZE = 4, DT = INTEGER, BUS = XCL2, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL2_WRITEXFER = 1, DT = INTEGER, BUS = XCL2, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 1)
PARAMETER C_XCL2_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL2, RANGE = (0:3), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 1)
PARAMETER C_XCL2_B_IN_USE = 0, DT = INTEGER, BUS = XCL2, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 1)
PARAMETER C_PIM2_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL2_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 2 && C_XCL2_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL2_B_LINESIZE = 4, DT = INTEGER, BUS = XCL2_B, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 2 && C_XCL2_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL2_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL2_B, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 2 && C_XCL2_B_IN_USE)
PARAMETER C_SPLB2_AWIDTH = 32, DT = INTEGER, BUS = SPLB2, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2)
PARAMETER C_SPLB2_DWIDTH = 64, DT = INTEGER, BUS = SPLB2, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2)
PARAMETER C_SPLB2_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB2, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB2_NATIVE_DWIDTH
PARAMETER C_SPLB2_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB2, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2)
PARAMETER C_SPLB2_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB2, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2)
PARAMETER C_SPLB2_P2P = 1, DT = INTEGER, BUS = SPLB2, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2)
PARAMETER C_SPLB2_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB2, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2)
PARAMETER C_SPLB2_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB2, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 2)
PARAMETER C_SDMA_CTRL2_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL2, ADDRESS = BASE, PAIR = C_SDMA_CTRL2_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL2_HIGHADDR = 0x00000000, BUS = SDMA_CTRL2, ADDRESS = HIGH, PAIR = C_SDMA_CTRL2_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL2_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL2, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA_CTRL2_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL2, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA_CTRL2_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL2, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA_CTRL2_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL2, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA_CTRL2_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL2, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA_CTRL2_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL2, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA_CTRL2_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL2, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA_CTRL2_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL2, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA2_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL2, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA2_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL2, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA2_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL2, RANGE = (0:1023), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PARAMETER C_SDMA2_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL2, RANGE = (1:2), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC2_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC2, RANGE = (2,4,8), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 5)
PARAMETER C_PPC440MC2_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC2, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 5)
PARAMETER C_VFBC2_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC2, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 6)
PARAMETER C_VFBC2_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC2, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 6)
PARAMETER C_VFBC2_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC2, RANGE = (8,16,32,64), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 6)
PARAMETER C_VFBC2_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC2, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 6)
PARAMETER C_VFBC2_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC2, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 6)
PARAMETER C_PI2_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM2_BASETYPE == 6)
PARAMETER C_PI2_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM2_BASETYPE == 6), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI2_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI2_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && ![xstrncmp C_PI2_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI2_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && ![xstrncmp C_PI2_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI2_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && ![xstrncmp C_PI2_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI2_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && ![xstrncmp C_PI2_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI2_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI2_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PIM3_BASEADDR = 0xFFFFFFFF, BUS = XCL3:XCL3_B:SPLB3:SDMA_LL3:PPC440MC3:VFBC3, ADDRESS = BASE, PAIR = C_PIM3_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 3 && (C_PIM3_BASETYPE != 0 && C_PIM3_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM3_HIGHADDR = 0x00000000, BUS = XCL3:XCL3_B:SPLB3:SDMA_LL3:PPC440MC3:VFBC3, ADDRESS = HIGH, PAIR = C_PIM3_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 3 && (C_PIM3_BASETYPE != 0 && C_PIM3_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM3_OFFSET = 0x00000000, BUS = XCL3:XCL3_B:SPLB3:SDMA_LL3:PPC440MC3, DT = STD_LOGIC_VECTOR, ISVALID = (C_NUM_PORTS > 3 && (C_PIM3_BASETYPE == 1 || C_PIM3_BASETYPE == 2 || C_PIM3_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM3_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM3:VFBC3:MCB3, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 4 || C_PIM3_BASETYPE == 6 || ((C_PIM3_BASETYPE == 7 || C_PIM3_BASETYPE == 8 || C_PIM3_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM3_BASETYPE = 0, DT = INTEGER, BUS = XCL3:SPLB3:SDMA_LL3:MPMC_PIM3:PPC440MC3:VFBC3:MCB3, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM3_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL3:SPLB3:SDMA_LL3:MPMC_PIM3:PPC440MC3:VFBC3:MCB3, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL3_LINESIZE = 4, DT = INTEGER, BUS = XCL3, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL3_WRITEXFER = 1, DT = INTEGER, BUS = XCL3, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 1)
PARAMETER C_XCL3_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL3, RANGE = (0:3), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 1)
PARAMETER C_XCL3_B_IN_USE = 0, DT = INTEGER, BUS = XCL3, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 1)
PARAMETER C_PIM3_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL3_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 3 && C_XCL3_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL3_B_LINESIZE = 4, DT = INTEGER, BUS = XCL3_B, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 3 && C_XCL3_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL3_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL3_B, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 3 && C_XCL3_B_IN_USE)
PARAMETER C_SPLB3_AWIDTH = 32, DT = INTEGER, BUS = SPLB3, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2)
PARAMETER C_SPLB3_DWIDTH = 64, DT = INTEGER, BUS = SPLB3, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2)
PARAMETER C_SPLB3_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB3, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB3_NATIVE_DWIDTH
PARAMETER C_SPLB3_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB3, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2)
PARAMETER C_SPLB3_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB3, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2)
PARAMETER C_SPLB3_P2P = 1, DT = INTEGER, BUS = SPLB3, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2)
PARAMETER C_SPLB3_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB3, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2)
PARAMETER C_SPLB3_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB3, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 2)
PARAMETER C_SDMA_CTRL3_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL3, ADDRESS = BASE, PAIR = C_SDMA_CTRL3_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL3_HIGHADDR = 0x00000000, BUS = SDMA_CTRL3, ADDRESS = HIGH, PAIR = C_SDMA_CTRL3_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL3_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL3, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA_CTRL3_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL3, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA_CTRL3_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL3, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA_CTRL3_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL3, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA_CTRL3_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL3, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA_CTRL3_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL3, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA_CTRL3_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL3, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA_CTRL3_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL3, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA3_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL3, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA3_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL3, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA3_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL3, RANGE = (0:1023), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PARAMETER C_SDMA3_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL3, RANGE = (1:2), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC3_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC3, RANGE = (2,4,8), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 5)
PARAMETER C_PPC440MC3_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC3, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 5)
PARAMETER C_VFBC3_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC3, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 6)
PARAMETER C_VFBC3_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC3, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 6)
PARAMETER C_VFBC3_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC3, RANGE = (8,16,32,64), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 6)
PARAMETER C_VFBC3_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC3, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 6)
PARAMETER C_VFBC3_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC3, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 6)
PARAMETER C_PI3_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM3_BASETYPE == 6)
PARAMETER C_PI3_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM3_BASETYPE == 6), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI3_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI3_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && ![xstrncmp C_PI3_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI3_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && ![xstrncmp C_PI3_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI3_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && ![xstrncmp C_PI3_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI3_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && ![xstrncmp C_PI3_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI3_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI3_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PIM4_BASEADDR = 0xFFFFFFFF, BUS = XCL4:XCL4_B:SPLB4:SDMA_LL4:PPC440MC4:VFBC4, ADDRESS = BASE, PAIR = C_PIM4_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 4 && (C_PIM4_BASETYPE != 0 && C_PIM4_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM4_HIGHADDR = 0x00000000, BUS = XCL4:XCL4_B:SPLB4:SDMA_LL4:PPC440MC4:VFBC4, ADDRESS = HIGH, PAIR = C_PIM4_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 4 && (C_PIM4_BASETYPE != 0 && C_PIM4_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM4_OFFSET = 0x00000000, BUS = XCL4:XCL4_B:SPLB4:SDMA_LL4:PPC440MC4, DT = STD_LOGIC_VECTOR, ISVALID = (C_NUM_PORTS > 4 && (C_PIM4_BASETYPE == 1 || C_PIM4_BASETYPE == 2 || C_PIM4_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM4_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM4:VFBC4:MCB4, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 4 || C_PIM4_BASETYPE == 6 || ((C_PIM4_BASETYPE == 7 || C_PIM4_BASETYPE == 8 || C_PIM4_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM4_BASETYPE = 0, DT = INTEGER, BUS = XCL4:SPLB4:SDMA_LL4:MPMC_PIM4:PPC440MC4:VFBC4:MCB4, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM4_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL4:SPLB4:SDMA_LL4:MPMC_PIM4:PPC440MC4:VFBC4:MCB4, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL4_LINESIZE = 4, DT = INTEGER, BUS = XCL4, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL4_WRITEXFER = 1, DT = INTEGER, BUS = XCL4, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 1)
PARAMETER C_XCL4_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL4, RANGE = (0:3), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 1)
PARAMETER C_XCL4_B_IN_USE = 0, DT = INTEGER, BUS = XCL4, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 1)
PARAMETER C_PIM4_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL4_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 4 && C_XCL4_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL4_B_LINESIZE = 4, DT = INTEGER, BUS = XCL4_B, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 4 && C_XCL4_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL4_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL4_B, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 4 && C_XCL4_B_IN_USE)
PARAMETER C_SPLB4_AWIDTH = 32, DT = INTEGER, BUS = SPLB4, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2)
PARAMETER C_SPLB4_DWIDTH = 64, DT = INTEGER, BUS = SPLB4, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2)
PARAMETER C_SPLB4_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB4, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB4_NATIVE_DWIDTH
PARAMETER C_SPLB4_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB4, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2)
PARAMETER C_SPLB4_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB4, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2)
PARAMETER C_SPLB4_P2P = 1, DT = INTEGER, BUS = SPLB4, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2)
PARAMETER C_SPLB4_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB4, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2)
PARAMETER C_SPLB4_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB4, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 2)
PARAMETER C_SDMA_CTRL4_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL4, ADDRESS = BASE, PAIR = C_SDMA_CTRL4_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL4_HIGHADDR = 0x00000000, BUS = SDMA_CTRL4, ADDRESS = HIGH, PAIR = C_SDMA_CTRL4_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL4_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL4, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA_CTRL4_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL4, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA_CTRL4_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL4, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA_CTRL4_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL4, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA_CTRL4_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL4, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA_CTRL4_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL4, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA_CTRL4_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL4, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA_CTRL4_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL4, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA4_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL4, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA4_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL4, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA4_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL4, RANGE = (0:1023), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PARAMETER C_SDMA4_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL4, RANGE = (1:2), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC4_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC4, RANGE = (2,4,8), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 5)
PARAMETER C_PPC440MC4_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC4, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 5)
PARAMETER C_VFBC4_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC4, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 6)
PARAMETER C_VFBC4_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC4, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 6)
PARAMETER C_VFBC4_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC4, RANGE = (8,16,32,64), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 6)
PARAMETER C_VFBC4_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC4, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 6)
PARAMETER C_VFBC4_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC4, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 6)
PARAMETER C_PI4_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM4_BASETYPE == 6)
PARAMETER C_PI4_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM4_BASETYPE == 6), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI4_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI4_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && ![xstrncmp C_PI4_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI4_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && ![xstrncmp C_PI4_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI4_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && ![xstrncmp C_PI4_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI4_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && ![xstrncmp C_PI4_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI4_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI4_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PIM5_BASEADDR = 0xFFFFFFFF, BUS = XCL5:XCL5_B:SPLB5:SDMA_LL5:PPC440MC5:VFBC5, ADDRESS = BASE, PAIR = C_PIM5_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 5 && (C_PIM5_BASETYPE != 0 && C_PIM5_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM5_HIGHADDR = 0x00000000, BUS = XCL5:XCL5_B:SPLB5:SDMA_LL5:PPC440MC5:VFBC5, ADDRESS = HIGH, PAIR = C_PIM5_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 5 && (C_PIM5_BASETYPE != 0 && C_PIM5_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM5_OFFSET = 0x00000000, BUS = XCL5:XCL5_B:SPLB5:SDMA_LL5:PPC440MC5, DT = STD_LOGIC_VECTOR, ISVALID = (C_NUM_PORTS > 5 && (C_PIM5_BASETYPE == 1 || C_PIM5_BASETYPE == 2 || C_PIM5_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM5_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM5:VFBC5:MCB5, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 4 || C_PIM5_BASETYPE == 6 || ((C_PIM5_BASETYPE == 7 || C_PIM5_BASETYPE == 8 || C_PIM5_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM5_BASETYPE = 0, DT = INTEGER, BUS = XCL5:SPLB5:SDMA_LL5:MPMC_PIM5:PPC440MC5:VFBC5:MCB5, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM5_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL5:SPLB5:SDMA_LL5:MPMC_PIM5:PPC440MC5:VFBC5:MCB5, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL5_LINESIZE = 4, DT = INTEGER, BUS = XCL5, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL5_WRITEXFER = 1, DT = INTEGER, BUS = XCL5, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 1)
PARAMETER C_XCL5_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL5, RANGE = (0:3), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 1)
PARAMETER C_XCL5_B_IN_USE = 0, DT = INTEGER, BUS = XCL5, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 1)
PARAMETER C_PIM5_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL5_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 5 && C_XCL5_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL5_B_LINESIZE = 4, DT = INTEGER, BUS = XCL5_B, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 5 && C_XCL5_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL5_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL5_B, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 5 && C_XCL5_B_IN_USE)
PARAMETER C_SPLB5_AWIDTH = 32, DT = INTEGER, BUS = SPLB5, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2)
PARAMETER C_SPLB5_DWIDTH = 64, DT = INTEGER, BUS = SPLB5, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2)
PARAMETER C_SPLB5_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB5, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB5_NATIVE_DWIDTH
PARAMETER C_SPLB5_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB5, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2)
PARAMETER C_SPLB5_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB5, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2)
PARAMETER C_SPLB5_P2P = 1, DT = INTEGER, BUS = SPLB5, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2)
PARAMETER C_SPLB5_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB5, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2)
PARAMETER C_SPLB5_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB5, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 2)
PARAMETER C_SDMA_CTRL5_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL5, ADDRESS = BASE, PAIR = C_SDMA_CTRL5_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL5_HIGHADDR = 0x00000000, BUS = SDMA_CTRL5, ADDRESS = HIGH, PAIR = C_SDMA_CTRL5_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL5_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL5, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA_CTRL5_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL5, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA_CTRL5_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL5, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA_CTRL5_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL5, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA_CTRL5_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL5, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA_CTRL5_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL5, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA_CTRL5_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL5, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA_CTRL5_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL5, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA5_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL5, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA5_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL5, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA5_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL5, RANGE = (0:1023), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PARAMETER C_SDMA5_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL5, RANGE = (1:2), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC5_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC5, RANGE = (2,4,8), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 5)
PARAMETER C_PPC440MC5_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC5, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 5)
PARAMETER C_VFBC5_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC5, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 6)
PARAMETER C_VFBC5_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC5, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 6)
PARAMETER C_VFBC5_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC5, RANGE = (8,16,32,64), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 6)
PARAMETER C_VFBC5_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC5, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 6)
PARAMETER C_VFBC5_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC5, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 6)
PARAMETER C_PI5_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM5_BASETYPE == 6)
PARAMETER C_PI5_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && !C_USE_MCB_S6_PHY || C_PIM5_BASETYPE == 6), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI5_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI5_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && ![xstrncmp C_PI5_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI5_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && ![xstrncmp C_PI5_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI5_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && ![xstrncmp C_PI5_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI5_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && ![xstrncmp C_PI5_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI5_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI5_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PIM6_BASEADDR = 0xFFFFFFFF, BUS = XCL6:XCL6_B:SPLB6:SDMA_LL6:PPC440MC6:VFBC6, ADDRESS = BASE, PAIR = C_PIM6_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 6 && (C_PIM6_BASETYPE != 0 && C_PIM6_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM6_HIGHADDR = 0x00000000, BUS = XCL6:XCL6_B:SPLB6:SDMA_LL6:PPC440MC6:VFBC6, ADDRESS = HIGH, PAIR = C_PIM6_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 6 && (C_PIM6_BASETYPE != 0 && C_PIM6_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM6_OFFSET = 0x00000000, BUS = XCL6:XCL6_B:SPLB6:SDMA_LL6:PPC440MC6, DT = STD_LOGIC_VECTOR, ISVALID = (C_NUM_PORTS > 6 && (C_PIM6_BASETYPE == 1 || C_PIM6_BASETYPE == 2 || C_PIM6_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM6_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM6:VFBC6:MCB6, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 4 || C_PIM6_BASETYPE == 6 || ((C_PIM6_BASETYPE == 7 || C_PIM6_BASETYPE == 8 || C_PIM6_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM6_BASETYPE = 0, DT = INTEGER, BUS = XCL6:SPLB6:SDMA_LL6:MPMC_PIM6:PPC440MC6:VFBC6:MCB6, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM6_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL6:SPLB6:SDMA_LL6:MPMC_PIM6:PPC440MC6:VFBC6:MCB6, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL6_LINESIZE = 4, DT = INTEGER, BUS = XCL6, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL6_WRITEXFER = 1, DT = INTEGER, BUS = XCL6, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 1)
PARAMETER C_XCL6_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL6, RANGE = (0:3), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 1)
PARAMETER C_XCL6_B_IN_USE = 0, DT = INTEGER, BUS = XCL6, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 1)
PARAMETER C_PIM6_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL6_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 6 && C_XCL6_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL6_B_LINESIZE = 4, DT = INTEGER, BUS = XCL6_B, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 6 && C_XCL6_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL6_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL6_B, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 6 && C_XCL6_B_IN_USE)
PARAMETER C_SPLB6_AWIDTH = 32, DT = INTEGER, BUS = SPLB6, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2)
PARAMETER C_SPLB6_DWIDTH = 64, DT = INTEGER, BUS = SPLB6, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2)
PARAMETER C_SPLB6_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB6, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB6_NATIVE_DWIDTH
PARAMETER C_SPLB6_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB6, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2)
PARAMETER C_SPLB6_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB6, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2)
PARAMETER C_SPLB6_P2P = 1, DT = INTEGER, BUS = SPLB6, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2)
PARAMETER C_SPLB6_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB6, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2)
PARAMETER C_SPLB6_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB6, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 2)
PARAMETER C_SDMA_CTRL6_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL6, ADDRESS = BASE, PAIR = C_SDMA_CTRL6_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL6_HIGHADDR = 0x00000000, BUS = SDMA_CTRL6, ADDRESS = HIGH, PAIR = C_SDMA_CTRL6_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL6_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL6, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA_CTRL6_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL6, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA_CTRL6_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL6, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA_CTRL6_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL6, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA_CTRL6_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL6, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA_CTRL6_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL6, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA_CTRL6_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL6, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA_CTRL6_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL6, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA6_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL6, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA6_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL6, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA6_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL6, RANGE = (0:1023), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PARAMETER C_SDMA6_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL6, RANGE = (1:2), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC6_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC6, RANGE = (2,4,8), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 5)
PARAMETER C_PPC440MC6_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC6, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 5)
PARAMETER C_VFBC6_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC6, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 6)
PARAMETER C_VFBC6_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC6, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 6)
PARAMETER C_VFBC6_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC6, RANGE = (8,16,32,64), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 6)
PARAMETER C_VFBC6_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC6, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 6)
PARAMETER C_VFBC6_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC6, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 6)
PARAMETER C_PI6_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI6_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && !C_USE_MCB_S6_PHY), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI6_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI6_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && ![xstrncmp C_PI6_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI6_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && ![xstrncmp C_PI6_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI6_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && ![xstrncmp C_PI6_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI6_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && ![xstrncmp C_PI6_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI6_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI6_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PIM7_BASEADDR = 0xFFFFFFFF, BUS = XCL7:XCL7_B:SPLB7:SDMA_LL7:PPC440MC7:VFBC7, ADDRESS = BASE, PAIR = C_PIM7_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 7 && (C_PIM7_BASETYPE != 0 && C_PIM7_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM7_HIGHADDR = 0x00000000, BUS = XCL7:XCL7_B:SPLB7:SDMA_LL7:PPC440MC7:VFBC7, ADDRESS = HIGH, PAIR = C_PIM7_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_PORTS > 7 && (C_PIM7_BASETYPE != 0 && C_PIM7_BASETYPE != 4) && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_PIM7_OFFSET = 0x00000000, BUS = XCL7:XCL7_B:SPLB7:SDMA_LL7:PPC440MC7, DT = STD_LOGIC_VECTOR, ISVALID = (C_NUM_PORTS > 7 && (C_PIM7_BASETYPE == 1 || C_PIM7_BASETYPE == 2 || C_PIM7_BASETYPE == 5) && C_ALL_PIMS_SHARE_ADDRESSES == 0)
PARAMETER C_PIM7_DATA_WIDTH = 64, DT = INTEGER, BUS = MPMC_PIM7:VFBC7:MCB7, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 4 || C_PIM7_BASETYPE == 6 || ((C_PIM7_BASETYPE == 7 || C_PIM7_BASETYPE == 8 || C_PIM7_BASETYPE == 9) && C_USE_MCB_S6_PHY)), IPLEVEL_DRC_PROC = iplevel_drc_pim_data_width, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_pim_data_width
PARAMETER C_PIM7_BASETYPE = 0, DT = INTEGER, BUS = XCL7:SPLB7:SDMA_LL7:MPMC_PIM7:PPC440MC7:VFBC7:MCB7, RANGE = (0:9), VALUES = (0=INACTIVE, 1=XCL, 2=PLBV46, 3=SDMA, 4=NPI, 5=PPC440MC, 6=VFBC, 7=MCB, 8=MCB-Read, 9=MCB-Write), IPLEVEL_DRC_PROC = iplevel_drc_pim_basetype
PARAMETER C_PIM7_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL7:SPLB7:SDMA_LL7:MPMC_PIM7:PPC440MC7:VFBC7:MCB7, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype, SYSLEVEL_DRC_PROC = syslevel_drc_splb_subtype
PARAMETER C_XCL7_LINESIZE = 4, DT = INTEGER, BUS = XCL7, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 1), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL7_WRITEXFER = 1, DT = INTEGER, BUS = XCL7, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 1)
PARAMETER C_XCL7_PIPE_STAGES = 2, DT = INTEGER, BUS = XCL7, RANGE = (0:3), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 1)
PARAMETER C_XCL7_B_IN_USE = 0, DT = INTEGER, BUS = XCL7, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 1)
PARAMETER C_PIM7_B_SUBTYPE = INACTIVE, DT = STRING, BUS = XCL7_B, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_NUM_PORTS > 7 && C_XCL7_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_pim_subtype
PARAMETER C_XCL7_B_LINESIZE = 4, DT = INTEGER, BUS = XCL7_B, RANGE = (1,4,8,16), ISVALID = (C_NUM_PORTS > 7 && C_XCL7_B_IN_USE), SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_xcl_linesize
PARAMETER C_XCL7_B_WRITEXFER = 1, DT = INTEGER, BUS = XCL7_B, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 7 && C_XCL7_B_IN_USE)
PARAMETER C_SPLB7_AWIDTH = 32, DT = INTEGER, BUS = SPLB7, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2)
PARAMETER C_SPLB7_DWIDTH = 64, DT = INTEGER, BUS = SPLB7, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2)
PARAMETER C_SPLB7_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = SPLB7, RANGE = (32,64), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_splb_native_dwidth, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_DRC_PROC = syslevel_drc_splb_native_dwidth, IO_IS = C_SPLB7_NATIVE_DWIDTH
PARAMETER C_SPLB7_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB7, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2)
PARAMETER C_SPLB7_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB7, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2)
PARAMETER C_SPLB7_P2P = 1, DT = INTEGER, BUS = SPLB7, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2)
PARAMETER C_SPLB7_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB7, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2)
PARAMETER C_SPLB7_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB7, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 2)
PARAMETER C_SDMA_CTRL7_BASEADDR = 0xFFFFFFFF, BUS = SDMA_CTRL7, ADDRESS = BASE, PAIR = C_SDMA_CTRL7_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL7_HIGHADDR = 0x00000000, BUS = SDMA_CTRL7, ADDRESS = HIGH, PAIR = C_SDMA_CTRL7_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = REGISTER, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3 && C_ALL_PIMS_SHARE_ADDRESSES == 0), ASSIGNMENT = REQUIRE
PARAMETER C_SDMA_CTRL7_AWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL7, ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA_CTRL7_DWIDTH = 64, DT = INTEGER, BUS = SDMA_CTRL7, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA_CTRL7_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SDMA_CTRL7, RANGE = (32,64), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA_CTRL7_NUM_MASTERS = 1, DT = INTEGER, BUS = SDMA_CTRL7, RANGE = (0:16), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA_CTRL7_MID_WIDTH = 1, DT = INTEGER, BUS = SDMA_CTRL7, RANGE = (0:4), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA_CTRL7_P2P = 1, DT = INTEGER, BUS = SDMA_CTRL7, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA_CTRL7_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SDMA_CTRL7, RANGE = (0,1), ASSIGNMENT = CONSTANT, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA_CTRL7_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SDMA_CTRL7, RANGE = (32,64,128), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA7_COMPLETED_ERR_TX = 1, DT = INTEGER, BUS = SDMA_LL7, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA7_COMPLETED_ERR_RX = 1, DT = INTEGER, BUS = SDMA_LL7, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA7_PRESCALAR = 1023, DT = INTEGER, BUS = SDMA_LL7, RANGE = (0:1023), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PARAMETER C_SDMA7_PI2LL_CLK_RATIO = 1, DT = INTEGER, BUS = SDMA_LL7, RANGE = (1:2), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3), ASSIGNMENT = REQUIRE
PARAMETER C_PPC440MC7_BURST_LENGTH = 4, DT = INTEGER, BUS = PPC440MC7, RANGE = (2,4,8), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 5)
PARAMETER C_PPC440MC7_PIPE_STAGES = 1, DT = INTEGER, BUS = PPC440MC7, RANGE = (0:2), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 5)
PARAMETER C_VFBC7_CMD_FIFO_DEPTH = 32, DT = INTEGER, BUS = VFBC7, RANGE = (32,64,128,256,512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 6)
PARAMETER C_VFBC7_CMD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC7, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 6)
PARAMETER C_VFBC7_RDWD_DATA_WIDTH = 32, DT = INTEGER, BUS = VFBC7, RANGE = (8,16,32,64), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 6)
PARAMETER C_VFBC7_RDWD_FIFO_DEPTH = 1024, DT = INTEGER, BUS = VFBC7, RANGE = (512,1024,2048,4096,8192), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 6)
PARAMETER C_VFBC7_RD_AEMPTY_WD_AFULL_COUNT = 3, DT = INTEGER, BUS = VFBC7, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 6)
PARAMETER C_PI7_RD_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Wr-Only ), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI7_WR_FIFO_TYPE = BRAM, DT = STRING, VALUES = ( BRAM = BRAM ,  SRL = SRL ,  DISABLED = Rd-Only ), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && !C_USE_MCB_S6_PHY), IPLEVEL_DRC_PROC = iplevel_drc_wr_fifo
PARAMETER C_PI7_ADDRACK_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && !C_USE_MCB_S6_PHY)
PARAMETER C_PI7_RD_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && ![xstrncmp C_PI7_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI7_RD_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && ![xstrncmp C_PI7_RD_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI7_WR_FIFO_APP_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && ![xstrncmp C_PI7_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI7_WR_FIFO_MEM_PIPELINE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && ![xstrncmp C_PI7_WR_FIFO_TYPE DISABLED] && !C_USE_MCB_S6_PHY)
PARAMETER C_PI7_PM_USED = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_PI7_PM_DC_CNTR = 1, DT = INTEGER, RANGE = (0,1), ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE != 0 && C_PM_ENABLE)
PARAMETER C_WR_TRAINING_PORT = 0, DT = INTEGER, ISVALID = (C_USE_MIG_V4_PHY || C_USE_MIG_V5_PHY), RANGE = (0:7), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_training_port, SYSLEVEL_DRC_PROC = syslevel_drc_training_port
PARAMETER C_ARB_BRAM_INIT_00 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111010001000011000000001111111111110010000110100000000011111111111100001101000100000000111111111111011010001000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_bram_init
PARAMETER C_ARB_BRAM_INIT_01 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_bram_init
PARAMETER C_ARB_BRAM_INIT_02 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111011010001000000000001111111111110110100010000000000011111111111101101000100000000000111111111111011010001000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_ARB_BRAM_INIT_03 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_ARB_BRAM_INIT_04 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111010001000011000000001111111111110010000110100000000011111111111100001101000100000000111111111111011010001000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_ARB_BRAM_INIT_05 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_ARB_BRAM_INIT_06 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111011010001000000000001111111111110110100010000000000011111111111101101000100000000000111111111111011010001000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_ARB_BRAM_INIT_07 = 0b0000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111000000001111111111111111111111110000000011111111111111111111111100000000111111111111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_NCK_PER_CLK = 1, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_TWR = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_COMPLETE_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_IS_WRITE_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_PHYIF_RAS_N_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_PHYIF_CAS_N_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_PHYIF_WE_N_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_RMW_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_SKIP_0_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_PHYIF_DQS_O_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_SKIP_1_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DP_RDFIFO_PUSH_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_SKIP_2_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_COL_CNT_LOAD_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_COL_CNT_ENABLE_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_PRECHARGE_ADDR10_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_ROW_COL_SEL_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_PHYIF_FORCE_DM_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_REPEAT4_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_RAS_N_0_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_CAS_N_0_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_WE_N_0_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_RAS_N_1_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_CAS_N_1_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_WE_N_1_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DP_WRFIFO_POP_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_WRDATA_EN_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DFI_RDDATA_EN_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_OTF_ADDR12_INDEX = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_ARB_RDMODWR_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_COL_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_PI_ADDR_CE_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_PORT_SELECT_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_AP_PIPELINE1_CE_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DP_LOAD_RDWDADDR_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DP_RDFIFO_WHICHPORT_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DP_SIZE_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_DP_WRFIFO_WHICHPORT_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_PHYIF_DUMMYREADSTART_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q0_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q1_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q2_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q3_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q4_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q5_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q6_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q7_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q8_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q9_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q10_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q11_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q12_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q13_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q14_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q15_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q16_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q17_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q18_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q19_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q20_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q21_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q22_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q23_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q24_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q25_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q26_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q27_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q28_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q29_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q30_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q31_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q32_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q33_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q34_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_Q35_DELAY = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_SKIP_1_VALUE = 15, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_SKIP_2_VALUE = 15, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_SKIP_3_VALUE = 15, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_SKIP_4_VALUE = 20, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_SKIP_5_VALUE = 36, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_SKIP_6_VALUE = 20, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_SKIP_7_VALUE = 36, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_B16_REPEAT_CNT = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_B32_REPEAT_CNT = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_B64_REPEAT_CNT = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_ZQCS_REPEAT_CNT = 0, DT = INTEGER, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL0 = 0x000, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL0 = 0x00d, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL1 = 0x00e, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL1 = 0x017, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL2 = 0x018, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL2 = 0x025, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL3 = 0x026, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL3 = 0x02f, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL4 = 0x030, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL4 = 0x03d, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL5 = 0x03e, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL5 = 0x047, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL6 = 0x048, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL6 = 0x05b, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL7 = 0x05c, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL7 = 0x06a, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL8 = 0x06b, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL8 = 0x086, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL9 = 0x087, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL9 = 0x09d, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL10 = 0x09e, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL10 = 0x0a5, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL11 = 0x0a6, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL11 = 0x0ad, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL12 = 0x0ae, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL12 = 0x0b5, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL13 = 0x0b6, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL13 = 0x0bd, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL14 = 0x0be, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL14 = 0x0d0, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL15 = 0x0d1, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_HIGHADDR_CTRL15 = 0x0d8, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_BASEADDR_CTRL16 = 0x0d9, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter, ISVALID = (C_USE_MIG_V6_PHY && [xstrncmp C_MEM_TYPE  DDR3 ])
PARAMETER C_HIGHADDR_CTRL16 = 0x0da, ADDRESSS = NONE, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter, ISVALID = (C_USE_MIG_V6_PHY && [xstrncmp C_MEM_TYPE  DDR3 ])
PARAMETER C_CTRL_BRAM_INIT_3F = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_3E = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_3D = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_3C = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_3B = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_3A = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_39 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_38 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_37 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_36 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_35 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_34 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_33 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_32 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_31 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_30 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_2F = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_2E = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_2D = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_2C = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_2B = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_2A = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_29 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_28 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_27 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_26 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_25 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_24 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_23 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_22 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_21 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_20 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_1F = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_1E = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_1D = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_1C = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_1B = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_1A = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_19 = 0x000002FC000002FC000002FC000002FC000002FD000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_18 = 0x000002FC000002FC000002FC000002FC000002FC000002F0000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_17 = 0x000002FC000042E8000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_16 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_15 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_14 = 0x000002FC000002FC000002FC000002FC000002FC000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_13 = 0x000002FC000002FC000002FC000002FC000002FC000042E8000006FC000026F5, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_12 = 0x000006FC000026F4000006FC000026F4000006FC000026F4000006FC000026F4, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_11 = 0x000006FC000026F4000006FC000026F4000006FC000016F4000082FC000082FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_10 = 0x000082F8000002FC000002FC000002FC000042E8000002FC000002FD000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_0F = 0x000002FC000002FC0000093C000029240000093C000029240000093C00002924, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_0E = 0x0000093C000029240000093C000029240000093C000029240000093C00002924, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_0D = 0x0000093C000019240000803C000082FC000082F8000002FC000002FC000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_0C = 0x000042E8000006FC000026F5000006FC000026F4000006FC000026F4000006FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_0B = 0x000016F4000082FC000082FC000082F8000002FC000002FC000002FC000042E8, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_0A = 0x000002FC000002FD000002FC000002FC000002FC0000093C000029240000093C, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_09 = 0x000029240000093C000029240000093C000019240000803C000082FC000082F8, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_08 = 0x000002FC000002FC000002FC000042E8000002FC000006FD000016F4000082FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_07 = 0x000082FC000082F8000002FC000002FC000002FC000042E8000002FC000002FD, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_06 = 0x000002FC000002FC000002FC0000093C000019240000803C000082FC000082F8, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_05 = 0x000002FC000002FC000002FC000042E8000002FC000002FD000016F4000082FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_04 = 0x000082FC000082F8000002FC000002FC000002FC000042E8000002FC000002FD, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_03 = 0x000002FC000002FC000002FC0000013C000019240000803C000082FC000082F8, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_02 = 0x000002FC000002FC000002FC000042E8000002FC000002FD000016F4000082FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_01 = 0x000082FC000082F8000002FC000002FC000002FC000042E8000002FC000002FD, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INIT_00 = 0x000002FC000002FC000002FC0000013C000019240000803C000082FC000082F8, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_SRVAL = 0x0000002FC, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_07 = 0x0000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_06 = 0x0000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_05 = 0x0000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_04 = 0x0000000000000000000000000000000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_03 = 0x0000000000000000000000000000000000000000000000001111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_02 = 0x1110000000000000000000000000000000011111111111111111111111111111, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_01 = 0x1110000000000000000011111111111111111111111111000000000111111011, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter
PARAMETER C_CTRL_BRAM_INITP_00 = 0x1111111111110001111110111111111111111001111110111111111111111001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ctrl_parameter

## Ports
PORT FSL0_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL0, SIGIS = CLK, INITIALVAL = VCC
PORT FSL0_M_Write = FSL_M_Write, DIR = I, BUS = XCL0
PORT FSL0_M_Data = FSL_M_Data, DIR = I, BUS = XCL0, VEC = [0:31]
PORT FSL0_M_Control = FSL_M_Control, DIR = I, BUS = XCL0
PORT FSL0_M_Full = FSL_M_Full, DIR = O, BUS = XCL0
PORT FSL0_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL0
PORT FSL0_S_Read = FSL_S_Read, DIR = I, BUS = XCL0
PORT FSL0_S_Data = FSL_S_Data, DIR = O, BUS = XCL0, VEC = [0:31]
PORT FSL0_S_Control = FSL_S_Control, DIR = O, BUS = XCL0
PORT FSL0_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL0
PORT FSL0_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL0_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL0_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL0_B
PORT FSL0_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL0_B, VEC = [0:31]
PORT FSL0_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL0_B
PORT FSL0_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL0_B
PORT FSL0_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL0_B
PORT FSL0_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL0_B
PORT FSL0_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL0_B, VEC = [0:31]
PORT FSL0_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL0_B
PORT FSL0_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL0_B
PORT SPLB0_Clk = "", DIR = I, BUS = SPLB0, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB0_Rst = SPLB_Rst, DIR = I, BUS = SPLB0, SIGIS = RST
PORT SPLB0_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB0, VEC = [0:31]
PORT SPLB0_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB0, VEC = [0:(C_SPLB0_MID_WIDTH-1)]
PORT SPLB0_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_BE = PLB_BE, DIR = I, BUS = SPLB0, VEC = [0:((C_SPLB0_DWIDTH/8)-1)]
PORT SPLB0_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB0, VEC = [0:31]
PORT SPLB0_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_abort = PLB_abort, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB0, VEC = [0:1]
PORT SPLB0_PLB_size = PLB_size, DIR = I, BUS = SPLB0, VEC = [0:3]
PORT SPLB0_PLB_type = PLB_type, DIR = I, BUS = SPLB0, VEC = [0:2]
PORT SPLB0_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB0, VEC = [0:1]
PORT SPLB0_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB0, VEC = [0:1]
PORT SPLB0_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB0, VEC = [0:1]
PORT SPLB0_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB0, VEC = [0:15]
PORT SPLB0_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB0
PORT SPLB0_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB0, VEC = [0:(C_SPLB0_DWIDTH-1)]
PORT SPLB0_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB0, VEC = [0:1]
PORT SPLB0_Sl_wait = Sl_wait, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB0, VEC = [0:(C_SPLB0_DWIDTH-1)]
PORT SPLB0_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB0, VEC = [0:3]
PORT SPLB0_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB0
PORT SPLB0_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB0, VEC = [0:(C_SPLB0_NUM_MASTERS-1)]
PORT SPLB0_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB0, VEC = [0:(C_SPLB0_NUM_MASTERS-1)]
PORT SPLB0_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB0, VEC = [0:(C_SPLB0_NUM_MASTERS-1)]
PORT SPLB0_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB0, VEC = [0:(C_SPLB0_NUM_MASTERS-1)]
PORT SDMA0_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA0_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 3)
PORT SDMA0_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 0 && C_PIM0_BASETYPE == 3)
PORT SDMA0_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL0
PORT SDMA0_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL0, VEC = [0:31]
PORT SDMA0_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL0, VEC = [0:3]
PORT SDMA0_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL0
PORT SDMA0_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL0
PORT SDMA0_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL0
PORT SDMA0_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL0
PORT SDMA0_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL0
PORT SDMA0_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL0, INITIALVAL = VCC
PORT SDMA0_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL0, INITIALVAL = GND, VEC = [0:31]
PORT SDMA0_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL0, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA0_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL0, INITIALVAL = VCC
PORT SDMA0_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL0, INITIALVAL = VCC
PORT SDMA0_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL0, INITIALVAL = VCC
PORT SDMA0_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL0, INITIALVAL = VCC
PORT SDMA0_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL0, INITIALVAL = VCC
PORT SDMA0_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL0
PORT SDMA_CTRL0_Clk = "", DIR = I, BUS = SDMA_CTRL0, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL0_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL0, SIGIS = RST
PORT SDMA_CTRL0_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL0, VEC = [0:31]
PORT SDMA_CTRL0_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL0, VEC = [0:(C_SDMA_CTRL0_MID_WIDTH-1)]
PORT SDMA_CTRL0_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL0, VEC = [0:((C_SDMA_CTRL0_DWIDTH/8)-1)]
PORT SDMA_CTRL0_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL0, VEC = [0:31]
PORT SDMA_CTRL0_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL0, VEC = [0:1]
PORT SDMA_CTRL0_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL0, VEC = [0:3]
PORT SDMA_CTRL0_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL0, VEC = [0:2]
PORT SDMA_CTRL0_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL0, VEC = [0:1]
PORT SDMA_CTRL0_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL0, VEC = [0:1]
PORT SDMA_CTRL0_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL0, VEC = [0:1]
PORT SDMA_CTRL0_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL0, VEC = [0:15]
PORT SDMA_CTRL0_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL0, VEC = [0:(C_SDMA_CTRL0_DWIDTH-1)]
PORT SDMA_CTRL0_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL0, VEC = [0:1]
PORT SDMA_CTRL0_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL0, VEC = [0:(C_SDMA_CTRL0_DWIDTH-1)]
PORT SDMA_CTRL0_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL0, VEC = [0:3]
PORT SDMA_CTRL0_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL0
PORT SDMA_CTRL0_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL0, VEC = [0:(C_SDMA_CTRL0_NUM_MASTERS-1)]
PORT SDMA_CTRL0_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL0, VEC = [0:(C_SDMA_CTRL0_NUM_MASTERS-1)]
PORT SDMA_CTRL0_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL0, VEC = [0:(C_SDMA_CTRL0_NUM_MASTERS-1)]
PORT SDMA_CTRL0_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL0, VEC = [0:(C_SDMA_CTRL0_NUM_MASTERS-1)]
PORT PIM0_Addr = Addr, DIR = I, BUS = MPMC_PIM0, VEC = [31:0]
PORT PIM0_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM0
PORT PIM0_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM0
PORT PIM0_RNW = RNW, DIR = I, BUS = MPMC_PIM0
PORT PIM0_Size = Size, DIR = I, BUS = MPMC_PIM0, VEC = [3:0]
PORT PIM0_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM0
PORT PIM0_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM0, VEC = [(C_PIM0_DATA_WIDTH-1):0]
PORT PIM0_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM0, VEC = [(C_PIM0_DATA_WIDTH/8-1):0]
PORT PIM0_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM0
PORT PIM0_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM0, VEC = [(C_PIM0_DATA_WIDTH-1):0]
PORT PIM0_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM0
PORT PIM0_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM0, VEC = [3:0]
PORT PIM0_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM0
PORT PIM0_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM0
PORT PIM0_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM0
PORT PIM0_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM0
PORT PIM0_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM0
PORT PIM0_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM0, VEC = [1:0]
PORT PIM0_InitDone = InitDone, DIR = O, BUS = MPMC_PIM0
PORT PPC440MC0_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC0
PORT PPC440MC0_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC0, VEC = [0:35]
PORT PPC440MC0_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC0
PORT PPC440MC0_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC0, VEC = [0:127]
PORT PPC440MC0_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC0
PORT PPC440MC0_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC0, VEC = [0:15]
PORT PPC440MC0_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC0
PORT PPC440MC0_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC0
PORT PPC440MC0_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC0, VEC = [0:127]
PORT PPC440MC0_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC0
PORT PPC440MC0_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC0
PORT PPC440MC0_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC0
PORT VFBC0_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC0
PORT VFBC0_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC0
PORT VFBC0_Cmd_Data = cmd_data, DIR = I, BUS = VFBC0, VEC = [31:0]
PORT VFBC0_Cmd_Write = cmd_write, DIR = I, BUS = VFBC0
PORT VFBC0_Cmd_End = cmd_end, DIR = I, BUS = VFBC0
PORT VFBC0_Cmd_Full = cmd_full, DIR = O, BUS = VFBC0
PORT VFBC0_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC0
PORT VFBC0_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC0
PORT VFBC0_Wd_Clk = wd_clk, DIR = I, BUS = VFBC0
PORT VFBC0_Wd_Reset = wd_reset, DIR = I, BUS = VFBC0
PORT VFBC0_Wd_Write = wd_write, DIR = I, BUS = VFBC0
PORT VFBC0_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC0
PORT VFBC0_Wd_Flush = wd_flush, DIR = I, BUS = VFBC0
PORT VFBC0_Wd_Data = wd_data, DIR = I, BUS = VFBC0, VEC = [C_VFBC0_RDWD_DATA_WIDTH-1:0]
PORT VFBC0_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC0, VEC = [C_VFBC0_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC0_Wd_Full = wd_full, DIR = O, BUS = VFBC0
PORT VFBC0_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC0
PORT VFBC0_Rd_Clk = rd_clk, DIR = I, BUS = VFBC0
PORT VFBC0_Rd_Reset = rd_reset, DIR = I, BUS = VFBC0
PORT VFBC0_Rd_Read = rd_read, DIR = I, BUS = VFBC0
PORT VFBC0_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC0
PORT VFBC0_Rd_Flush = rd_flush, DIR = I, BUS = VFBC0
PORT VFBC0_Rd_Data = rd_data, DIR = O, BUS = VFBC0, VEC = [C_VFBC0_RDWD_DATA_WIDTH-1:0]
PORT VFBC0_Rd_Empty = rd_empty, DIR = O, BUS = VFBC0
PORT VFBC0_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC0
PORT MCB0_cmd_clk = cmd_clk, DIR = I, BUS = MCB0
PORT MCB0_cmd_en = cmd_en, DIR = I, BUS = MCB0
PORT MCB0_cmd_instr = cmd_instr, DIR = I, BUS = MCB0, VEC = [2:0]
PORT MCB0_cmd_bl = cmd_bl, DIR = I, BUS = MCB0, VEC = [5:0]
PORT MCB0_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB0, VEC = [29:0]
PORT MCB0_cmd_empty = cmd_empty, DIR = O, BUS = MCB0
PORT MCB0_cmd_full = cmd_full, DIR = O, BUS = MCB0
PORT MCB0_wr_clk = wr_clk, DIR = I, BUS = MCB0
PORT MCB0_wr_en = wr_en, DIR = I, BUS = MCB0
PORT MCB0_wr_mask = wr_mask, DIR = I, BUS = MCB0, VEC = [C_PIM0_DATA_WIDTH/8-1:0]
PORT MCB0_wr_data = wr_data, DIR = I, BUS = MCB0, VEC = [C_PIM0_DATA_WIDTH-1:0]
PORT MCB0_wr_full = wr_full, DIR = O, BUS = MCB0
PORT MCB0_wr_empty = wr_empty, DIR = O, BUS = MCB0
PORT MCB0_wr_count = wr_count, DIR = O, BUS = MCB0, VEC = [6:0]
PORT MCB0_wr_underrun = wr_underrun, DIR = O, BUS = MCB0
PORT MCB0_wr_error = wr_error, DIR = O, BUS = MCB0
PORT MCB0_rd_clk = rd_clk, DIR = I, BUS = MCB0
PORT MCB0_rd_en = rd_en, DIR = I, BUS = MCB0
PORT MCB0_rd_data = rd_data, DIR = O, BUS = MCB0, VEC = [C_PIM0_DATA_WIDTH-1:0]
PORT MCB0_rd_full = rd_full, DIR = O, BUS = MCB0
PORT MCB0_rd_empty = rd_empty, DIR = O, BUS = MCB0
PORT MCB0_rd_count = rd_count, DIR = O, BUS = MCB0, VEC = [6:0]
PORT MCB0_rd_overflow = rd_overflow, DIR = O, BUS = MCB0
PORT MCB0_rd_error = rd_error, DIR = O, BUS = MCB0
PORT FSL1_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL1, SIGIS = CLK, INITIALVAL = VCC
PORT FSL1_M_Write = FSL_M_Write, DIR = I, BUS = XCL1
PORT FSL1_M_Data = FSL_M_Data, DIR = I, BUS = XCL1, VEC = [0:31]
PORT FSL1_M_Control = FSL_M_Control, DIR = I, BUS = XCL1
PORT FSL1_M_Full = FSL_M_Full, DIR = O, BUS = XCL1
PORT FSL1_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL1
PORT FSL1_S_Read = FSL_S_Read, DIR = I, BUS = XCL1
PORT FSL1_S_Data = FSL_S_Data, DIR = O, BUS = XCL1, VEC = [0:31]
PORT FSL1_S_Control = FSL_S_Control, DIR = O, BUS = XCL1
PORT FSL1_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL1
PORT FSL1_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL1_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL1_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL1_B
PORT FSL1_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL1_B, VEC = [0:31]
PORT FSL1_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL1_B
PORT FSL1_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL1_B
PORT FSL1_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL1_B
PORT FSL1_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL1_B
PORT FSL1_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL1_B, VEC = [0:31]
PORT FSL1_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL1_B
PORT FSL1_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL1_B
PORT SPLB1_Clk = "", DIR = I, BUS = SPLB1, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB1_Rst = SPLB_Rst, DIR = I, BUS = SPLB1, SIGIS = RST
PORT SPLB1_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB1, VEC = [0:31]
PORT SPLB1_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB1, VEC = [0:(C_SPLB1_MID_WIDTH-1)]
PORT SPLB1_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_BE = PLB_BE, DIR = I, BUS = SPLB1, VEC = [0:((C_SPLB1_DWIDTH/8)-1)]
PORT SPLB1_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB1, VEC = [0:31]
PORT SPLB1_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_abort = PLB_abort, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB1, VEC = [0:1]
PORT SPLB1_PLB_size = PLB_size, DIR = I, BUS = SPLB1, VEC = [0:3]
PORT SPLB1_PLB_type = PLB_type, DIR = I, BUS = SPLB1, VEC = [0:2]
PORT SPLB1_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB1, VEC = [0:1]
PORT SPLB1_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB1, VEC = [0:1]
PORT SPLB1_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB1, VEC = [0:1]
PORT SPLB1_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB1, VEC = [0:15]
PORT SPLB1_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB1
PORT SPLB1_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB1, VEC = [0:(C_SPLB1_DWIDTH-1)]
PORT SPLB1_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB1, VEC = [0:1]
PORT SPLB1_Sl_wait = Sl_wait, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB1, VEC = [0:(C_SPLB1_DWIDTH-1)]
PORT SPLB1_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB1, VEC = [0:3]
PORT SPLB1_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB1
PORT SPLB1_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB1, VEC = [0:(C_SPLB1_NUM_MASTERS-1)]
PORT SPLB1_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB1, VEC = [0:(C_SPLB1_NUM_MASTERS-1)]
PORT SPLB1_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB1, VEC = [0:(C_SPLB1_NUM_MASTERS-1)]
PORT SPLB1_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB1, VEC = [0:(C_SPLB1_NUM_MASTERS-1)]
PORT SDMA1_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA1_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PORT SDMA1_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 1 && C_PIM1_BASETYPE == 3)
PORT SDMA1_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL1
PORT SDMA1_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL1, VEC = [0:31]
PORT SDMA1_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL1, VEC = [0:3]
PORT SDMA1_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL1
PORT SDMA1_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL1
PORT SDMA1_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL1
PORT SDMA1_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL1
PORT SDMA1_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL1
PORT SDMA1_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL1, INITIALVAL = VCC
PORT SDMA1_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL1, INITIALVAL = GND, VEC = [0:31]
PORT SDMA1_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL1, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA1_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL1, INITIALVAL = VCC
PORT SDMA1_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL1, INITIALVAL = VCC
PORT SDMA1_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL1, INITIALVAL = VCC
PORT SDMA1_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL1, INITIALVAL = VCC
PORT SDMA1_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL1, INITIALVAL = VCC
PORT SDMA1_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL1
PORT SDMA_CTRL1_Clk = "", DIR = I, BUS = SDMA_CTRL1, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL1_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL1, SIGIS = RST
PORT SDMA_CTRL1_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL1, VEC = [0:31]
PORT SDMA_CTRL1_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL1, VEC = [0:(C_SDMA_CTRL1_MID_WIDTH-1)]
PORT SDMA_CTRL1_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL1, VEC = [0:((C_SDMA_CTRL1_DWIDTH/8)-1)]
PORT SDMA_CTRL1_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL1, VEC = [0:31]
PORT SDMA_CTRL1_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL1, VEC = [0:1]
PORT SDMA_CTRL1_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL1, VEC = [0:3]
PORT SDMA_CTRL1_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL1, VEC = [0:2]
PORT SDMA_CTRL1_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL1, VEC = [0:1]
PORT SDMA_CTRL1_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL1, VEC = [0:1]
PORT SDMA_CTRL1_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL1, VEC = [0:1]
PORT SDMA_CTRL1_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL1, VEC = [0:15]
PORT SDMA_CTRL1_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL1, VEC = [0:(C_SDMA_CTRL1_DWIDTH-1)]
PORT SDMA_CTRL1_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL1, VEC = [0:1]
PORT SDMA_CTRL1_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL1, VEC = [0:(C_SDMA_CTRL1_DWIDTH-1)]
PORT SDMA_CTRL1_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL1, VEC = [0:3]
PORT SDMA_CTRL1_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL1
PORT SDMA_CTRL1_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL1, VEC = [0:(C_SDMA_CTRL1_NUM_MASTERS-1)]
PORT SDMA_CTRL1_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL1, VEC = [0:(C_SDMA_CTRL1_NUM_MASTERS-1)]
PORT SDMA_CTRL1_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL1, VEC = [0:(C_SDMA_CTRL1_NUM_MASTERS-1)]
PORT SDMA_CTRL1_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL1, VEC = [0:(C_SDMA_CTRL1_NUM_MASTERS-1)]
PORT PIM1_Addr = Addr, DIR = I, BUS = MPMC_PIM1, VEC = [31:0]
PORT PIM1_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM1
PORT PIM1_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM1
PORT PIM1_RNW = RNW, DIR = I, BUS = MPMC_PIM1
PORT PIM1_Size = Size, DIR = I, BUS = MPMC_PIM1, VEC = [3:0]
PORT PIM1_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM1
PORT PIM1_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM1, VEC = [(C_PIM1_DATA_WIDTH-1):0]
PORT PIM1_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM1, VEC = [(C_PIM1_DATA_WIDTH/8-1):0]
PORT PIM1_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM1
PORT PIM1_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM1, VEC = [(C_PIM1_DATA_WIDTH-1):0]
PORT PIM1_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM1
PORT PIM1_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM1, VEC = [3:0]
PORT PIM1_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM1
PORT PIM1_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM1
PORT PIM1_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM1
PORT PIM1_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM1
PORT PIM1_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM1
PORT PIM1_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM1, VEC = [1:0]
PORT PIM1_InitDone = InitDone, DIR = O, BUS = MPMC_PIM1
PORT PPC440MC1_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC1
PORT PPC440MC1_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC1, VEC = [0:35]
PORT PPC440MC1_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC1
PORT PPC440MC1_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC1, VEC = [0:127]
PORT PPC440MC1_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC1
PORT PPC440MC1_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC1, VEC = [0:15]
PORT PPC440MC1_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC1
PORT PPC440MC1_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC1
PORT PPC440MC1_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC1, VEC = [0:127]
PORT PPC440MC1_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC1
PORT PPC440MC1_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC1
PORT PPC440MC1_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC1
PORT VFBC1_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC1
PORT VFBC1_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC1
PORT VFBC1_Cmd_Data = cmd_data, DIR = I, BUS = VFBC1, VEC = [31:0]
PORT VFBC1_Cmd_Write = cmd_write, DIR = I, BUS = VFBC1
PORT VFBC1_Cmd_End = cmd_end, DIR = I, BUS = VFBC1
PORT VFBC1_Cmd_Full = cmd_full, DIR = O, BUS = VFBC1
PORT VFBC1_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC1
PORT VFBC1_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC1
PORT VFBC1_Wd_Clk = wd_clk, DIR = I, BUS = VFBC1
PORT VFBC1_Wd_Reset = wd_reset, DIR = I, BUS = VFBC1
PORT VFBC1_Wd_Write = wd_write, DIR = I, BUS = VFBC1
PORT VFBC1_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC1
PORT VFBC1_Wd_Flush = wd_flush, DIR = I, BUS = VFBC1
PORT VFBC1_Wd_Data = wd_data, DIR = I, BUS = VFBC1, VEC = [C_VFBC1_RDWD_DATA_WIDTH-1:0]
PORT VFBC1_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC1, VEC = [C_VFBC1_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC1_Wd_Full = wd_full, DIR = O, BUS = VFBC1
PORT VFBC1_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC1
PORT VFBC1_Rd_Clk = rd_clk, DIR = I, BUS = VFBC1
PORT VFBC1_Rd_Reset = rd_reset, DIR = I, BUS = VFBC1
PORT VFBC1_Rd_Read = rd_read, DIR = I, BUS = VFBC1
PORT VFBC1_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC1
PORT VFBC1_Rd_Flush = rd_flush, DIR = I, BUS = VFBC1
PORT VFBC1_Rd_Data = rd_data, DIR = O, BUS = VFBC1, VEC = [C_VFBC1_RDWD_DATA_WIDTH-1:0]
PORT VFBC1_Rd_Empty = rd_empty, DIR = O, BUS = VFBC1
PORT VFBC1_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC1
PORT MCB1_cmd_clk = cmd_clk, DIR = I, BUS = MCB1
PORT MCB1_cmd_en = cmd_en, DIR = I, BUS = MCB1
PORT MCB1_cmd_instr = cmd_instr, DIR = I, BUS = MCB1, VEC = [2:0]
PORT MCB1_cmd_bl = cmd_bl, DIR = I, BUS = MCB1, VEC = [5:0]
PORT MCB1_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB1, VEC = [29:0]
PORT MCB1_cmd_empty = cmd_empty, DIR = O, BUS = MCB1
PORT MCB1_cmd_full = cmd_full, DIR = O, BUS = MCB1
PORT MCB1_wr_clk = wr_clk, DIR = I, BUS = MCB1
PORT MCB1_wr_en = wr_en, DIR = I, BUS = MCB1
PORT MCB1_wr_mask = wr_mask, DIR = I, BUS = MCB1, VEC = [C_PIM1_DATA_WIDTH/8-1:0]
PORT MCB1_wr_data = wr_data, DIR = I, BUS = MCB1, VEC = [C_PIM1_DATA_WIDTH-1:0]
PORT MCB1_wr_full = wr_full, DIR = O, BUS = MCB1
PORT MCB1_wr_empty = wr_empty, DIR = O, BUS = MCB1
PORT MCB1_wr_count = wr_count, DIR = O, BUS = MCB1, VEC = [6:0]
PORT MCB1_wr_underrun = wr_underrun, DIR = O, BUS = MCB1
PORT MCB1_wr_error = wr_error, DIR = O, BUS = MCB1
PORT MCB1_rd_clk = rd_clk, DIR = I, BUS = MCB1
PORT MCB1_rd_en = rd_en, DIR = I, BUS = MCB1
PORT MCB1_rd_data = rd_data, DIR = O, BUS = MCB1, VEC = [C_PIM1_DATA_WIDTH-1:0]
PORT MCB1_rd_full = rd_full, DIR = O, BUS = MCB1
PORT MCB1_rd_empty = rd_empty, DIR = O, BUS = MCB1
PORT MCB1_rd_count = rd_count, DIR = O, BUS = MCB1, VEC = [6:0]
PORT MCB1_rd_overflow = rd_overflow, DIR = O, BUS = MCB1
PORT MCB1_rd_error = rd_error, DIR = O, BUS = MCB1
PORT FSL2_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL2, SIGIS = CLK, INITIALVAL = VCC
PORT FSL2_M_Write = FSL_M_Write, DIR = I, BUS = XCL2
PORT FSL2_M_Data = FSL_M_Data, DIR = I, BUS = XCL2, VEC = [0:31]
PORT FSL2_M_Control = FSL_M_Control, DIR = I, BUS = XCL2
PORT FSL2_M_Full = FSL_M_Full, DIR = O, BUS = XCL2
PORT FSL2_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL2
PORT FSL2_S_Read = FSL_S_Read, DIR = I, BUS = XCL2
PORT FSL2_S_Data = FSL_S_Data, DIR = O, BUS = XCL2, VEC = [0:31]
PORT FSL2_S_Control = FSL_S_Control, DIR = O, BUS = XCL2
PORT FSL2_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL2
PORT FSL2_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL2_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL2_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL2_B
PORT FSL2_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL2_B, VEC = [0:31]
PORT FSL2_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL2_B
PORT FSL2_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL2_B
PORT FSL2_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL2_B
PORT FSL2_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL2_B
PORT FSL2_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL2_B, VEC = [0:31]
PORT FSL2_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL2_B
PORT FSL2_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL2_B
PORT SPLB2_Clk = "", DIR = I, BUS = SPLB2, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB2_Rst = SPLB_Rst, DIR = I, BUS = SPLB2, SIGIS = RST
PORT SPLB2_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB2, VEC = [0:31]
PORT SPLB2_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB2, VEC = [0:(C_SPLB2_MID_WIDTH-1)]
PORT SPLB2_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_BE = PLB_BE, DIR = I, BUS = SPLB2, VEC = [0:((C_SPLB2_DWIDTH/8)-1)]
PORT SPLB2_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB2, VEC = [0:31]
PORT SPLB2_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_abort = PLB_abort, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB2, VEC = [0:1]
PORT SPLB2_PLB_size = PLB_size, DIR = I, BUS = SPLB2, VEC = [0:3]
PORT SPLB2_PLB_type = PLB_type, DIR = I, BUS = SPLB2, VEC = [0:2]
PORT SPLB2_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB2, VEC = [0:1]
PORT SPLB2_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB2, VEC = [0:1]
PORT SPLB2_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB2, VEC = [0:1]
PORT SPLB2_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB2, VEC = [0:15]
PORT SPLB2_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB2
PORT SPLB2_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB2, VEC = [0:(C_SPLB2_DWIDTH-1)]
PORT SPLB2_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB2, VEC = [0:1]
PORT SPLB2_Sl_wait = Sl_wait, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB2, VEC = [0:(C_SPLB2_DWIDTH-1)]
PORT SPLB2_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB2, VEC = [0:3]
PORT SPLB2_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB2
PORT SPLB2_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB2, VEC = [0:(C_SPLB2_NUM_MASTERS-1)]
PORT SPLB2_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB2, VEC = [0:(C_SPLB2_NUM_MASTERS-1)]
PORT SPLB2_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB2, VEC = [0:(C_SPLB2_NUM_MASTERS-1)]
PORT SPLB2_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB2, VEC = [0:(C_SPLB2_NUM_MASTERS-1)]
PORT SDMA2_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA2_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PORT SDMA2_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 2 && C_PIM2_BASETYPE == 3)
PORT SDMA2_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL2
PORT SDMA2_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL2, VEC = [0:31]
PORT SDMA2_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL2, VEC = [0:3]
PORT SDMA2_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL2
PORT SDMA2_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL2
PORT SDMA2_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL2
PORT SDMA2_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL2
PORT SDMA2_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL2
PORT SDMA2_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL2, INITIALVAL = VCC
PORT SDMA2_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL2, INITIALVAL = GND, VEC = [0:31]
PORT SDMA2_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL2, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA2_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL2, INITIALVAL = VCC
PORT SDMA2_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL2, INITIALVAL = VCC
PORT SDMA2_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL2, INITIALVAL = VCC
PORT SDMA2_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL2, INITIALVAL = VCC
PORT SDMA2_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL2, INITIALVAL = VCC
PORT SDMA2_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL2
PORT SDMA_CTRL2_Clk = "", DIR = I, BUS = SDMA_CTRL2, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL2_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL2, SIGIS = RST
PORT SDMA_CTRL2_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL2, VEC = [0:31]
PORT SDMA_CTRL2_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL2, VEC = [0:(C_SDMA_CTRL2_MID_WIDTH-1)]
PORT SDMA_CTRL2_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL2, VEC = [0:((C_SDMA_CTRL2_DWIDTH/8)-1)]
PORT SDMA_CTRL2_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL2, VEC = [0:31]
PORT SDMA_CTRL2_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL2, VEC = [0:1]
PORT SDMA_CTRL2_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL2, VEC = [0:3]
PORT SDMA_CTRL2_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL2, VEC = [0:2]
PORT SDMA_CTRL2_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL2, VEC = [0:1]
PORT SDMA_CTRL2_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL2, VEC = [0:1]
PORT SDMA_CTRL2_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL2, VEC = [0:1]
PORT SDMA_CTRL2_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL2, VEC = [0:15]
PORT SDMA_CTRL2_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL2, VEC = [0:(C_SDMA_CTRL2_DWIDTH-1)]
PORT SDMA_CTRL2_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL2, VEC = [0:1]
PORT SDMA_CTRL2_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL2, VEC = [0:(C_SDMA_CTRL2_DWIDTH-1)]
PORT SDMA_CTRL2_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL2, VEC = [0:3]
PORT SDMA_CTRL2_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL2
PORT SDMA_CTRL2_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL2, VEC = [0:(C_SDMA_CTRL2_NUM_MASTERS-1)]
PORT SDMA_CTRL2_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL2, VEC = [0:(C_SDMA_CTRL2_NUM_MASTERS-1)]
PORT SDMA_CTRL2_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL2, VEC = [0:(C_SDMA_CTRL2_NUM_MASTERS-1)]
PORT SDMA_CTRL2_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL2, VEC = [0:(C_SDMA_CTRL2_NUM_MASTERS-1)]
PORT PIM2_Addr = Addr, DIR = I, BUS = MPMC_PIM2, VEC = [31:0]
PORT PIM2_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM2
PORT PIM2_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM2
PORT PIM2_RNW = RNW, DIR = I, BUS = MPMC_PIM2
PORT PIM2_Size = Size, DIR = I, BUS = MPMC_PIM2, VEC = [3:0]
PORT PIM2_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM2
PORT PIM2_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM2, VEC = [(C_PIM2_DATA_WIDTH-1):0]
PORT PIM2_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM2, VEC = [(C_PIM2_DATA_WIDTH/8-1):0]
PORT PIM2_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM2
PORT PIM2_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM2, VEC = [(C_PIM2_DATA_WIDTH-1):0]
PORT PIM2_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM2
PORT PIM2_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM2, VEC = [3:0]
PORT PIM2_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM2
PORT PIM2_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM2
PORT PIM2_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM2
PORT PIM2_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM2
PORT PIM2_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM2
PORT PIM2_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM2, VEC = [1:0]
PORT PIM2_InitDone = InitDone, DIR = O, BUS = MPMC_PIM2
PORT PPC440MC2_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC2
PORT PPC440MC2_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC2, VEC = [0:35]
PORT PPC440MC2_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC2
PORT PPC440MC2_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC2, VEC = [0:127]
PORT PPC440MC2_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC2
PORT PPC440MC2_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC2, VEC = [0:15]
PORT PPC440MC2_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC2
PORT PPC440MC2_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC2
PORT PPC440MC2_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC2, VEC = [0:127]
PORT PPC440MC2_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC2
PORT PPC440MC2_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC2
PORT PPC440MC2_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC2
PORT VFBC2_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC2
PORT VFBC2_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC2
PORT VFBC2_Cmd_Data = cmd_data, DIR = I, BUS = VFBC2, VEC = [31:0]
PORT VFBC2_Cmd_Write = cmd_write, DIR = I, BUS = VFBC2
PORT VFBC2_Cmd_End = cmd_end, DIR = I, BUS = VFBC2
PORT VFBC2_Cmd_Full = cmd_full, DIR = O, BUS = VFBC2
PORT VFBC2_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC2
PORT VFBC2_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC2
PORT VFBC2_Wd_Clk = wd_clk, DIR = I, BUS = VFBC2
PORT VFBC2_Wd_Reset = wd_reset, DIR = I, BUS = VFBC2
PORT VFBC2_Wd_Write = wd_write, DIR = I, BUS = VFBC2
PORT VFBC2_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC2
PORT VFBC2_Wd_Flush = wd_flush, DIR = I, BUS = VFBC2
PORT VFBC2_Wd_Data = wd_data, DIR = I, BUS = VFBC2, VEC = [C_VFBC2_RDWD_DATA_WIDTH-1:0]
PORT VFBC2_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC2, VEC = [C_VFBC2_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC2_Wd_Full = wd_full, DIR = O, BUS = VFBC2
PORT VFBC2_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC2
PORT VFBC2_Rd_Clk = rd_clk, DIR = I, BUS = VFBC2
PORT VFBC2_Rd_Reset = rd_reset, DIR = I, BUS = VFBC2
PORT VFBC2_Rd_Read = rd_read, DIR = I, BUS = VFBC2
PORT VFBC2_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC2
PORT VFBC2_Rd_Flush = rd_flush, DIR = I, BUS = VFBC2
PORT VFBC2_Rd_Data = rd_data, DIR = O, BUS = VFBC2, VEC = [C_VFBC2_RDWD_DATA_WIDTH-1:0]
PORT VFBC2_Rd_Empty = rd_empty, DIR = O, BUS = VFBC2
PORT VFBC2_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC2
PORT MCB2_cmd_clk = cmd_clk, DIR = I, BUS = MCB2
PORT MCB2_cmd_en = cmd_en, DIR = I, BUS = MCB2
PORT MCB2_cmd_instr = cmd_instr, DIR = I, BUS = MCB2, VEC = [2:0]
PORT MCB2_cmd_bl = cmd_bl, DIR = I, BUS = MCB2, VEC = [5:0]
PORT MCB2_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB2, VEC = [29:0]
PORT MCB2_cmd_empty = cmd_empty, DIR = O, BUS = MCB2
PORT MCB2_cmd_full = cmd_full, DIR = O, BUS = MCB2
PORT MCB2_wr_clk = wr_clk, DIR = I, BUS = MCB2
PORT MCB2_wr_en = wr_en, DIR = I, BUS = MCB2
PORT MCB2_wr_mask = wr_mask, DIR = I, BUS = MCB2, VEC = [C_PIM2_DATA_WIDTH/8-1:0]
PORT MCB2_wr_data = wr_data, DIR = I, BUS = MCB2, VEC = [C_PIM2_DATA_WIDTH-1:0]
PORT MCB2_wr_full = wr_full, DIR = O, BUS = MCB2
PORT MCB2_wr_empty = wr_empty, DIR = O, BUS = MCB2
PORT MCB2_wr_count = wr_count, DIR = O, BUS = MCB2, VEC = [6:0]
PORT MCB2_wr_underrun = wr_underrun, DIR = O, BUS = MCB2
PORT MCB2_wr_error = wr_error, DIR = O, BUS = MCB2
PORT MCB2_rd_clk = rd_clk, DIR = I, BUS = MCB2
PORT MCB2_rd_en = rd_en, DIR = I, BUS = MCB2
PORT MCB2_rd_data = rd_data, DIR = O, BUS = MCB2, VEC = [C_PIM2_DATA_WIDTH-1:0]
PORT MCB2_rd_full = rd_full, DIR = O, BUS = MCB2
PORT MCB2_rd_empty = rd_empty, DIR = O, BUS = MCB2
PORT MCB2_rd_count = rd_count, DIR = O, BUS = MCB2, VEC = [6:0]
PORT MCB2_rd_overflow = rd_overflow, DIR = O, BUS = MCB2
PORT MCB2_rd_error = rd_error, DIR = O, BUS = MCB2
PORT FSL3_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL3, SIGIS = CLK, INITIALVAL = VCC
PORT FSL3_M_Write = FSL_M_Write, DIR = I, BUS = XCL3
PORT FSL3_M_Data = FSL_M_Data, DIR = I, BUS = XCL3, VEC = [0:31]
PORT FSL3_M_Control = FSL_M_Control, DIR = I, BUS = XCL3
PORT FSL3_M_Full = FSL_M_Full, DIR = O, BUS = XCL3
PORT FSL3_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL3
PORT FSL3_S_Read = FSL_S_Read, DIR = I, BUS = XCL3
PORT FSL3_S_Data = FSL_S_Data, DIR = O, BUS = XCL3, VEC = [0:31]
PORT FSL3_S_Control = FSL_S_Control, DIR = O, BUS = XCL3
PORT FSL3_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL3
PORT FSL3_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL3_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL3_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL3_B
PORT FSL3_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL3_B, VEC = [0:31]
PORT FSL3_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL3_B
PORT FSL3_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL3_B
PORT FSL3_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL3_B
PORT FSL3_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL3_B
PORT FSL3_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL3_B, VEC = [0:31]
PORT FSL3_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL3_B
PORT FSL3_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL3_B
PORT SPLB3_Clk = "", DIR = I, BUS = SPLB3, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB3_Rst = SPLB_Rst, DIR = I, BUS = SPLB3, SIGIS = RST
PORT SPLB3_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB3, VEC = [0:31]
PORT SPLB3_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB3, VEC = [0:(C_SPLB3_MID_WIDTH-1)]
PORT SPLB3_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_BE = PLB_BE, DIR = I, BUS = SPLB3, VEC = [0:((C_SPLB3_DWIDTH/8)-1)]
PORT SPLB3_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB3, VEC = [0:31]
PORT SPLB3_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_abort = PLB_abort, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB3, VEC = [0:1]
PORT SPLB3_PLB_size = PLB_size, DIR = I, BUS = SPLB3, VEC = [0:3]
PORT SPLB3_PLB_type = PLB_type, DIR = I, BUS = SPLB3, VEC = [0:2]
PORT SPLB3_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB3, VEC = [0:1]
PORT SPLB3_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB3, VEC = [0:1]
PORT SPLB3_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB3, VEC = [0:1]
PORT SPLB3_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB3, VEC = [0:15]
PORT SPLB3_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB3
PORT SPLB3_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB3, VEC = [0:(C_SPLB3_DWIDTH-1)]
PORT SPLB3_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB3, VEC = [0:1]
PORT SPLB3_Sl_wait = Sl_wait, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB3, VEC = [0:(C_SPLB3_DWIDTH-1)]
PORT SPLB3_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB3, VEC = [0:3]
PORT SPLB3_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB3
PORT SPLB3_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB3, VEC = [0:(C_SPLB3_NUM_MASTERS-1)]
PORT SPLB3_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB3, VEC = [0:(C_SPLB3_NUM_MASTERS-1)]
PORT SPLB3_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB3, VEC = [0:(C_SPLB3_NUM_MASTERS-1)]
PORT SPLB3_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB3, VEC = [0:(C_SPLB3_NUM_MASTERS-1)]
PORT SDMA3_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA3_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PORT SDMA3_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 3 && C_PIM3_BASETYPE == 3)
PORT SDMA3_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL3
PORT SDMA3_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL3, VEC = [0:31]
PORT SDMA3_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL3, VEC = [0:3]
PORT SDMA3_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL3
PORT SDMA3_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL3
PORT SDMA3_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL3
PORT SDMA3_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL3
PORT SDMA3_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL3
PORT SDMA3_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL3, INITIALVAL = VCC
PORT SDMA3_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL3, INITIALVAL = GND, VEC = [0:31]
PORT SDMA3_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL3, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA3_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL3, INITIALVAL = VCC
PORT SDMA3_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL3, INITIALVAL = VCC
PORT SDMA3_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL3, INITIALVAL = VCC
PORT SDMA3_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL3, INITIALVAL = VCC
PORT SDMA3_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL3, INITIALVAL = VCC
PORT SDMA3_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL3
PORT SDMA_CTRL3_Clk = "", DIR = I, BUS = SDMA_CTRL3, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL3_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL3, SIGIS = RST
PORT SDMA_CTRL3_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL3, VEC = [0:31]
PORT SDMA_CTRL3_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL3, VEC = [0:(C_SDMA_CTRL3_MID_WIDTH-1)]
PORT SDMA_CTRL3_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL3, VEC = [0:((C_SDMA_CTRL3_DWIDTH/8)-1)]
PORT SDMA_CTRL3_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL3, VEC = [0:31]
PORT SDMA_CTRL3_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL3, VEC = [0:1]
PORT SDMA_CTRL3_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL3, VEC = [0:3]
PORT SDMA_CTRL3_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL3, VEC = [0:2]
PORT SDMA_CTRL3_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL3, VEC = [0:1]
PORT SDMA_CTRL3_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL3, VEC = [0:1]
PORT SDMA_CTRL3_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL3, VEC = [0:1]
PORT SDMA_CTRL3_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL3, VEC = [0:15]
PORT SDMA_CTRL3_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL3, VEC = [0:(C_SDMA_CTRL3_DWIDTH-1)]
PORT SDMA_CTRL3_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL3, VEC = [0:1]
PORT SDMA_CTRL3_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL3, VEC = [0:(C_SDMA_CTRL3_DWIDTH-1)]
PORT SDMA_CTRL3_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL3, VEC = [0:3]
PORT SDMA_CTRL3_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL3
PORT SDMA_CTRL3_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL3, VEC = [0:(C_SDMA_CTRL3_NUM_MASTERS-1)]
PORT SDMA_CTRL3_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL3, VEC = [0:(C_SDMA_CTRL3_NUM_MASTERS-1)]
PORT SDMA_CTRL3_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL3, VEC = [0:(C_SDMA_CTRL3_NUM_MASTERS-1)]
PORT SDMA_CTRL3_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL3, VEC = [0:(C_SDMA_CTRL3_NUM_MASTERS-1)]
PORT PIM3_Addr = Addr, DIR = I, BUS = MPMC_PIM3, VEC = [31:0]
PORT PIM3_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM3
PORT PIM3_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM3
PORT PIM3_RNW = RNW, DIR = I, BUS = MPMC_PIM3
PORT PIM3_Size = Size, DIR = I, BUS = MPMC_PIM3, VEC = [3:0]
PORT PIM3_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM3
PORT PIM3_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM3, VEC = [(C_PIM3_DATA_WIDTH-1):0]
PORT PIM3_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM3, VEC = [(C_PIM3_DATA_WIDTH/8-1):0]
PORT PIM3_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM3
PORT PIM3_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM3, VEC = [(C_PIM3_DATA_WIDTH-1):0]
PORT PIM3_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM3
PORT PIM3_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM3, VEC = [3:0]
PORT PIM3_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM3
PORT PIM3_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM3
PORT PIM3_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM3
PORT PIM3_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM3
PORT PIM3_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM3
PORT PIM3_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM3, VEC = [1:0]
PORT PIM3_InitDone = InitDone, DIR = O, BUS = MPMC_PIM3
PORT PPC440MC3_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC3
PORT PPC440MC3_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC3, VEC = [0:35]
PORT PPC440MC3_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC3
PORT PPC440MC3_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC3, VEC = [0:127]
PORT PPC440MC3_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC3
PORT PPC440MC3_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC3, VEC = [0:15]
PORT PPC440MC3_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC3
PORT PPC440MC3_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC3
PORT PPC440MC3_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC3, VEC = [0:127]
PORT PPC440MC3_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC3
PORT PPC440MC3_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC3
PORT PPC440MC3_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC3
PORT VFBC3_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC3
PORT VFBC3_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC3
PORT VFBC3_Cmd_Data = cmd_data, DIR = I, BUS = VFBC3, VEC = [31:0]
PORT VFBC3_Cmd_Write = cmd_write, DIR = I, BUS = VFBC3
PORT VFBC3_Cmd_End = cmd_end, DIR = I, BUS = VFBC3
PORT VFBC3_Cmd_Full = cmd_full, DIR = O, BUS = VFBC3
PORT VFBC3_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC3
PORT VFBC3_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC3
PORT VFBC3_Wd_Clk = wd_clk, DIR = I, BUS = VFBC3
PORT VFBC3_Wd_Reset = wd_reset, DIR = I, BUS = VFBC3
PORT VFBC3_Wd_Write = wd_write, DIR = I, BUS = VFBC3
PORT VFBC3_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC3
PORT VFBC3_Wd_Flush = wd_flush, DIR = I, BUS = VFBC3
PORT VFBC3_Wd_Data = wd_data, DIR = I, BUS = VFBC3, VEC = [C_VFBC3_RDWD_DATA_WIDTH-1:0]
PORT VFBC3_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC3, VEC = [C_VFBC3_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC3_Wd_Full = wd_full, DIR = O, BUS = VFBC3
PORT VFBC3_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC3
PORT VFBC3_Rd_Clk = rd_clk, DIR = I, BUS = VFBC3
PORT VFBC3_Rd_Reset = rd_reset, DIR = I, BUS = VFBC3
PORT VFBC3_Rd_Read = rd_read, DIR = I, BUS = VFBC3
PORT VFBC3_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC3
PORT VFBC3_Rd_Flush = rd_flush, DIR = I, BUS = VFBC3
PORT VFBC3_Rd_Data = rd_data, DIR = O, BUS = VFBC3, VEC = [C_VFBC3_RDWD_DATA_WIDTH-1:0]
PORT VFBC3_Rd_Empty = rd_empty, DIR = O, BUS = VFBC3
PORT VFBC3_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC3
PORT MCB3_cmd_clk = cmd_clk, DIR = I, BUS = MCB3
PORT MCB3_cmd_en = cmd_en, DIR = I, BUS = MCB3
PORT MCB3_cmd_instr = cmd_instr, DIR = I, BUS = MCB3, VEC = [2:0]
PORT MCB3_cmd_bl = cmd_bl, DIR = I, BUS = MCB3, VEC = [5:0]
PORT MCB3_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB3, VEC = [29:0]
PORT MCB3_cmd_empty = cmd_empty, DIR = O, BUS = MCB3
PORT MCB3_cmd_full = cmd_full, DIR = O, BUS = MCB3
PORT MCB3_wr_clk = wr_clk, DIR = I, BUS = MCB3
PORT MCB3_wr_en = wr_en, DIR = I, BUS = MCB3
PORT MCB3_wr_mask = wr_mask, DIR = I, BUS = MCB3, VEC = [C_PIM3_DATA_WIDTH/8-1:0]
PORT MCB3_wr_data = wr_data, DIR = I, BUS = MCB3, VEC = [C_PIM3_DATA_WIDTH-1:0]
PORT MCB3_wr_full = wr_full, DIR = O, BUS = MCB3
PORT MCB3_wr_empty = wr_empty, DIR = O, BUS = MCB3
PORT MCB3_wr_count = wr_count, DIR = O, BUS = MCB3, VEC = [6:0]
PORT MCB3_wr_underrun = wr_underrun, DIR = O, BUS = MCB3
PORT MCB3_wr_error = wr_error, DIR = O, BUS = MCB3
PORT MCB3_rd_clk = rd_clk, DIR = I, BUS = MCB3
PORT MCB3_rd_en = rd_en, DIR = I, BUS = MCB3
PORT MCB3_rd_data = rd_data, DIR = O, BUS = MCB3, VEC = [C_PIM3_DATA_WIDTH-1:0]
PORT MCB3_rd_full = rd_full, DIR = O, BUS = MCB3
PORT MCB3_rd_empty = rd_empty, DIR = O, BUS = MCB3
PORT MCB3_rd_count = rd_count, DIR = O, BUS = MCB3, VEC = [6:0]
PORT MCB3_rd_overflow = rd_overflow, DIR = O, BUS = MCB3
PORT MCB3_rd_error = rd_error, DIR = O, BUS = MCB3
PORT FSL4_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL4, SIGIS = CLK, INITIALVAL = VCC
PORT FSL4_M_Write = FSL_M_Write, DIR = I, BUS = XCL4
PORT FSL4_M_Data = FSL_M_Data, DIR = I, BUS = XCL4, VEC = [0:31]
PORT FSL4_M_Control = FSL_M_Control, DIR = I, BUS = XCL4
PORT FSL4_M_Full = FSL_M_Full, DIR = O, BUS = XCL4
PORT FSL4_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL4
PORT FSL4_S_Read = FSL_S_Read, DIR = I, BUS = XCL4
PORT FSL4_S_Data = FSL_S_Data, DIR = O, BUS = XCL4, VEC = [0:31]
PORT FSL4_S_Control = FSL_S_Control, DIR = O, BUS = XCL4
PORT FSL4_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL4
PORT FSL4_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL4_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL4_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL4_B
PORT FSL4_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL4_B, VEC = [0:31]
PORT FSL4_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL4_B
PORT FSL4_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL4_B
PORT FSL4_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL4_B
PORT FSL4_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL4_B
PORT FSL4_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL4_B, VEC = [0:31]
PORT FSL4_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL4_B
PORT FSL4_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL4_B
PORT SPLB4_Clk = "", DIR = I, BUS = SPLB4, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB4_Rst = SPLB_Rst, DIR = I, BUS = SPLB4, SIGIS = RST
PORT SPLB4_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB4, VEC = [0:31]
PORT SPLB4_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB4, VEC = [0:(C_SPLB4_MID_WIDTH-1)]
PORT SPLB4_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_BE = PLB_BE, DIR = I, BUS = SPLB4, VEC = [0:((C_SPLB4_DWIDTH/8)-1)]
PORT SPLB4_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB4, VEC = [0:31]
PORT SPLB4_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_abort = PLB_abort, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB4, VEC = [0:1]
PORT SPLB4_PLB_size = PLB_size, DIR = I, BUS = SPLB4, VEC = [0:3]
PORT SPLB4_PLB_type = PLB_type, DIR = I, BUS = SPLB4, VEC = [0:2]
PORT SPLB4_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB4, VEC = [0:1]
PORT SPLB4_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB4, VEC = [0:1]
PORT SPLB4_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB4, VEC = [0:1]
PORT SPLB4_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB4, VEC = [0:15]
PORT SPLB4_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB4
PORT SPLB4_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB4, VEC = [0:(C_SPLB4_DWIDTH-1)]
PORT SPLB4_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB4, VEC = [0:1]
PORT SPLB4_Sl_wait = Sl_wait, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB4, VEC = [0:(C_SPLB4_DWIDTH-1)]
PORT SPLB4_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB4, VEC = [0:3]
PORT SPLB4_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB4
PORT SPLB4_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB4, VEC = [0:(C_SPLB4_NUM_MASTERS-1)]
PORT SPLB4_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB4, VEC = [0:(C_SPLB4_NUM_MASTERS-1)]
PORT SPLB4_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB4, VEC = [0:(C_SPLB4_NUM_MASTERS-1)]
PORT SPLB4_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB4, VEC = [0:(C_SPLB4_NUM_MASTERS-1)]
PORT SDMA4_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA4_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PORT SDMA4_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 4 && C_PIM4_BASETYPE == 3)
PORT SDMA4_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL4
PORT SDMA4_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL4, VEC = [0:31]
PORT SDMA4_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL4, VEC = [0:3]
PORT SDMA4_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL4
PORT SDMA4_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL4
PORT SDMA4_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL4
PORT SDMA4_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL4
PORT SDMA4_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL4
PORT SDMA4_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL4, INITIALVAL = VCC
PORT SDMA4_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL4, INITIALVAL = GND, VEC = [0:31]
PORT SDMA4_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL4, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA4_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL4, INITIALVAL = VCC
PORT SDMA4_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL4, INITIALVAL = VCC
PORT SDMA4_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL4, INITIALVAL = VCC
PORT SDMA4_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL4, INITIALVAL = VCC
PORT SDMA4_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL4, INITIALVAL = VCC
PORT SDMA4_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL4
PORT SDMA_CTRL4_Clk = "", DIR = I, BUS = SDMA_CTRL4, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL4_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL4, SIGIS = RST
PORT SDMA_CTRL4_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL4, VEC = [0:31]
PORT SDMA_CTRL4_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL4, VEC = [0:(C_SDMA_CTRL4_MID_WIDTH-1)]
PORT SDMA_CTRL4_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL4, VEC = [0:((C_SDMA_CTRL4_DWIDTH/8)-1)]
PORT SDMA_CTRL4_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL4, VEC = [0:31]
PORT SDMA_CTRL4_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL4, VEC = [0:1]
PORT SDMA_CTRL4_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL4, VEC = [0:3]
PORT SDMA_CTRL4_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL4, VEC = [0:2]
PORT SDMA_CTRL4_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL4, VEC = [0:1]
PORT SDMA_CTRL4_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL4, VEC = [0:1]
PORT SDMA_CTRL4_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL4, VEC = [0:1]
PORT SDMA_CTRL4_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL4, VEC = [0:15]
PORT SDMA_CTRL4_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL4, VEC = [0:(C_SDMA_CTRL4_DWIDTH-1)]
PORT SDMA_CTRL4_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL4, VEC = [0:1]
PORT SDMA_CTRL4_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL4, VEC = [0:(C_SDMA_CTRL4_DWIDTH-1)]
PORT SDMA_CTRL4_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL4, VEC = [0:3]
PORT SDMA_CTRL4_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL4
PORT SDMA_CTRL4_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL4, VEC = [0:(C_SDMA_CTRL4_NUM_MASTERS-1)]
PORT SDMA_CTRL4_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL4, VEC = [0:(C_SDMA_CTRL4_NUM_MASTERS-1)]
PORT SDMA_CTRL4_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL4, VEC = [0:(C_SDMA_CTRL4_NUM_MASTERS-1)]
PORT SDMA_CTRL4_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL4, VEC = [0:(C_SDMA_CTRL4_NUM_MASTERS-1)]
PORT PIM4_Addr = Addr, DIR = I, BUS = MPMC_PIM4, VEC = [31:0]
PORT PIM4_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM4
PORT PIM4_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM4
PORT PIM4_RNW = RNW, DIR = I, BUS = MPMC_PIM4
PORT PIM4_Size = Size, DIR = I, BUS = MPMC_PIM4, VEC = [3:0]
PORT PIM4_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM4
PORT PIM4_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM4, VEC = [(C_PIM4_DATA_WIDTH-1):0]
PORT PIM4_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM4, VEC = [(C_PIM4_DATA_WIDTH/8-1):0]
PORT PIM4_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM4
PORT PIM4_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM4, VEC = [(C_PIM4_DATA_WIDTH-1):0]
PORT PIM4_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM4
PORT PIM4_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM4, VEC = [3:0]
PORT PIM4_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM4
PORT PIM4_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM4
PORT PIM4_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM4
PORT PIM4_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM4
PORT PIM4_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM4
PORT PIM4_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM4, VEC = [1:0]
PORT PIM4_InitDone = InitDone, DIR = O, BUS = MPMC_PIM4
PORT PPC440MC4_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC4
PORT PPC440MC4_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC4, VEC = [0:35]
PORT PPC440MC4_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC4
PORT PPC440MC4_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC4, VEC = [0:127]
PORT PPC440MC4_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC4
PORT PPC440MC4_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC4, VEC = [0:15]
PORT PPC440MC4_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC4
PORT PPC440MC4_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC4
PORT PPC440MC4_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC4, VEC = [0:127]
PORT PPC440MC4_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC4
PORT PPC440MC4_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC4
PORT PPC440MC4_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC4
PORT VFBC4_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC4
PORT VFBC4_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC4
PORT VFBC4_Cmd_Data = cmd_data, DIR = I, BUS = VFBC4, VEC = [31:0]
PORT VFBC4_Cmd_Write = cmd_write, DIR = I, BUS = VFBC4
PORT VFBC4_Cmd_End = cmd_end, DIR = I, BUS = VFBC4
PORT VFBC4_Cmd_Full = cmd_full, DIR = O, BUS = VFBC4
PORT VFBC4_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC4
PORT VFBC4_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC4
PORT VFBC4_Wd_Clk = wd_clk, DIR = I, BUS = VFBC4
PORT VFBC4_Wd_Reset = wd_reset, DIR = I, BUS = VFBC4
PORT VFBC4_Wd_Write = wd_write, DIR = I, BUS = VFBC4
PORT VFBC4_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC4
PORT VFBC4_Wd_Flush = wd_flush, DIR = I, BUS = VFBC4
PORT VFBC4_Wd_Data = wd_data, DIR = I, BUS = VFBC4, VEC = [C_VFBC4_RDWD_DATA_WIDTH-1:0]
PORT VFBC4_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC4, VEC = [C_VFBC4_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC4_Wd_Full = wd_full, DIR = O, BUS = VFBC4
PORT VFBC4_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC4
PORT VFBC4_Rd_Clk = rd_clk, DIR = I, BUS = VFBC4
PORT VFBC4_Rd_Reset = rd_reset, DIR = I, BUS = VFBC4
PORT VFBC4_Rd_Read = rd_read, DIR = I, BUS = VFBC4
PORT VFBC4_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC4
PORT VFBC4_Rd_Flush = rd_flush, DIR = I, BUS = VFBC4
PORT VFBC4_Rd_Data = rd_data, DIR = O, BUS = VFBC4, VEC = [C_VFBC4_RDWD_DATA_WIDTH-1:0]
PORT VFBC4_Rd_Empty = rd_empty, DIR = O, BUS = VFBC4
PORT VFBC4_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC4
PORT MCB4_cmd_clk = cmd_clk, DIR = I, BUS = MCB4
PORT MCB4_cmd_en = cmd_en, DIR = I, BUS = MCB4
PORT MCB4_cmd_instr = cmd_instr, DIR = I, BUS = MCB4, VEC = [2:0]
PORT MCB4_cmd_bl = cmd_bl, DIR = I, BUS = MCB4, VEC = [5:0]
PORT MCB4_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB4, VEC = [29:0]
PORT MCB4_cmd_empty = cmd_empty, DIR = O, BUS = MCB4
PORT MCB4_cmd_full = cmd_full, DIR = O, BUS = MCB4
PORT MCB4_wr_clk = wr_clk, DIR = I, BUS = MCB4
PORT MCB4_wr_en = wr_en, DIR = I, BUS = MCB4
PORT MCB4_wr_mask = wr_mask, DIR = I, BUS = MCB4, VEC = [C_PIM4_DATA_WIDTH/8-1:0]
PORT MCB4_wr_data = wr_data, DIR = I, BUS = MCB4, VEC = [C_PIM4_DATA_WIDTH-1:0]
PORT MCB4_wr_full = wr_full, DIR = O, BUS = MCB4
PORT MCB4_wr_empty = wr_empty, DIR = O, BUS = MCB4
PORT MCB4_wr_count = wr_count, DIR = O, BUS = MCB4, VEC = [6:0]
PORT MCB4_wr_underrun = wr_underrun, DIR = O, BUS = MCB4
PORT MCB4_wr_error = wr_error, DIR = O, BUS = MCB4
PORT MCB4_rd_clk = rd_clk, DIR = I, BUS = MCB4
PORT MCB4_rd_en = rd_en, DIR = I, BUS = MCB4
PORT MCB4_rd_data = rd_data, DIR = O, BUS = MCB4, VEC = [C_PIM4_DATA_WIDTH-1:0]
PORT MCB4_rd_full = rd_full, DIR = O, BUS = MCB4
PORT MCB4_rd_empty = rd_empty, DIR = O, BUS = MCB4
PORT MCB4_rd_count = rd_count, DIR = O, BUS = MCB4, VEC = [6:0]
PORT MCB4_rd_overflow = rd_overflow, DIR = O, BUS = MCB4
PORT MCB4_rd_error = rd_error, DIR = O, BUS = MCB4
PORT FSL5_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL5, SIGIS = CLK, INITIALVAL = VCC
PORT FSL5_M_Write = FSL_M_Write, DIR = I, BUS = XCL5
PORT FSL5_M_Data = FSL_M_Data, DIR = I, BUS = XCL5, VEC = [0:31]
PORT FSL5_M_Control = FSL_M_Control, DIR = I, BUS = XCL5
PORT FSL5_M_Full = FSL_M_Full, DIR = O, BUS = XCL5
PORT FSL5_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL5
PORT FSL5_S_Read = FSL_S_Read, DIR = I, BUS = XCL5
PORT FSL5_S_Data = FSL_S_Data, DIR = O, BUS = XCL5, VEC = [0:31]
PORT FSL5_S_Control = FSL_S_Control, DIR = O, BUS = XCL5
PORT FSL5_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL5
PORT FSL5_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL5_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL5_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL5_B
PORT FSL5_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL5_B, VEC = [0:31]
PORT FSL5_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL5_B
PORT FSL5_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL5_B
PORT FSL5_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL5_B
PORT FSL5_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL5_B
PORT FSL5_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL5_B, VEC = [0:31]
PORT FSL5_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL5_B
PORT FSL5_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL5_B
PORT SPLB5_Clk = "", DIR = I, BUS = SPLB5, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB5_Rst = SPLB_Rst, DIR = I, BUS = SPLB5, SIGIS = RST
PORT SPLB5_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB5, VEC = [0:31]
PORT SPLB5_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB5, VEC = [0:(C_SPLB5_MID_WIDTH-1)]
PORT SPLB5_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_BE = PLB_BE, DIR = I, BUS = SPLB5, VEC = [0:((C_SPLB5_DWIDTH/8)-1)]
PORT SPLB5_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB5, VEC = [0:31]
PORT SPLB5_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_abort = PLB_abort, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB5, VEC = [0:1]
PORT SPLB5_PLB_size = PLB_size, DIR = I, BUS = SPLB5, VEC = [0:3]
PORT SPLB5_PLB_type = PLB_type, DIR = I, BUS = SPLB5, VEC = [0:2]
PORT SPLB5_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB5, VEC = [0:1]
PORT SPLB5_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB5, VEC = [0:1]
PORT SPLB5_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB5, VEC = [0:1]
PORT SPLB5_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB5, VEC = [0:15]
PORT SPLB5_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB5
PORT SPLB5_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB5, VEC = [0:(C_SPLB5_DWIDTH-1)]
PORT SPLB5_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB5, VEC = [0:1]
PORT SPLB5_Sl_wait = Sl_wait, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB5, VEC = [0:(C_SPLB5_DWIDTH-1)]
PORT SPLB5_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB5, VEC = [0:3]
PORT SPLB5_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB5
PORT SPLB5_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB5, VEC = [0:(C_SPLB5_NUM_MASTERS-1)]
PORT SPLB5_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB5, VEC = [0:(C_SPLB5_NUM_MASTERS-1)]
PORT SPLB5_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB5, VEC = [0:(C_SPLB5_NUM_MASTERS-1)]
PORT SPLB5_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB5, VEC = [0:(C_SPLB5_NUM_MASTERS-1)]
PORT SDMA5_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA5_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PORT SDMA5_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 5 && C_PIM5_BASETYPE == 3)
PORT SDMA5_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL5
PORT SDMA5_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL5, VEC = [0:31]
PORT SDMA5_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL5, VEC = [0:3]
PORT SDMA5_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL5
PORT SDMA5_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL5
PORT SDMA5_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL5
PORT SDMA5_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL5
PORT SDMA5_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL5
PORT SDMA5_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL5, INITIALVAL = VCC
PORT SDMA5_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL5, INITIALVAL = GND, VEC = [0:31]
PORT SDMA5_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL5, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA5_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL5, INITIALVAL = VCC
PORT SDMA5_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL5, INITIALVAL = VCC
PORT SDMA5_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL5, INITIALVAL = VCC
PORT SDMA5_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL5, INITIALVAL = VCC
PORT SDMA5_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL5, INITIALVAL = VCC
PORT SDMA5_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL5
PORT SDMA_CTRL5_Clk = "", DIR = I, BUS = SDMA_CTRL5, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL5_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL5, SIGIS = RST
PORT SDMA_CTRL5_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL5, VEC = [0:31]
PORT SDMA_CTRL5_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL5, VEC = [0:(C_SDMA_CTRL5_MID_WIDTH-1)]
PORT SDMA_CTRL5_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL5, VEC = [0:((C_SDMA_CTRL5_DWIDTH/8)-1)]
PORT SDMA_CTRL5_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL5, VEC = [0:31]
PORT SDMA_CTRL5_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL5, VEC = [0:1]
PORT SDMA_CTRL5_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL5, VEC = [0:3]
PORT SDMA_CTRL5_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL5, VEC = [0:2]
PORT SDMA_CTRL5_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL5, VEC = [0:1]
PORT SDMA_CTRL5_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL5, VEC = [0:1]
PORT SDMA_CTRL5_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL5, VEC = [0:1]
PORT SDMA_CTRL5_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL5, VEC = [0:15]
PORT SDMA_CTRL5_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL5, VEC = [0:(C_SDMA_CTRL5_DWIDTH-1)]
PORT SDMA_CTRL5_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL5, VEC = [0:1]
PORT SDMA_CTRL5_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL5, VEC = [0:(C_SDMA_CTRL5_DWIDTH-1)]
PORT SDMA_CTRL5_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL5, VEC = [0:3]
PORT SDMA_CTRL5_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL5
PORT SDMA_CTRL5_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL5, VEC = [0:(C_SDMA_CTRL5_NUM_MASTERS-1)]
PORT SDMA_CTRL5_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL5, VEC = [0:(C_SDMA_CTRL5_NUM_MASTERS-1)]
PORT SDMA_CTRL5_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL5, VEC = [0:(C_SDMA_CTRL5_NUM_MASTERS-1)]
PORT SDMA_CTRL5_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL5, VEC = [0:(C_SDMA_CTRL5_NUM_MASTERS-1)]
PORT PIM5_Addr = Addr, DIR = I, BUS = MPMC_PIM5, VEC = [31:0]
PORT PIM5_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM5
PORT PIM5_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM5
PORT PIM5_RNW = RNW, DIR = I, BUS = MPMC_PIM5
PORT PIM5_Size = Size, DIR = I, BUS = MPMC_PIM5, VEC = [3:0]
PORT PIM5_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM5
PORT PIM5_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM5, VEC = [(C_PIM5_DATA_WIDTH-1):0]
PORT PIM5_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM5, VEC = [(C_PIM5_DATA_WIDTH/8-1):0]
PORT PIM5_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM5
PORT PIM5_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM5, VEC = [(C_PIM5_DATA_WIDTH-1):0]
PORT PIM5_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM5
PORT PIM5_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM5, VEC = [3:0]
PORT PIM5_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM5
PORT PIM5_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM5
PORT PIM5_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM5
PORT PIM5_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM5
PORT PIM5_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM5
PORT PIM5_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM5, VEC = [1:0]
PORT PIM5_InitDone = InitDone, DIR = O, BUS = MPMC_PIM5
PORT PPC440MC5_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC5
PORT PPC440MC5_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC5, VEC = [0:35]
PORT PPC440MC5_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC5
PORT PPC440MC5_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC5, VEC = [0:127]
PORT PPC440MC5_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC5
PORT PPC440MC5_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC5, VEC = [0:15]
PORT PPC440MC5_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC5
PORT PPC440MC5_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC5
PORT PPC440MC5_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC5, VEC = [0:127]
PORT PPC440MC5_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC5
PORT PPC440MC5_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC5
PORT PPC440MC5_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC5
PORT VFBC5_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC5
PORT VFBC5_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC5
PORT VFBC5_Cmd_Data = cmd_data, DIR = I, BUS = VFBC5, VEC = [31:0]
PORT VFBC5_Cmd_Write = cmd_write, DIR = I, BUS = VFBC5
PORT VFBC5_Cmd_End = cmd_end, DIR = I, BUS = VFBC5
PORT VFBC5_Cmd_Full = cmd_full, DIR = O, BUS = VFBC5
PORT VFBC5_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC5
PORT VFBC5_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC5
PORT VFBC5_Wd_Clk = wd_clk, DIR = I, BUS = VFBC5
PORT VFBC5_Wd_Reset = wd_reset, DIR = I, BUS = VFBC5
PORT VFBC5_Wd_Write = wd_write, DIR = I, BUS = VFBC5
PORT VFBC5_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC5
PORT VFBC5_Wd_Flush = wd_flush, DIR = I, BUS = VFBC5
PORT VFBC5_Wd_Data = wd_data, DIR = I, BUS = VFBC5, VEC = [C_VFBC5_RDWD_DATA_WIDTH-1:0]
PORT VFBC5_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC5, VEC = [C_VFBC5_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC5_Wd_Full = wd_full, DIR = O, BUS = VFBC5
PORT VFBC5_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC5
PORT VFBC5_Rd_Clk = rd_clk, DIR = I, BUS = VFBC5
PORT VFBC5_Rd_Reset = rd_reset, DIR = I, BUS = VFBC5
PORT VFBC5_Rd_Read = rd_read, DIR = I, BUS = VFBC5
PORT VFBC5_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC5
PORT VFBC5_Rd_Flush = rd_flush, DIR = I, BUS = VFBC5
PORT VFBC5_Rd_Data = rd_data, DIR = O, BUS = VFBC5, VEC = [C_VFBC5_RDWD_DATA_WIDTH-1:0]
PORT VFBC5_Rd_Empty = rd_empty, DIR = O, BUS = VFBC5
PORT VFBC5_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC5
PORT MCB5_cmd_clk = cmd_clk, DIR = I, BUS = MCB5
PORT MCB5_cmd_en = cmd_en, DIR = I, BUS = MCB5
PORT MCB5_cmd_instr = cmd_instr, DIR = I, BUS = MCB5, VEC = [2:0]
PORT MCB5_cmd_bl = cmd_bl, DIR = I, BUS = MCB5, VEC = [5:0]
PORT MCB5_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB5, VEC = [29:0]
PORT MCB5_cmd_empty = cmd_empty, DIR = O, BUS = MCB5
PORT MCB5_cmd_full = cmd_full, DIR = O, BUS = MCB5
PORT MCB5_wr_clk = wr_clk, DIR = I, BUS = MCB5
PORT MCB5_wr_en = wr_en, DIR = I, BUS = MCB5
PORT MCB5_wr_mask = wr_mask, DIR = I, BUS = MCB5, VEC = [C_PIM5_DATA_WIDTH/8-1:0]
PORT MCB5_wr_data = wr_data, DIR = I, BUS = MCB5, VEC = [C_PIM5_DATA_WIDTH-1:0]
PORT MCB5_wr_full = wr_full, DIR = O, BUS = MCB5
PORT MCB5_wr_empty = wr_empty, DIR = O, BUS = MCB5
PORT MCB5_wr_count = wr_count, DIR = O, BUS = MCB5, VEC = [6:0]
PORT MCB5_wr_underrun = wr_underrun, DIR = O, BUS = MCB5
PORT MCB5_wr_error = wr_error, DIR = O, BUS = MCB5
PORT MCB5_rd_clk = rd_clk, DIR = I, BUS = MCB5
PORT MCB5_rd_en = rd_en, DIR = I, BUS = MCB5
PORT MCB5_rd_data = rd_data, DIR = O, BUS = MCB5, VEC = [C_PIM5_DATA_WIDTH-1:0]
PORT MCB5_rd_full = rd_full, DIR = O, BUS = MCB5
PORT MCB5_rd_empty = rd_empty, DIR = O, BUS = MCB5
PORT MCB5_rd_count = rd_count, DIR = O, BUS = MCB5, VEC = [6:0]
PORT MCB5_rd_overflow = rd_overflow, DIR = O, BUS = MCB5
PORT MCB5_rd_error = rd_error, DIR = O, BUS = MCB5
PORT FSL6_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL6, SIGIS = CLK, INITIALVAL = VCC
PORT FSL6_M_Write = FSL_M_Write, DIR = I, BUS = XCL6
PORT FSL6_M_Data = FSL_M_Data, DIR = I, BUS = XCL6, VEC = [0:31]
PORT FSL6_M_Control = FSL_M_Control, DIR = I, BUS = XCL6
PORT FSL6_M_Full = FSL_M_Full, DIR = O, BUS = XCL6
PORT FSL6_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL6
PORT FSL6_S_Read = FSL_S_Read, DIR = I, BUS = XCL6
PORT FSL6_S_Data = FSL_S_Data, DIR = O, BUS = XCL6, VEC = [0:31]
PORT FSL6_S_Control = FSL_S_Control, DIR = O, BUS = XCL6
PORT FSL6_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL6
PORT FSL6_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL6_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL6_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL6_B
PORT FSL6_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL6_B, VEC = [0:31]
PORT FSL6_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL6_B
PORT FSL6_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL6_B
PORT FSL6_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL6_B
PORT FSL6_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL6_B
PORT FSL6_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL6_B, VEC = [0:31]
PORT FSL6_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL6_B
PORT FSL6_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL6_B
PORT SPLB6_Clk = "", DIR = I, BUS = SPLB6, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB6_Rst = SPLB_Rst, DIR = I, BUS = SPLB6, SIGIS = RST
PORT SPLB6_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB6, VEC = [0:31]
PORT SPLB6_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB6, VEC = [0:(C_SPLB6_MID_WIDTH-1)]
PORT SPLB6_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_BE = PLB_BE, DIR = I, BUS = SPLB6, VEC = [0:((C_SPLB6_DWIDTH/8)-1)]
PORT SPLB6_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB6, VEC = [0:31]
PORT SPLB6_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_abort = PLB_abort, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB6, VEC = [0:1]
PORT SPLB6_PLB_size = PLB_size, DIR = I, BUS = SPLB6, VEC = [0:3]
PORT SPLB6_PLB_type = PLB_type, DIR = I, BUS = SPLB6, VEC = [0:2]
PORT SPLB6_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB6, VEC = [0:1]
PORT SPLB6_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB6, VEC = [0:1]
PORT SPLB6_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB6, VEC = [0:1]
PORT SPLB6_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB6, VEC = [0:15]
PORT SPLB6_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB6
PORT SPLB6_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB6, VEC = [0:(C_SPLB6_DWIDTH-1)]
PORT SPLB6_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB6, VEC = [0:1]
PORT SPLB6_Sl_wait = Sl_wait, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB6, VEC = [0:(C_SPLB6_DWIDTH-1)]
PORT SPLB6_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB6, VEC = [0:3]
PORT SPLB6_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB6
PORT SPLB6_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB6, VEC = [0:(C_SPLB6_NUM_MASTERS-1)]
PORT SPLB6_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB6, VEC = [0:(C_SPLB6_NUM_MASTERS-1)]
PORT SPLB6_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB6, VEC = [0:(C_SPLB6_NUM_MASTERS-1)]
PORT SPLB6_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB6, VEC = [0:(C_SPLB6_NUM_MASTERS-1)]
PORT SDMA6_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA6_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PORT SDMA6_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 6 && C_PIM6_BASETYPE == 3)
PORT SDMA6_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL6
PORT SDMA6_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL6, VEC = [0:31]
PORT SDMA6_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL6, VEC = [0:3]
PORT SDMA6_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL6
PORT SDMA6_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL6
PORT SDMA6_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL6
PORT SDMA6_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL6
PORT SDMA6_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL6
PORT SDMA6_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL6, INITIALVAL = VCC
PORT SDMA6_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL6, INITIALVAL = GND, VEC = [0:31]
PORT SDMA6_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL6, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA6_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL6, INITIALVAL = VCC
PORT SDMA6_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL6, INITIALVAL = VCC
PORT SDMA6_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL6, INITIALVAL = VCC
PORT SDMA6_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL6, INITIALVAL = VCC
PORT SDMA6_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL6, INITIALVAL = VCC
PORT SDMA6_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL6
PORT SDMA_CTRL6_Clk = "", DIR = I, BUS = SDMA_CTRL6, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL6_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL6, SIGIS = RST
PORT SDMA_CTRL6_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL6, VEC = [0:31]
PORT SDMA_CTRL6_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL6, VEC = [0:(C_SDMA_CTRL6_MID_WIDTH-1)]
PORT SDMA_CTRL6_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL6, VEC = [0:((C_SDMA_CTRL6_DWIDTH/8)-1)]
PORT SDMA_CTRL6_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL6, VEC = [0:31]
PORT SDMA_CTRL6_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL6, VEC = [0:1]
PORT SDMA_CTRL6_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL6, VEC = [0:3]
PORT SDMA_CTRL6_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL6, VEC = [0:2]
PORT SDMA_CTRL6_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL6, VEC = [0:1]
PORT SDMA_CTRL6_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL6, VEC = [0:1]
PORT SDMA_CTRL6_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL6, VEC = [0:1]
PORT SDMA_CTRL6_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL6, VEC = [0:15]
PORT SDMA_CTRL6_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL6, VEC = [0:(C_SDMA_CTRL6_DWIDTH-1)]
PORT SDMA_CTRL6_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL6, VEC = [0:1]
PORT SDMA_CTRL6_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL6, VEC = [0:(C_SDMA_CTRL6_DWIDTH-1)]
PORT SDMA_CTRL6_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL6, VEC = [0:3]
PORT SDMA_CTRL6_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL6
PORT SDMA_CTRL6_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL6, VEC = [0:(C_SDMA_CTRL6_NUM_MASTERS-1)]
PORT SDMA_CTRL6_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL6, VEC = [0:(C_SDMA_CTRL6_NUM_MASTERS-1)]
PORT SDMA_CTRL6_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL6, VEC = [0:(C_SDMA_CTRL6_NUM_MASTERS-1)]
PORT SDMA_CTRL6_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL6, VEC = [0:(C_SDMA_CTRL6_NUM_MASTERS-1)]
PORT PIM6_Addr = Addr, DIR = I, BUS = MPMC_PIM6, VEC = [31:0]
PORT PIM6_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM6
PORT PIM6_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM6
PORT PIM6_RNW = RNW, DIR = I, BUS = MPMC_PIM6
PORT PIM6_Size = Size, DIR = I, BUS = MPMC_PIM6, VEC = [3:0]
PORT PIM6_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM6
PORT PIM6_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM6, VEC = [(C_PIM6_DATA_WIDTH-1):0]
PORT PIM6_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM6, VEC = [(C_PIM6_DATA_WIDTH/8-1):0]
PORT PIM6_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM6
PORT PIM6_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM6, VEC = [(C_PIM6_DATA_WIDTH-1):0]
PORT PIM6_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM6
PORT PIM6_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM6, VEC = [3:0]
PORT PIM6_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM6
PORT PIM6_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM6
PORT PIM6_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM6
PORT PIM6_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM6
PORT PIM6_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM6
PORT PIM6_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM6, VEC = [1:0]
PORT PIM6_InitDone = InitDone, DIR = O, BUS = MPMC_PIM6
PORT PPC440MC6_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC6
PORT PPC440MC6_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC6, VEC = [0:35]
PORT PPC440MC6_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC6
PORT PPC440MC6_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC6, VEC = [0:127]
PORT PPC440MC6_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC6
PORT PPC440MC6_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC6, VEC = [0:15]
PORT PPC440MC6_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC6
PORT PPC440MC6_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC6
PORT PPC440MC6_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC6, VEC = [0:127]
PORT PPC440MC6_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC6
PORT PPC440MC6_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC6
PORT PPC440MC6_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC6
PORT VFBC6_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC6
PORT VFBC6_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC6
PORT VFBC6_Cmd_Data = cmd_data, DIR = I, BUS = VFBC6, VEC = [31:0]
PORT VFBC6_Cmd_Write = cmd_write, DIR = I, BUS = VFBC6
PORT VFBC6_Cmd_End = cmd_end, DIR = I, BUS = VFBC6
PORT VFBC6_Cmd_Full = cmd_full, DIR = O, BUS = VFBC6
PORT VFBC6_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC6
PORT VFBC6_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC6
PORT VFBC6_Wd_Clk = wd_clk, DIR = I, BUS = VFBC6
PORT VFBC6_Wd_Reset = wd_reset, DIR = I, BUS = VFBC6
PORT VFBC6_Wd_Write = wd_write, DIR = I, BUS = VFBC6
PORT VFBC6_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC6
PORT VFBC6_Wd_Flush = wd_flush, DIR = I, BUS = VFBC6
PORT VFBC6_Wd_Data = wd_data, DIR = I, BUS = VFBC6, VEC = [C_VFBC6_RDWD_DATA_WIDTH-1:0]
PORT VFBC6_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC6, VEC = [C_VFBC6_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC6_Wd_Full = wd_full, DIR = O, BUS = VFBC6
PORT VFBC6_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC6
PORT VFBC6_Rd_Clk = rd_clk, DIR = I, BUS = VFBC6
PORT VFBC6_Rd_Reset = rd_reset, DIR = I, BUS = VFBC6
PORT VFBC6_Rd_Read = rd_read, DIR = I, BUS = VFBC6
PORT VFBC6_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC6
PORT VFBC6_Rd_Flush = rd_flush, DIR = I, BUS = VFBC6
PORT VFBC6_Rd_Data = rd_data, DIR = O, BUS = VFBC6, VEC = [C_VFBC6_RDWD_DATA_WIDTH-1:0]
PORT VFBC6_Rd_Empty = rd_empty, DIR = O, BUS = VFBC6
PORT VFBC6_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC6
PORT MCB6_cmd_clk = cmd_clk, DIR = I, BUS = MCB6
PORT MCB6_cmd_en = cmd_en, DIR = I, BUS = MCB6
PORT MCB6_cmd_instr = cmd_instr, DIR = I, BUS = MCB6, VEC = [2:0]
PORT MCB6_cmd_bl = cmd_bl, DIR = I, BUS = MCB6, VEC = [5:0]
PORT MCB6_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB6, VEC = [29:0]
PORT MCB6_cmd_empty = cmd_empty, DIR = O, BUS = MCB6
PORT MCB6_cmd_full = cmd_full, DIR = O, BUS = MCB6
PORT MCB6_wr_clk = wr_clk, DIR = I, BUS = MCB6
PORT MCB6_wr_en = wr_en, DIR = I, BUS = MCB6
PORT MCB6_wr_mask = wr_mask, DIR = I, BUS = MCB6, VEC = [C_PIM6_DATA_WIDTH/8-1:0]
PORT MCB6_wr_data = wr_data, DIR = I, BUS = MCB6, VEC = [C_PIM6_DATA_WIDTH-1:0]
PORT MCB6_wr_full = wr_full, DIR = O, BUS = MCB6
PORT MCB6_wr_empty = wr_empty, DIR = O, BUS = MCB6
PORT MCB6_wr_count = wr_count, DIR = O, BUS = MCB6, VEC = [6:0]
PORT MCB6_wr_underrun = wr_underrun, DIR = O, BUS = MCB6
PORT MCB6_wr_error = wr_error, DIR = O, BUS = MCB6
PORT MCB6_rd_clk = rd_clk, DIR = I, BUS = MCB6
PORT MCB6_rd_en = rd_en, DIR = I, BUS = MCB6
PORT MCB6_rd_data = rd_data, DIR = O, BUS = MCB6, VEC = [C_PIM6_DATA_WIDTH-1:0]
PORT MCB6_rd_full = rd_full, DIR = O, BUS = MCB6
PORT MCB6_rd_empty = rd_empty, DIR = O, BUS = MCB6
PORT MCB6_rd_count = rd_count, DIR = O, BUS = MCB6, VEC = [6:0]
PORT MCB6_rd_overflow = rd_overflow, DIR = O, BUS = MCB6
PORT MCB6_rd_error = rd_error, DIR = O, BUS = MCB6
PORT FSL7_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL7, SIGIS = CLK, INITIALVAL = VCC
PORT FSL7_M_Write = FSL_M_Write, DIR = I, BUS = XCL7
PORT FSL7_M_Data = FSL_M_Data, DIR = I, BUS = XCL7, VEC = [0:31]
PORT FSL7_M_Control = FSL_M_Control, DIR = I, BUS = XCL7
PORT FSL7_M_Full = FSL_M_Full, DIR = O, BUS = XCL7
PORT FSL7_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL7
PORT FSL7_S_Read = FSL_S_Read, DIR = I, BUS = XCL7
PORT FSL7_S_Data = FSL_S_Data, DIR = O, BUS = XCL7, VEC = [0:31]
PORT FSL7_S_Control = FSL_S_Control, DIR = O, BUS = XCL7
PORT FSL7_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL7
PORT FSL7_B_M_Clk = FSL_M_Clk, DIR = I, BUS = XCL7_B, SIGIS = CLK, INITIALVAL = VCC
PORT FSL7_B_M_Write = FSL_M_Write, DIR = I, BUS = XCL7_B
PORT FSL7_B_M_Data = FSL_M_Data, DIR = I, BUS = XCL7_B, VEC = [0:31]
PORT FSL7_B_M_Control = FSL_M_Control, DIR = I, BUS = XCL7_B
PORT FSL7_B_M_Full = FSL_M_Full, DIR = O, BUS = XCL7_B
PORT FSL7_B_S_Clk = FSL_S_Clk, DIR = I, BUS = XCL7_B
PORT FSL7_B_S_Read = FSL_S_Read, DIR = I, BUS = XCL7_B
PORT FSL7_B_S_Data = FSL_S_Data, DIR = O, BUS = XCL7_B, VEC = [0:31]
PORT FSL7_B_S_Control = FSL_S_Control, DIR = O, BUS = XCL7_B
PORT FSL7_B_S_Exists = FSL_S_Exists, DIR = O, BUS = XCL7_B
PORT SPLB7_Clk = "", DIR = I, BUS = SPLB7, SIGIS = CLK, INITIALVAL = VCC
PORT SPLB7_Rst = SPLB_Rst, DIR = I, BUS = SPLB7, SIGIS = RST
PORT SPLB7_PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB7, VEC = [0:31]
PORT SPLB7_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB7, VEC = [0:(C_SPLB7_MID_WIDTH-1)]
PORT SPLB7_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_BE = PLB_BE, DIR = I, BUS = SPLB7, VEC = [0:((C_SPLB7_DWIDTH/8)-1)]
PORT SPLB7_PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB7, VEC = [0:31]
PORT SPLB7_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_abort = PLB_abort, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB7, VEC = [0:1]
PORT SPLB7_PLB_size = PLB_size, DIR = I, BUS = SPLB7, VEC = [0:3]
PORT SPLB7_PLB_type = PLB_type, DIR = I, BUS = SPLB7, VEC = [0:2]
PORT SPLB7_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB7, VEC = [0:1]
PORT SPLB7_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB7, VEC = [0:1]
PORT SPLB7_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB7, VEC = [0:1]
PORT SPLB7_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB7, VEC = [0:15]
PORT SPLB7_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB7
PORT SPLB7_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB7, VEC = [0:(C_SPLB7_DWIDTH-1)]
PORT SPLB7_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_SSize = Sl_SSize, DIR = O, BUS = SPLB7, VEC = [0:1]
PORT SPLB7_Sl_wait = Sl_wait, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SPLB7, VEC = [0:(C_SPLB7_DWIDTH-1)]
PORT SPLB7_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SPLB7, VEC = [0:3]
PORT SPLB7_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB7
PORT SPLB7_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SPLB7, VEC = [0:(C_SPLB7_NUM_MASTERS-1)]
PORT SPLB7_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SPLB7, VEC = [0:(C_SPLB7_NUM_MASTERS-1)]
PORT SPLB7_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SPLB7, VEC = [0:(C_SPLB7_NUM_MASTERS-1)]
PORT SPLB7_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SPLB7, VEC = [0:(C_SPLB7_NUM_MASTERS-1)]
PORT SDMA7_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3), ASSIGNMENT = REQUIRE
PORT SDMA7_Rx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PORT SDMA7_Tx_IntOut = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_NUM_PORTS > 7 && C_PIM7_BASETYPE == 3)
PORT SDMA7_RstOut = LL_RST_ACK, DIR = O, BUS = SDMA_LL7
PORT SDMA7_TX_D = LL_Tx_Data, DIR = O, BUS = SDMA_LL7, VEC = [0:31]
PORT SDMA7_TX_Rem = LL_Tx_Rem, DIR = O, BUS = SDMA_LL7, VEC = [0:3]
PORT SDMA7_TX_SOF = LL_Tx_SOF_n, DIR = O, BUS = SDMA_LL7
PORT SDMA7_TX_EOF = LL_Tx_EOF_n, DIR = O, BUS = SDMA_LL7
PORT SDMA7_TX_SOP = LL_Tx_SOP_n, DIR = O, BUS = SDMA_LL7
PORT SDMA7_TX_EOP = LL_Tx_EOP_n, DIR = O, BUS = SDMA_LL7
PORT SDMA7_TX_Src_Rdy = LL_Tx_SrcRdy_n, DIR = O, BUS = SDMA_LL7
PORT SDMA7_TX_Dst_Rdy = LL_Tx_DstRdy_n, DIR = I, BUS = SDMA_LL7, INITIALVAL = VCC
PORT SDMA7_RX_D = LL_Rx_Data, DIR = I, BUS = SDMA_LL7, INITIALVAL = GND, VEC = [0:31]
PORT SDMA7_RX_Rem = LL_Rx_Rem, DIR = I, BUS = SDMA_LL7, INITIALVAL = VCC, VEC = [0:3]
PORT SDMA7_RX_SOF = LL_Rx_SOF_n, DIR = I, BUS = SDMA_LL7, INITIALVAL = VCC
PORT SDMA7_RX_EOF = LL_Rx_EOF_n, DIR = I, BUS = SDMA_LL7, INITIALVAL = VCC
PORT SDMA7_RX_SOP = LL_Rx_SOP_n, DIR = I, BUS = SDMA_LL7, INITIALVAL = VCC
PORT SDMA7_RX_EOP = LL_Rx_EOP_n, DIR = I, BUS = SDMA_LL7, INITIALVAL = VCC
PORT SDMA7_RX_Src_Rdy = LL_Rx_SrcRdy_n, DIR = I, BUS = SDMA_LL7, INITIALVAL = VCC
PORT SDMA7_RX_Dst_Rdy = LL_Rx_DstRdy_n, DIR = O, BUS = SDMA_LL7
PORT SDMA_CTRL7_Clk = "", DIR = I, BUS = SDMA_CTRL7, SIGIS = CLK, INITIALVAL = VCC
PORT SDMA_CTRL7_Rst = SPLB_Rst, DIR = I, BUS = SDMA_CTRL7, SIGIS = RST
PORT SDMA_CTRL7_PLB_ABus = PLB_ABus, DIR = I, BUS = SDMA_CTRL7, VEC = [0:31]
PORT SDMA_CTRL7_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_masterID = PLB_masterID, DIR = I, BUS = SDMA_CTRL7, VEC = [0:(C_SDMA_CTRL7_MID_WIDTH-1)]
PORT SDMA_CTRL7_PLB_RNW = PLB_RNW, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_BE = PLB_BE, DIR = I, BUS = SDMA_CTRL7, VEC = [0:((C_SDMA_CTRL7_DWIDTH/8)-1)]
PORT SDMA_CTRL7_PLB_UABus = PLB_UABus, DIR = I, BUS = SDMA_CTRL7, VEC = [0:31]
PORT SDMA_CTRL7_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_abort = PLB_abort, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_busLock = PLB_busLock, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_MSize = PLB_MSize, DIR = I, BUS = SDMA_CTRL7, VEC = [0:1]
PORT SDMA_CTRL7_PLB_size = PLB_size, DIR = I, BUS = SDMA_CTRL7, VEC = [0:3]
PORT SDMA_CTRL7_PLB_type = PLB_type, DIR = I, BUS = SDMA_CTRL7, VEC = [0:2]
PORT SDMA_CTRL7_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SDMA_CTRL7, VEC = [0:1]
PORT SDMA_CTRL7_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SDMA_CTRL7, VEC = [0:1]
PORT SDMA_CTRL7_PLB_reqPri = PLB_reqPri, DIR = I, BUS = SDMA_CTRL7, VEC = [0:1]
PORT SDMA_CTRL7_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SDMA_CTRL7, VEC = [0:15]
PORT SDMA_CTRL7_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SDMA_CTRL7, VEC = [0:(C_SDMA_CTRL7_DWIDTH-1)]
PORT SDMA_CTRL7_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_SSize = Sl_SSize, DIR = O, BUS = SDMA_CTRL7, VEC = [0:1]
PORT SDMA_CTRL7_Sl_wait = Sl_wait, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = SDMA_CTRL7, VEC = [0:(C_SDMA_CTRL7_DWIDTH-1)]
PORT SDMA_CTRL7_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = SDMA_CTRL7, VEC = [0:3]
PORT SDMA_CTRL7_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SDMA_CTRL7
PORT SDMA_CTRL7_Sl_MBusy = Sl_MBusy, DIR = O, BUS = SDMA_CTRL7, VEC = [0:(C_SDMA_CTRL7_NUM_MASTERS-1)]
PORT SDMA_CTRL7_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = SDMA_CTRL7, VEC = [0:(C_SDMA_CTRL7_NUM_MASTERS-1)]
PORT SDMA_CTRL7_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = SDMA_CTRL7, VEC = [0:(C_SDMA_CTRL7_NUM_MASTERS-1)]
PORT SDMA_CTRL7_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = SDMA_CTRL7, VEC = [0:(C_SDMA_CTRL7_NUM_MASTERS-1)]
PORT PIM7_Addr = Addr, DIR = I, BUS = MPMC_PIM7, VEC = [31:0]
PORT PIM7_AddrReq = AddrReq, DIR = I, BUS = MPMC_PIM7
PORT PIM7_AddrAck = AddrAck, DIR = O, BUS = MPMC_PIM7
PORT PIM7_RNW = RNW, DIR = I, BUS = MPMC_PIM7
PORT PIM7_Size = Size, DIR = I, BUS = MPMC_PIM7, VEC = [3:0]
PORT PIM7_RdModWr = RdModWr, DIR = I, BUS = MPMC_PIM7
PORT PIM7_WrFIFO_Data = WrFIFO_Data, DIR = I, BUS = MPMC_PIM7, VEC = [(C_PIM7_DATA_WIDTH-1):0]
PORT PIM7_WrFIFO_BE = WrFIFO_BE, DIR = I, BUS = MPMC_PIM7, VEC = [(C_PIM7_DATA_WIDTH/8-1):0]
PORT PIM7_WrFIFO_Push = WrFIFO_Push, DIR = I, BUS = MPMC_PIM7
PORT PIM7_RdFIFO_Data = RdFIFO_Data, DIR = O, BUS = MPMC_PIM7, VEC = [(C_PIM7_DATA_WIDTH-1):0]
PORT PIM7_RdFIFO_Pop = RdFIFO_Pop, DIR = I, BUS = MPMC_PIM7
PORT PIM7_RdFIFO_RdWdAddr = RdFIFO_RdWdAddr, DIR = O, BUS = MPMC_PIM7, VEC = [3:0]
PORT PIM7_WrFIFO_Empty = WrFIFO_Empty, DIR = O, BUS = MPMC_PIM7
PORT PIM7_WrFIFO_AlmostFull = WrFIFO_AlmostFull, DIR = O, BUS = MPMC_PIM7
PORT PIM7_WrFIFO_Flush = WrFIFO_Flush, DIR = I, BUS = MPMC_PIM7
PORT PIM7_RdFIFO_Empty = RdFIFO_Empty, DIR = O, BUS = MPMC_PIM7
PORT PIM7_RdFIFO_Flush = RdFIFO_Flush, DIR = I, BUS = MPMC_PIM7
PORT PIM7_RdFIFO_Latency = RDFIFO_Latency, DIR = O, BUS = MPMC_PIM7, VEC = [1:0]
PORT PIM7_InitDone = InitDone, DIR = O, BUS = MPMC_PIM7
PORT PPC440MC7_MIMCReadNotWrite = MIMCREADNOTWRITE, DIR = I, BUS = PPC440MC7
PORT PPC440MC7_MIMCAddress = MIMCADDRESS, DIR = I, BUS = PPC440MC7, VEC = [0:35]
PORT PPC440MC7_MIMCAddressValid = MIMCADDRESSVALID, DIR = I, BUS = PPC440MC7
PORT PPC440MC7_MIMCWriteData = MIMCWRITEDATA, DIR = I, BUS = PPC440MC7, VEC = [0:127]
PORT PPC440MC7_MIMCWriteDataValid = MIMCWRITEDATAVALID, DIR = I, BUS = PPC440MC7
PORT PPC440MC7_MIMCByteEnable = MIMCBYTEENABLE, DIR = I, BUS = PPC440MC7, VEC = [0:15]
PORT PPC440MC7_MIMCBankConflict = MIMCBANKCONFLICT, DIR = I, BUS = PPC440MC7
PORT PPC440MC7_MIMCRowConflict = MIMCROWCONFLICT, DIR = I, BUS = PPC440MC7
PORT PPC440MC7_MCMIReadData = MCMIREADDATA, DIR = O, BUS = PPC440MC7, VEC = [0:127]
PORT PPC440MC7_MCMIReadDataValid = MCMIREADDATAVALID, DIR = O, BUS = PPC440MC7
PORT PPC440MC7_MCMIReadDataErr = MCMIREADDATAERR, DIR = O, BUS = PPC440MC7
PORT PPC440MC7_MCMIAddrReadyToAccept = MCMIADDRREADYTOACCEPT, DIR = O, BUS = PPC440MC7
PORT VFBC7_Cmd_Clk = cmd_clk, DIR = I, BUS = VFBC7
PORT VFBC7_Cmd_Reset = cmd_reset, DIR = I, BUS = VFBC7
PORT VFBC7_Cmd_Data = cmd_data, DIR = I, BUS = VFBC7, VEC = [31:0]
PORT VFBC7_Cmd_Write = cmd_write, DIR = I, BUS = VFBC7
PORT VFBC7_Cmd_End = cmd_end, DIR = I, BUS = VFBC7
PORT VFBC7_Cmd_Full = cmd_full, DIR = O, BUS = VFBC7
PORT VFBC7_Cmd_Almost_Full = cmd_almost_full, DIR = O, BUS = VFBC7
PORT VFBC7_Cmd_Idle = cmd_idle, DIR = O, BUS = VFBC7
PORT VFBC7_Wd_Clk = wd_clk, DIR = I, BUS = VFBC7
PORT VFBC7_Wd_Reset = wd_reset, DIR = I, BUS = VFBC7
PORT VFBC7_Wd_Write = wd_write, DIR = I, BUS = VFBC7
PORT VFBC7_Wd_End_Burst = wd_end_burst, DIR = I, BUS = VFBC7
PORT VFBC7_Wd_Flush = wd_flush, DIR = I, BUS = VFBC7
PORT VFBC7_Wd_Data = wd_data, DIR = I, BUS = VFBC7, VEC = [C_VFBC7_RDWD_DATA_WIDTH-1:0]
PORT VFBC7_Wd_Data_BE = wd_data_be, DIR = I, BUS = VFBC7, VEC = [C_VFBC7_RDWD_DATA_WIDTH/8-1:0]
PORT VFBC7_Wd_Full = wd_full, DIR = O, BUS = VFBC7
PORT VFBC7_Wd_Almost_Full = wd_almost_full, DIR = O, BUS = VFBC7
PORT VFBC7_Rd_Clk = rd_clk, DIR = I, BUS = VFBC7
PORT VFBC7_Rd_Reset = rd_reset, DIR = I, BUS = VFBC7
PORT VFBC7_Rd_Read = rd_read, DIR = I, BUS = VFBC7
PORT VFBC7_Rd_End_Burst = rd_end_burst, DIR = I, BUS = VFBC7
PORT VFBC7_Rd_Flush = rd_flush, DIR = I, BUS = VFBC7
PORT VFBC7_Rd_Data = rd_data, DIR = O, BUS = VFBC7, VEC = [C_VFBC7_RDWD_DATA_WIDTH-1:0]
PORT VFBC7_Rd_Empty = rd_empty, DIR = O, BUS = VFBC7
PORT VFBC7_Rd_Almost_Empty = rd_almost_empty, DIR = O, BUS = VFBC7
PORT MCB7_cmd_clk = cmd_clk, DIR = I, BUS = MCB7
PORT MCB7_cmd_en = cmd_en, DIR = I, BUS = MCB7
PORT MCB7_cmd_instr = cmd_instr, DIR = I, BUS = MCB7, VEC = [2:0]
PORT MCB7_cmd_bl = cmd_bl, DIR = I, BUS = MCB7, VEC = [5:0]
PORT MCB7_cmd_byte_addr = cmd_byte_addr, DIR = I, BUS = MCB7, VEC = [29:0]
PORT MCB7_cmd_empty = cmd_empty, DIR = O, BUS = MCB7
PORT MCB7_cmd_full = cmd_full, DIR = O, BUS = MCB7
PORT MCB7_wr_clk = wr_clk, DIR = I, BUS = MCB7
PORT MCB7_wr_en = wr_en, DIR = I, BUS = MCB7
PORT MCB7_wr_mask = wr_mask, DIR = I, BUS = MCB7, VEC = [C_PIM7_DATA_WIDTH/8-1:0]
PORT MCB7_wr_data = wr_data, DIR = I, BUS = MCB7, VEC = [C_PIM7_DATA_WIDTH-1:0]
PORT MCB7_wr_full = wr_full, DIR = O, BUS = MCB7
PORT MCB7_wr_empty = wr_empty, DIR = O, BUS = MCB7
PORT MCB7_wr_count = wr_count, DIR = O, BUS = MCB7, VEC = [6:0]
PORT MCB7_wr_underrun = wr_underrun, DIR = O, BUS = MCB7
PORT MCB7_wr_error = wr_error, DIR = O, BUS = MCB7
PORT MCB7_rd_clk = rd_clk, DIR = I, BUS = MCB7
PORT MCB7_rd_en = rd_en, DIR = I, BUS = MCB7
PORT MCB7_rd_data = rd_data, DIR = O, BUS = MCB7, VEC = [C_PIM7_DATA_WIDTH-1:0]
PORT MCB7_rd_full = rd_full, DIR = O, BUS = MCB7
PORT MCB7_rd_empty = rd_empty, DIR = O, BUS = MCB7
PORT MCB7_rd_count = rd_count, DIR = O, BUS = MCB7, VEC = [6:0]
PORT MCB7_rd_overflow = rd_overflow, DIR = O, BUS = MCB7
PORT MCB7_rd_error = rd_error, DIR = O, BUS = MCB7
PORT MPMC_CTRL_Clk = "", DIR = I, BUS = MPMC_CTRL, SIGIS = CLK, INITIALVAL = VCC
PORT MPMC_CTRL_Rst = SPLB_Rst, DIR = I, BUS = MPMC_CTRL, SIGIS = RST
PORT MPMC_CTRL_PLB_ABus = PLB_ABus, DIR = I, BUS = MPMC_CTRL, VEC = [0:31]
PORT MPMC_CTRL_PLB_PAValid = PLB_PAValid, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_SAValid = PLB_SAValid, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_masterID = PLB_masterID, DIR = I, BUS = MPMC_CTRL, VEC = [0:(C_MPMC_CTRL_MID_WIDTH-1)]
PORT MPMC_CTRL_PLB_RNW = PLB_RNW, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_BE = PLB_BE, DIR = I, BUS = MPMC_CTRL, VEC = [0:((C_MPMC_CTRL_DWIDTH/8)-1)]
PORT MPMC_CTRL_PLB_UABus = PLB_UABus, DIR = I, BUS = MPMC_CTRL, VEC = [0:31]
PORT MPMC_CTRL_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_abort = PLB_abort, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_busLock = PLB_busLock, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_MSize = PLB_MSize, DIR = I, BUS = MPMC_CTRL, VEC = [0:1]
PORT MPMC_CTRL_PLB_size = PLB_size, DIR = I, BUS = MPMC_CTRL, VEC = [0:3]
PORT MPMC_CTRL_PLB_type = PLB_type, DIR = I, BUS = MPMC_CTRL, VEC = [0:2]
PORT MPMC_CTRL_PLB_lockErr = PLB_lockErr, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = MPMC_CTRL, VEC = [0:1]
PORT MPMC_CTRL_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = MPMC_CTRL, VEC = [0:1]
PORT MPMC_CTRL_PLB_reqPri = PLB_reqPri, DIR = I, BUS = MPMC_CTRL, VEC = [0:1]
PORT MPMC_CTRL_PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = MPMC_CTRL, VEC = [0:15]
PORT MPMC_CTRL_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = MPMC_CTRL
PORT MPMC_CTRL_PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = MPMC_CTRL, VEC = [0:(C_MPMC_CTRL_DWIDTH-1)]
PORT MPMC_CTRL_Sl_addrAck = Sl_addrAck, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_SSize = Sl_SSize, DIR = O, BUS = MPMC_CTRL, VEC = [0:1]
PORT MPMC_CTRL_Sl_wait = Sl_wait, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_wrComp = Sl_wrComp, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_rdDBus = Sl_rdDBus, DIR = O, BUS = MPMC_CTRL, VEC = [0:(C_MPMC_CTRL_DWIDTH-1)]
PORT MPMC_CTRL_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, BUS = MPMC_CTRL, VEC = [0:3]
PORT MPMC_CTRL_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_rdComp = Sl_rdComp, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = MPMC_CTRL
PORT MPMC_CTRL_Sl_MBusy = Sl_MBusy, DIR = O, BUS = MPMC_CTRL, VEC = [0:(C_MPMC_CTRL_NUM_MASTERS-1)]
PORT MPMC_CTRL_Sl_MRdErr = Sl_MRdErr, DIR = O, BUS = MPMC_CTRL, VEC = [0:(C_MPMC_CTRL_NUM_MASTERS-1)]
PORT MPMC_CTRL_Sl_MWrErr = Sl_MWrErr, DIR = O, BUS = MPMC_CTRL, VEC = [0:(C_MPMC_CTRL_NUM_MASTERS-1)]
PORT MPMC_CTRL_Sl_MIRQ = Sl_MIRQ, DIR = O, BUS = MPMC_CTRL, VEC = [0:(C_MPMC_CTRL_NUM_MASTERS-1)]
PORT MPMC_Clk0 = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ASSIGNMENT = REQUIRE
PORT MPMC_Clk0_DIV2 = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_MIG_V5_PHY && [xstrncmp C_MEM_TYPE  DDR2 ]), ASSIGNMENT = REQUIRE
PORT MPMC_Clk90 = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ASSIGNMENT = REQUIRE, ISVALID = (!C_USE_MCB_S6_PHY && !C_USE_MIG_V6_PHY && ([xstrncmp C_MEM_TYPE  DDR ] || [xstrncmp C_MEM_TYPE  DDR2 ] || C_DEBUG_REG_ENABLE))
PORT MPMC_Clk_200MHz = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = ((C_USE_MIG_V4_PHY || C_USE_MIG_V5_PHY|| C_USE_MIG_V6_PHY) && C_NUM_IDELAYCTRL > 0), ASSIGNMENT = REQUIRE
PORT MPMC_Rst = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE
PORT MPMC_Clk_Mem = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_STATIC_PHY || C_USE_MIG_V6_PHY), ASSIGNMENT = REQUIRE
PORT MPMC_Clk_Mem_2x = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE
PORT MPMC_Clk_Mem_2x_180 = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE
PORT MPMC_Clk_Mem_2x_CE0 = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_MCB_S6_PHY && C_MCB_USE_EXTERNAL_BUFPLL), ASSIGNMENT = REQUIRE
PORT MPMC_Clk_Mem_2x_CE90 = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_MCB_S6_PHY && C_MCB_USE_EXTERNAL_BUFPLL), ASSIGNMENT = REQUIRE
PORT MPMC_Clk_Rd_Base = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_MIG_V6_PHY), ASSIGNMENT = REQUIRE
PORT MPMC_Clk_Mem_2x_bufpll_o = "", DIR = O, SIGIS = CLK, CLK_INPORT = MPMC_Clk_Mem_2x, ISVALID = (C_USE_MCB_S6_PHY && C_MCB_USE_EXTERNAL_BUFPLL == 0)
PORT MPMC_Clk_Mem_2x_180_bufpll_o = "", DIR = O, SIGIS = CLK, CLK_INPORT = MPMC_Clk_Mem_2x_180, ISVALID = (C_USE_MCB_S6_PHY && C_MCB_USE_EXTERNAL_BUFPLL == 0)
PORT MPMC_Clk_Mem_2x_CE0_bufpll_o = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_MCB_S6_PHY && C_MCB_USE_EXTERNAL_BUFPLL == 0)
PORT MPMC_Clk_Mem_2x_CE90_bufpll_o = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_MCB_S6_PHY && C_MCB_USE_EXTERNAL_BUFPLL == 0)
PORT MPMC_PLL_Lock_bufpll_o = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY && C_MCB_USE_EXTERNAL_BUFPLL == 0)
PORT MPMC_PLL_Lock = "", DIR = I, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE
PORT MPMC_Idelayctrl_Rdy_I = "", DIR = I, INITIALVAL = VCC, ISVALID = (C_USE_MIG_V4_PHY || C_USE_MIG_V5_PHY || C_USE_MIG_V6_PHY)
PORT MPMC_Idelayctrl_Rdy_O = "", DIR = O, ISVALID = (C_USE_MIG_V4_PHY || C_USE_MIG_V5_PHY || C_USE_MIG_V6_PHY)
PORT MPMC_InitDone = "", DIR = O
PORT MPMC_ECC_Intr = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_INCLUDE_ECC_SUPPORT)
PORT MPMC_DCM_PSEN = "", DIR = O, ISVALID = (C_USE_STATIC_PHY || C_USE_MIG_V6_PHY)
PORT MPMC_DCM_PSINCDEC = "", DIR = O, ISVALID = (C_USE_STATIC_PHY || C_USE_MIG_V6_PHY)
PORT MPMC_DCM_PSDONE = "", DIR = I, ISVALID = (C_USE_STATIC_PHY || C_USE_MIG_V6_PHY)
PORT MPMC_MCB_DRP_Clk = "", DIR = I, SIGIS = CLK, INITIALVAL = VCC, ISVALID = (C_USE_MCB_S6_PHY)
PORT SDRAM_Clk = "", DIR = O, VEC = [C_MEM_CLK_WIDTH-1:0], SIGIS = CLK, ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_CLK
PORT SDRAM_CE = "", DIR = O, VEC = [C_MEM_CE_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_CLK_ENABLE
PORT SDRAM_CS_n = "", DIR = O, VEC = [C_MEM_CS_N_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_CHIP_SELECT
PORT SDRAM_RAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_ROW_ADDR_SELECT
PORT SDRAM_CAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_COL_ADDR_SELECT
PORT SDRAM_WE_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_WRITE_ENABLE
PORT SDRAM_BankAddr = "", DIR = O, VEC = [C_MEM_BANKADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_BANKADDR
PORT SDRAM_Addr = "", DIR = O, VEC = [C_MEM_ADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_ADDRESS
PORT SDRAM_DQ = "", DIR = IO, VEC = [C_ECC_DATA_WIDTH  + C_MEM_DATA_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_DATA
PORT SDRAM_DM = "", DIR = O, VEC = [C_ECC_DM_WIDTH    + C_MEM_DM_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  SDRAM ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = SDRAM_DATA_MASK
PORT DDR_Clk = "", DIR = O, VEC = [C_MEM_CLK_WIDTH-1:0], SIGIS = CLK, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_Clk
PORT DDR_Clk_n = "", DIR = O, VEC = [C_MEM_CLK_WIDTH-1:0], SIGIS = CLK, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_Clk_n
PORT DDR_CE = "", DIR = O, VEC = [C_MEM_CE_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_CLOCK_ENABLE
PORT DDR_CS_n = "", DIR = O, VEC = [C_MEM_CS_N_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_CHIP_SELECT
PORT DDR_RAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_ROW_ADDR_SELECT
PORT DDR_CAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_COL_ADDR_SELECT
PORT DDR_WE_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_WRITE_ENABLE
PORT DDR_BankAddr = "", DIR = O, VEC = [C_MEM_BANKADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_BANKADDR
PORT DDR_Addr = "", DIR = O, VEC = [C_MEM_ADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_ADDRESS
PORT DDR_DQ = "", DIR = IO, VEC = [C_ECC_DATA_WIDTH  + C_MEM_DATA_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_DATA
PORT DDR_DM = "", DIR = O, VEC = [C_ECC_DM_WIDTH    + C_MEM_DM_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_DATA_MASK
PORT DDR_DQS = "", DIR = IO, VEC = [C_ECC_DQS_WIDTH   + C_MEM_DQS_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_DATA_STROBE
PORT DDR_DQS_Div_O = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && C_USE_MIG_S3_PHY), IO_IF = memory_0, IO_IS = DDR_DQS_DIV_O, ASSIGNMENT = REQUIRE
PORT DDR_DQS_Div_I = "", DIR = I, ISVALID = ([xstrncmp C_MEM_TYPE  DDR ] && C_USE_MIG_S3_PHY), IO_IF = memory_0, IO_IS = DDR_DQS_DIV_I, ASSIGNMENT = REQUIRE
PORT DDR2_Clk = "", DIR = O, VEC = [C_MEM_CLK_WIDTH-1:0], SIGIS = CLK, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_Clk
PORT DDR2_Clk_n = "", DIR = O, VEC = [C_MEM_CLK_WIDTH-1:0], SIGIS = CLK, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_Clk_n
PORT DDR2_CE = "", DIR = O, VEC = [C_MEM_CE_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_CLK_ENABLE
PORT DDR2_CS_n = "", DIR = O, VEC = [C_MEM_CS_N_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_CHIP_SELECT
PORT DDR2_ODT = "", DIR = O, VEC = [C_MEM_ODT_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_ODT
PORT DDR2_RAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_ROW_ADDR_SELECT
PORT DDR2_CAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_COL_ADDR_SELECT
PORT DDR2_WE_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_WRITE_ENABLE
PORT DDR2_BankAddr = "", DIR = O, VEC = [C_MEM_BANKADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_BANKADDR
PORT DDR2_Addr = "", DIR = O, VEC = [C_MEM_ADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_ADDRESS
PORT DDR2_DQ = "", DIR = IO, VEC = [C_ECC_DATA_WIDTH  + C_MEM_DATA_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_DATA
PORT DDR2_DM = "", DIR = O, VEC = [C_ECC_DM_WIDTH    + C_MEM_DM_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_DATA_MASK
PORT DDR2_DQS = "", DIR = IO, VEC = [C_ECC_DQS_WIDTH   + C_MEM_DQS_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_DATA_STROBE
PORT DDR2_DQS_n = "", DIR = IO, VEC = [C_ECC_DQS_WIDTH   + C_MEM_DQS_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && !C_USE_MCB_S6_PHY && C_DDR2_DQSN_ENABLE), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR2_DATA_STROBE_N
PORT DDR2_DQS_Div_O = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && C_USE_MIG_S3_PHY), IO_IF = memory_0, IO_IS = DDR2_DQS_DIV_O, ASSIGNMENT = REQUIRE
PORT DDR2_DQS_Div_I = "", DIR = I, ISVALID = ([xstrncmp C_MEM_TYPE  DDR2 ] && C_USE_MIG_S3_PHY), IO_IF = memory_0, IO_IS = DDR2_DQS_DIV_I, ASSIGNMENT = REQUIRE
PORT DDR3_Clk = "", DIR = O, VEC = [C_MEM_CLK_WIDTH-1:0], SIGIS = CLK, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_Clk
PORT DDR3_Clk_n = "", DIR = O, VEC = [C_MEM_CLK_WIDTH-1:0], SIGIS = CLK, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_Clk_n
PORT DDR3_CE = "", DIR = O, VEC = [C_MEM_CE_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_CLK_ENABLE
PORT DDR3_CS_n = "", DIR = O, VEC = [C_MEM_CS_N_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_CHIP_SELECT
PORT DDR3_ODT = "", DIR = O, VEC = [C_MEM_ODT_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_ODT
PORT DDR3_RAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_ROW_ADDR_SELECT
PORT DDR3_CAS_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_COL_ADDR_SELECT
PORT DDR3_WE_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_WRITE_ENABLE
PORT DDR3_BankAddr = "", DIR = O, VEC = [C_MEM_BANKADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_BANKADDR
PORT DDR3_Addr = "", DIR = O, VEC = [C_MEM_ADDR_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_ADDRESS
PORT DDR3_DQ = "", DIR = IO, VEC = [C_ECC_DATA_WIDTH  + C_MEM_DATA_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_DATA
PORT DDR3_DM = "", DIR = O, VEC = [C_ECC_DM_WIDTH    + C_MEM_DM_WIDTH-1:0], ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_DATA_MASK
PORT DDR3_Reset_n = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_RESET_N
PORT DDR3_DQS = "", DIR = IO, VEC = [C_ECC_DQS_WIDTH   + C_MEM_DQS_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_DATA_STROBE
PORT DDR3_DQS_n = "", DIR = IO, VEC = [C_ECC_DQS_WIDTH   + C_MEM_DQS_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ] && !C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR3_DATA_STROBE_N
PORT mcbx_dram_addr = "", DIR = O, VEC = [C_MEM_ADDR_WIDTH-1:0], ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_ADDRESS
PORT mcbx_dram_ba = "", DIR = O, VEC = [C_MEM_BANKADDR_WIDTH-1:0], ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_BANKADDR
PORT mcbx_dram_ras_n = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_ROW_ADDR_SELECT
PORT mcbx_dram_cas_n = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_COL_ADDR_SELECT
PORT mcbx_dram_we_n = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_WRITE_ENABLE
PORT mcbx_dram_cke = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_CLK_ENABLE
PORT mcbx_dram_clk = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_CLK
PORT mcbx_dram_clk_n = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_CLK_N
PORT mcbx_dram_dq = "", DIR = IO, VEC = [C_MEM_DATA_WIDTH-1:0], THREE_STATE = FALSE, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_DQ
PORT mcbx_dram_dqs = "", DIR = IO, THREE_STATE = FALSE, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_DQS
PORT mcbx_dram_dqs_n = "", DIR = IO, THREE_STATE = FALSE, ISVALID = (C_USE_MCB_S6_PHY && ([xstrncmp C_MEM_TYPE  DDR3 ] || ([xstrncmp C_MEM_TYPE  DDR2 ] && C_DDR2_DQSN_ENABLE))), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_DQS_N
PORT mcbx_dram_udqs = "", DIR = IO, THREE_STATE = FALSE, ISVALID = (C_USE_MCB_S6_PHY && (C_MEM_DATA_WIDTH > 8)), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_UDQS
PORT mcbx_dram_udqs_n = "", DIR = IO, THREE_STATE = FALSE, ISVALID = (C_USE_MCB_S6_PHY && (C_MEM_DATA_WIDTH > 8) && ([xstrncmp C_MEM_TYPE  DDR3 ] || ([xstrncmp C_MEM_TYPE  DDR2 ] && C_DDR2_DQSN_ENABLE))), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_UDQS_N
PORT mcbx_dram_udm = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY && (C_MEM_DATA_WIDTH > 8)), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_UDM
PORT mcbx_dram_ldm = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_LDM
PORT mcbx_dram_odt = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY && ([xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ])), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_ODT
PORT mcbx_dram_ddr3_rst = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY && [xstrncmp C_MEM_TYPE  DDR3 ]), IO_IF = memory_0, IO_IS = MCB_Rst
PORT selfrefresh_enter = "", DIR = I, INITIALVAL = GND, ISVALID = (C_USE_MCB_S6_PHY)
PORT selfrefresh_mode = "", DIR = O, ISVALID = (C_USE_MCB_S6_PHY)
PORT calib_recal = "", DIR = I, INITIALVAL = GND, ISVALID = (C_USE_MCB_S6_PHY)
PORT rzq = "", DIR = IO, THREE_STATE = FALSE, ISVALID = (C_USE_MCB_S6_PHY), IO_IF = memory_0, IO_IS = rzq
PORT zio = "", DIR = IO, THREE_STATE = FALSE, ISVALID = (C_USE_MCB_S6_PHY), IO_IF = memory_0, IO_IS = zio

END
