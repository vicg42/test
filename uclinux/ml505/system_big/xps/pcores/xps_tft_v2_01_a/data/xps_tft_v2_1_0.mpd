#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : xps_tft
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN xps_tft

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION RUN_NGCBUILD = TRUE
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
OPTION ADDITIONAL_OUTPUTS = CONSTRAINTS
OPTION DESC = XPS TFT
OPTION LONG_DESC = XPS TFT
OPTION IP_GROUP = IO Modules:MICROBLAZE:PPC
OPTION DATASHEET_NAME = xps_tft
OPTION ARCH_SUPPORT_MAP = (aspartan3=PRODUCTION, spartan3=PRODUCTION, spartan3an=PRODUCTION, spartan3a=PRODUCTION, spartan3e=PRODUCTION, spartan3adsp=PRODUCTION, virtex4lx=PRODUCTION, virtex4sx=PRODUCTION, virtex4fx=PRODUCTION, virtex5lx=PRODUCTION, virtex5sx=PRODUCTION, virtex5fx=PRODUCTION, aspartan3e=PRODUCTION, aspartan3a=PRODUCTION, aspartan3adsp=PRODUCTION, qvirtex4lx=PRODUCTION, qvirtex4sx=PRODUCTION, qvirtex4fx=PRODUCTION, qrvirtex4lx=PRODUCTION, qrvirtex4sx=PRODUCTION, qrvirtex4fx=PRODUCTION, spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qrvirtex5=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION)
OPTION STYLE = HDL

IO_INTERFACE IO_IF = tft_0, IO_TYPE = XIL_TFT_V1

## Bus Interfaces
BUS_INTERFACE BUS = MPLB, BUS_TYPE = MASTER, BUS_STD = PLBV46, GENERATE_BURSTS = TRUE, UNKNOWN = REQUIRE
BUS_INTERFACE BUS = SPLB, BUS_TYPE = SLAVE, BUS_STD = PLBV46, ISVALID = (C_DCR_SPLB_SLAVE_IF==1), UNKNOWN = REQUIRE
BUS_INTERFACE BUS = SDCR, BUS_TYPE = SLAVE, BUS_STD = DCR, ISVALID = (C_DCR_SPLB_SLAVE_IF==0), UNKNOWN = REQUIRE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_DCR_SPLB_SLAVE_IF = 1, DT = INTEGER, BUS = SPLB, RANGE = (0, 1), ASSIGNMENT = REQUIRE
PARAMETER C_TFT_INTERFACE = 1, DT = INTEGER, RANGE = (0, 1), ASSIGNMENT = REQUIRE
PARAMETER C_I2C_SLAVE_ADDR = 0b1110110, DT = std_logic_vector, ADDRESS = NONE, ISVALID = (C_TFT_INTERFACE==1), ASSIGNMENT = REQUIRE
PARAMETER C_DEFAULT_TFT_BASE_ADDR = 0xf0000000, DT = std_logic_vector, ADDRESS = NONE, ASSIGNMENT = REQUIRE
PARAMETER C_DCR_BASEADDR = 0b1111111111, DT = std_logic_vector, BUS = SDCR, ADDRESS = BASE, PAIR = C_DCR_HIGHADDR, MIN_SIZE = 4, ISVALID = (C_DCR_SPLB_SLAVE_IF==0), ASSIGNMENT = REQUIRE
PARAMETER C_DCR_HIGHADDR = 0b0000000000, DT = std_logic_vector, BUS = SDCR, ADDRESS = HIGH, PAIR = C_DCR_BASEADDR, ISVALID = (C_DCR_SPLB_SLAVE_IF==0), ASSIGNMENT = REQUIRE
PARAMETER C_MPLB_AWIDTH = 32, DT = INTEGER, BUS = MPLB, ASSIGNMENT = CONSTANT
PARAMETER C_MPLB_DWIDTH = 64, DT = INTEGER, BUS = MPLB, RANGE = (64, 128)
PARAMETER C_MPLB_NATIVE_DWIDTH = 64, DT = INTEGER, BUS = MPLB, ASSIGNMENT = CONSTANT
PARAMETER C_MPLB_SMALLEST_SLAVE = 32, DT = INTEGER, BUS = MPLB, RANGE = (32, 64, 128)
PARAMETER C_SPLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_DWIDTH = 32, DT = INTEGER, BUS = SPLB, RANGE = (32, 64, 128)
PARAMETER C_SPLB_P2P = 0, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB, RANGE = (0:4)
PARAMETER C_SPLB_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB, RANGE = (0:16)
PARAMETER C_SPLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB, ADDRESS = BASE, PAIR = C_SPLB_HIGHADDR, MIN_SIZE = 0x10, ISVALID = (C_DCR_SPLB_SLAVE_IF==1), ASSIGNMENT = REQUIRE
PARAMETER C_SPLB_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB, ADDRESS = HIGH, PAIR = C_SPLB_BASEADDR, ISVALID = (C_DCR_SPLB_SLAVE_IF==1), ASSIGNMENT = REQUIRE

## Ports
PORT SPLB_Clk = "", DIR = I, SIGIS = CLK, BUS = SPLB
PORT SPLB_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = SPLB
PORT MPLB_Clk = "", DIR = I, SIGIS = CLK, BUS = MPLB
PORT MPLB_Rst = MPLB_Rst, DIR = I, SIGIS = RST, BUS = MPLB
PORT MD_error = "", DIR = O
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = EDGE_RISING
PORT M_request = M_request, DIR = O, BUS = MPLB
PORT M_priority = M_priority, DIR = O, VEC = [0:1], BUS = MPLB
PORT M_busLock = M_busLock, DIR = O, BUS = MPLB
PORT M_RNW = M_RNW, DIR = O, BUS = MPLB
PORT M_BE = M_BE, DIR = O, VEC = [0:((C_MPLB_DWIDTH/8)-1)], BUS = MPLB
PORT M_MSize = M_MSize, DIR = O, VEC = [0:1], BUS = MPLB
PORT M_size = M_size, DIR = O, VEC = [0:3], BUS = MPLB
PORT M_type = M_type, DIR = O, VEC = [0:2], BUS = MPLB
PORT M_ABus = M_ABus, DIR = O, VEC = [0:31], BUS = MPLB
PORT M_wrBurst = M_wrBurst, DIR = O, BUS = MPLB
PORT M_rdBurst = M_rdBurst, DIR = O, BUS = MPLB
PORT M_wrDBus = M_wrDBus, DIR = O, VEC = [0:(C_MPLB_DWIDTH-1)], BUS = MPLB
PORT PLB_MSSize = PLB_MSSize, DIR = I, VEC = [0:1], BUS = MPLB
PORT PLB_MAddrAck = PLB_MAddrAck, DIR = I, BUS = MPLB
PORT PLB_MRearbitrate = PLB_MRearbitrate, DIR = I, BUS = MPLB
PORT PLB_MTimeout = PLB_MTimeout, DIR = I, BUS = MPLB
PORT PLB_MRdErr = PLB_MRdErr, DIR = I, BUS = MPLB
PORT PLB_MWrErr = PLB_MWrErr, DIR = I, BUS = MPLB
PORT PLB_MRdDBus = PLB_MRdDBus, DIR = I, VEC = [0:(C_MPLB_DWIDTH-1)], BUS = MPLB
PORT PLB_MRdDAck = PLB_MRdDAck, DIR = I, BUS = MPLB
PORT PLB_MWrDAck = PLB_MWrDAck, DIR = I, BUS = MPLB
PORT PLB_MRdBTerm = PLB_MRdBTerm, DIR = I, BUS = MPLB
PORT PLB_MWrBTerm = PLB_MWrBTerm, DIR = I, BUS = MPLB
PORT M_TAttribute = M_TAttribute, DIR = O, VEC = [0:15], BUS = MPLB
PORT M_lockErr = M_lockErr, DIR = O, BUS = MPLB
PORT M_abort = M_abort, DIR = O, BUS = MPLB
PORT M_UABus = M_UABus, DIR = O, VEC = [0:31], BUS = MPLB
PORT PLB_MBusy = PLB_MBusy, DIR = I, BUS = MPLB
PORT PLB_MIRQ = PLB_MIRQ, DIR = I, BUS = MPLB
PORT PLB_MRdWdAddr = PLB_MRdWdAddr, DIR = I, VEC = [0:3], BUS = MPLB
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_SPLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT PLB_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT DCR_Clk = "", DIR = I, SIGIS = CLK, ISVALID = (C_DCR_SPLB_SLAVE_IF==0), ASSIGNMENT = REQUIRE
PORT DCR_Rst = "", DIR = I, SIGIS = RST, ISVALID = (C_DCR_SPLB_SLAVE_IF==0), ASSIGNMENT = REQUIRE
PORT DCR_Read = DCR_Read, DIR = I, BUS = SDCR
PORT DCR_Write = DCR_Write, DIR = I, BUS = SDCR
PORT DCR_ABus = DCR_ABus, DIR = I, VEC = [0:9], BUS = SDCR
PORT DCR_Sl_DBus = DCR_Sl_DBus, DIR = I, VEC = [0:31], BUS = SDCR
PORT Sl_DCRDBus = Sl_dcrDBus, DIR = O, VEC = [0:31], BUS = SDCR
PORT Sl_DCRAck = Sl_dcrAck, DIR = O, BUS = SDCR
PORT SYS_TFT_Clk = "", DIR = I, SIGIS = CLK
PORT TFT_HSYNC = "", DIR = O, DESC = 'TFT Horizontal Sync', IO_IF = tft_0, IO_IS = tft_hsync
PORT TFT_VSYNC = "", DIR = O, DESC = 'TFT Verical Sync', IO_IF = tft_0, IO_IS = tft_vsync
PORT TFT_DE = "", DIR = O, DESC = 'TFT Data Enable Sync', IO_IF = tft_0, IO_IS = tft_de
PORT TFT_DPS = "", DIR = O, DESC = 'TFT Display scan method', IO_IF = tft_0, IO_IS = tft_dps
PORT TFT_VGA_CLK = "", DIR = O, DESC = 'TFT VGA clock output', IO_IF = tft_0, IO_IS = tft_vga_clk
PORT TFT_VGA_R = "", DIR = O, VEC = [5:0], ISVALID = (C_TFT_INTERFACE==0), DESC = 'TFT VGA RED data', IO_IF = tft_0, IO_IS = tft_vga_r
PORT TFT_VGA_G = "", DIR = O, VEC = [5:0], ISVALID = (C_TFT_INTERFACE==0), DESC = 'TFT VGA GREEN data', IO_IF = tft_0, IO_IS = tft_vga_g
PORT TFT_VGA_B = "", DIR = O, VEC = [5:0], ISVALID = (C_TFT_INTERFACE==0), DESC = 'TFT VGA BLUE data', IO_IF = tft_0, IO_IS = tft_vga_b
PORT TFT_DVI_CLK_P = "", DIR = O, ISVALID = (C_TFT_INTERFACE==1), DESC = 'TFT DVI Clock', IO_IF = tft_0, IO_IS = tft_dvi_clk
PORT TFT_DVI_CLK_N = "", DIR = O, ISVALID = (C_TFT_INTERFACE==1), DESC = 'TFT DVI Clock', IO_IF = tft_0, IO_IS = tft_dvi_clk
PORT TFT_DVI_DATA = "", DIR = O, VEC = [11:0], ISVALID = (C_TFT_INTERFACE==1), DESC = 'TFT DVI data', IO_IF = tft_0, IO_IS = tft_dvi_data
PORT TFT_IIC_SCL_I = "", DIR = I
PORT TFT_IIC_SCL_O = "", DIR = O
PORT TFT_IIC_SCL_T = "", DIR = O
PORT TFT_IIC_SDA_I = "", DIR = I
PORT TFT_IIC_SDA_O = "", DIR = O
PORT TFT_IIC_SDA_T = "", DIR = O
PORT TFT_IIC_SCL = "", DIR = IO, THREE_STATE = TRUE, TRI_I = TFT_IIC_SCL_I, TRI_O = TFT_IIC_SCL_O, TRI_T = TFT_IIC_SCL_T, ISVALID = (C_TFT_INTERFACE==1), DESC = 'Chrontel I2C Clock', IO_IF = tft_0, IO_IS = tft_i2c_clk
PORT TFT_IIC_SDA = "", DIR = IO, THREE_STATE = TRUE, TRI_I = TFT_IIC_SDA_I, TRI_O = TFT_IIC_SDA_O, TRI_T = TFT_IIC_SDA_T, ISVALID = (C_TFT_INTERFACE==1), DESC = 'Chrontel I2C Data', IO_IF = tft_0, IO_IS = tft_i2c_data

END
