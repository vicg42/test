#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : xps_mch_emc
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN xps_mch_emc

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION USAGE_LEVEL = BASE_USER
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION DESC = XPS Multi-Channel External Memory Controller(SRAM/Flash)
OPTION LONG_DESC = Xilinx Multi-CHannel (MCH) PLBV46 external memory controller
OPTION IP_GROUP = Memory and Memory Controller:MICROBLAZE:PPC
OPTION DATASHEET_NAME = xps_mch_emc
OPTION ARCH_SUPPORT_MAP = (aspartan3=PRODUCTION, spartan3=PRODUCTION, spartan3an=PRODUCTION, spartan3a=PRODUCTION, spartan3e=PRODUCTION, spartan3adsp=PRODUCTION, virtex4lx=PRODUCTION, virtex4sx=PRODUCTION, virtex4fx=PRODUCTION, virtex5lx=PRODUCTION, virtex5sx=PRODUCTION, virtex5fx=PRODUCTION, aspartan3e=PRODUCTION, aspartan3a=PRODUCTION, aspartan3adsp=PRODUCTION, qvirtex4lx=PRODUCTION, qvirtex4sx=PRODUCTION, qvirtex4fx=PRODUCTION, qrvirtex4lx=PRODUCTION, qrvirtex4sx=PRODUCTION, qrvirtex4fx=PRODUCTION, spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qrvirtex5=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION)
OPTION RUN_NGCBUILD = FALSE
OPTION STYLE = HDL

IO_INTERFACE IO_IF = emc_0, IO_TYPE = XIL_EMC_V1

## Bus Interfaces
BUS_INTERFACE BUS = SPLB, BUS_TYPE = SLAVE, BUS_STD = PLBV46, ISVALID = (C_INCLUDE_PLB_IPIF==1)
BUS_INTERFACE BUS = MCH0, BUS_TYPE = TARGET, BUS_STD = XIL_MEMORY_CHANNEL, ISVALID = (C_NUM_CHANNELS>=1)
BUS_INTERFACE BUS = MCH1, BUS_TYPE = TARGET, BUS_STD = XIL_MEMORY_CHANNEL, ISVALID = (C_NUM_CHANNELS>=2)
BUS_INTERFACE BUS = MCH2, BUS_TYPE = TARGET, BUS_STD = XIL_MEMORY_CHANNEL, ISVALID = (C_NUM_CHANNELS>=3)
BUS_INTERFACE BUS = MCH3, BUS_TYPE = TARGET, BUS_STD = XIL_MEMORY_CHANNEL, ISVALID = (C_NUM_CHANNELS>=4)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = virtex5, DT = STRING
PARAMETER C_NUM_BANKS_MEM = 1, DT = INTEGER, RANGE = (1:4), IO_IF = emc_0, IO_IS = C_NUM_BANKS_MEM
PARAMETER C_NUM_CHANNELS = 2, DT = INTEGER, RANGE = (0:4)
PARAMETER C_PRIORITY_MODE = 0, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_INCLUDE_PLB_IPIF = 1, DT = INTEGER, BUS = SPLB, RANGE = (0,1)
PARAMETER C_INCLUDE_WRBUF = 1, DT = INTEGER, RANGE = (0,1)
PARAMETER C_SPLB_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB
PARAMETER C_SPLB_P2P = 0, DT = INTEGER, BUS = SPLB, RANGE = (0,1)
PARAMETER C_SPLB_DWIDTH = 32, DT = INTEGER, BUS = SPLB
PARAMETER C_MCH_SPLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB_SMALLEST_MASTER = 32, DT = INTEGER, BUS = SPLB
PARAMETER C_MCH_NATIVE_DWIDTH = 32, DT = INTEGER, RANGE = (32,64)
PARAMETER C_MCH_SPLB_CLK_PERIOD_PS = 10000, DT = INTEGER, BUS = SPLB, IO_IS = clk_freq
PARAMETER C_MEM0_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = BASE, PAIR = C_MEM0_HIGHADDR, IO_IS = C_MEM0_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=1), ASSIGNMENT = REQUIRE
PARAMETER C_MEM0_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = HIGH, PAIR = C_MEM0_BASEADDR, IO_IS = C_MEM0_HIGHADDR, PERMIT = BASE_USER, ISVALID = (C_NUM_BANKS_MEM>=1), ASSIGNMENT = REQUIRE
PARAMETER C_MEM1_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = BASE, PAIR = C_MEM1_HIGHADDR, IO_IS = C_MEM1_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=2), ASSIGNMENT = REQUIRE
PARAMETER C_MEM1_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = HIGH, PAIR = C_MEM1_BASEADDR, IO_IS = C_MEM1_HIGHADDR, ISVALID = (C_NUM_BANKS_MEM>=2), ASSIGNMENT = REQUIRE
PARAMETER C_MEM2_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = BASE, PAIR = C_MEM2_HIGHADDR, IO_IS = C_MEM2_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=3), ASSIGNMENT = REQUIRE
PARAMETER C_MEM2_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = HIGH, PAIR = C_MEM2_BASEADDR, IO_IS = C_MEM2_HIGHADDR, ISVALID = (C_NUM_BANKS_MEM>=3), ASSIGNMENT = REQUIRE
PARAMETER C_MEM3_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = BASE, PAIR = C_MEM3_HIGHADDR, IO_IS = C_MEM3_BASEADDR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = (C_NUM_BANKS_MEM>=4), ASSIGNMENT = REQUIRE
PARAMETER C_MEM3_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB:MCH0:MCH1:MCH2:MCH3, ADDRESS = HIGH, PAIR = C_MEM3_BASEADDR, IO_IS = C_MEM3_HIGHADDR, ISVALID = (C_NUM_BANKS_MEM>=4), ASSIGNMENT = REQUIRE
PARAMETER C_PAGEMODE_FLASH_0 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_PAGEMODE_FLASH_0
PARAMETER C_PAGEMODE_FLASH_1 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_PAGEMODE_FLASH_1
PARAMETER C_PAGEMODE_FLASH_2 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_PAGEMODE_FLASH_2
PARAMETER C_PAGEMODE_FLASH_3 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_PAGEMODE_FLASH_3
PARAMETER C_INCLUDE_NEGEDGE_IOREGS = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_INCLUDE_NEGEDGE_IOREGS
PARAMETER C_MEM0_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), PERMIT = BASE_USER, DESC = Data Width, IO_IF = emc_0, IO_IS = C_MEM0_WIDTH
PARAMETER C_MEM1_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), DESC = Bank 1 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM1_WIDTH
PARAMETER C_MEM2_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), DESC = Bank 2 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM2_WIDTH
PARAMETER C_MEM3_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64), DESC = Bank 3 Data Bus Width, IO_IF = emc_0, IO_IS = C_MEM3_WIDTH
PARAMETER C_MAX_MEM_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32, 64), PERMIT = BASE_USER, DESC = Maximum Data Width, IO_IF = emc_0, IO_IS = C_MAX_MEM_WIDTH
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_0 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_0, PERMIT = BASE_USER, DESC = Match width of memory data bus to OPB data bus, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_1 = 0, DT = INTEGER, RANGE = (0:1), DESC = Match data bus width of Mem Bank 1 to OPB, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_1, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_2 = 0, DT = INTEGER, RANGE = (0:1), DESC = Match data bus width of Mem Bank 2 to OPB, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_2, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_INCLUDE_DATAWIDTH_MATCHING_3 = 0, DT = INTEGER, RANGE = (0:1), DESC = Match data bus width of Mem Bank 3 to OPB, IO_IF = emc_0, IO_IS = C_INCLUDE_DATAWIDTH_MATCHING_3, VALUES = (0= FALSE , 1= TRUE )
PARAMETER C_SYNCH_MEM_0 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_SYNCH_MEM_0, PERMIT = BASE_USER, DESC = Memory Type, VALUES = (0= Asynchronous , 1= Synchronous )
PARAMETER C_SYNCH_PIPEDELAY_0 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_0
PARAMETER C_TAVDV_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_0
PARAMETER C_TPACC_PS_FLASH_0 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_0
PARAMETER C_THZCE_PS_MEM_0 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_0
PARAMETER C_THZOE_PS_MEM_0 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_0
PARAMETER C_TWC_PS_MEM_0 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_0
PARAMETER C_TWP_PS_MEM_0 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_0
PARAMETER C_TLZWE_PS_MEM_0 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_0
PARAMETER C_SYNCH_MEM_1 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_SYNCH_MEM_1, VALUES = (0= Asynchronous , 1= Synchronous )
PARAMETER C_SYNCH_PIPEDELAY_1 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_1
PARAMETER C_TAVDV_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_1
PARAMETER C_TPACC_PS_FLASH_1 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_1
PARAMETER C_THZCE_PS_MEM_1 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_1
PARAMETER C_THZOE_PS_MEM_1 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_1
PARAMETER C_TWC_PS_MEM_1 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_1
PARAMETER C_TWP_PS_MEM_1 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_1
PARAMETER C_TLZWE_PS_MEM_1 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_1
PARAMETER C_SYNCH_MEM_2 = 0, DT = INTEGER, RANGE = (0:1), VALUES = (0= Asynchronous , 1= Synchronous )
PARAMETER C_SYNCH_PIPEDELAY_2 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_2
PARAMETER C_TAVDV_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_2
PARAMETER C_TPACC_PS_FLASH_2 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_2
PARAMETER C_THZCE_PS_MEM_2 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_2
PARAMETER C_THZOE_PS_MEM_2 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_2
PARAMETER C_TWC_PS_MEM_2 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_2
PARAMETER C_TWP_PS_MEM_2 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_2
PARAMETER C_TLZWE_PS_MEM_2 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_2
PARAMETER C_SYNCH_MEM_3 = 0, DT = INTEGER, RANGE = (0:1), IO_IF = emc_0, IO_IS = C_SYNCH_MEM_3, VALUES = (0= Asynchronous , 1= Synchronous )
PARAMETER C_SYNCH_PIPEDELAY_3 = 2, DT = INTEGER, RANGE = (1:2)
PARAMETER C_TCEDV_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_SLOW_PS_3
PARAMETER C_TAVDV_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_FAST_PS_3
PARAMETER C_TPACC_PS_FLASH_3 = 25000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_ADDR_TO_OUT_PAGEMODE_PS_3
PARAMETER C_THZCE_PS_MEM_3 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_PS_3
PARAMETER C_THZOE_PS_MEM_3 = 7000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_READ_RECOVERY_BEFORE_WRITE_2_PS_3
PARAMETER C_TWC_PS_MEM_3 = 15000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_SLOW_PS_3
PARAMETER C_TWP_PS_MEM_3 = 12000, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_ADDR_TO_OUT_FAST_PS_3
PARAMETER C_TLZWE_PS_MEM_3 = 0, DT = INTEGER, IO_IF = emc_0, IO_IS = C_WRITE_RECOVERY_BEFORE_READ_PS_3
PARAMETER C_MCH0_PROTOCOL = 0, DT = INTEGER, RANGE = (0:1), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_mch_protocol, ISVALID = (C_NUM_CHANNELS>=1)
PARAMETER C_MCH0_ACCESSBUF_DEPTH = 16, DT = INTEGER, RANGE = (4,8,16)
PARAMETER C_MCH0_RDDATABUF_DEPTH = 16, DT = INTEGER, RANGE = (0,4,8,16)
PARAMETER C_MCH1_PROTOCOL = 0, DT = INTEGER, RANGE = (0:1), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_mch_protocol, ISVALID = (C_NUM_CHANNELS>=2)
PARAMETER C_MCH1_ACCESSBUF_DEPTH = 16, DT = INTEGER, RANGE = (4,8,16)
PARAMETER C_MCH1_RDDATABUF_DEPTH = 16, DT = INTEGER, RANGE = (0,4,8,16)
PARAMETER C_MCH2_PROTOCOL = 0, DT = INTEGER, RANGE = (0:1), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_mch_protocol, ISVALID = (C_NUM_CHANNELS>=3)
PARAMETER C_MCH2_ACCESSBUF_DEPTH = 16, DT = INTEGER, RANGE = (4,8,16)
PARAMETER C_MCH2_RDDATABUF_DEPTH = 16, DT = INTEGER, RANGE = (0,4,8,16)
PARAMETER C_MCH3_PROTOCOL = 0, DT = INTEGER, RANGE = (0:1), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_mch_protocol, ISVALID = (C_NUM_CHANNELS>=4)
PARAMETER C_MCH3_ACCESSBUF_DEPTH = 16, DT = INTEGER, RANGE = (4,8,16)
PARAMETER C_MCH3_RDDATABUF_DEPTH = 16, DT = INTEGER, RANGE = (0,4,8,16)
PARAMETER C_XCL0_LINESIZE = 4, DT = INTEGER, RANGE = (1,4,8,16)
PARAMETER C_XCL0_WRITEXFER = 1, DT = INTEGER, RANGE = (0:2)
PARAMETER C_XCL1_LINESIZE = 4, DT = INTEGER, RANGE = (1,4,8,16)
PARAMETER C_XCL1_WRITEXFER = 1, DT = INTEGER, RANGE = (0:2)
PARAMETER C_XCL2_LINESIZE = 4, DT = INTEGER, RANGE = (1,4,8,16)
PARAMETER C_XCL2_WRITEXFER = 1, DT = INTEGER, RANGE = (0:2)
PARAMETER C_XCL3_LINESIZE = 4, DT = INTEGER, RANGE = (1,4,8,16)
PARAMETER C_XCL3_WRITEXFER = 1, DT = INTEGER, RANGE = (0:2)

## Ports
PORT MCH_SPLB_Clk = "", DIR = I, SIGIS = Clk, BUS = SPLB
PORT RdClk = "", DIR = I, SIGIS = Clk, ASSIGNMENT = REQUIRE
PORT MCH_SPLB_Rst = SPLB_Rst, DIR = I, SIGIS = Rst, BUS = SPLB
PORT MCH0_Access_Control = FSL_M_CONTROL, DIR = I, BUS = MCH0
PORT MCH0_Access_Data = FSL_M_DATA, DIR = I, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH0
PORT MCH0_Access_Write = FSL_M_WRITE, DIR = I, BUS = MCH0
PORT MCH0_Access_Full = FSL_M_FULL, DIR = O, BUS = MCH0
PORT MCH0_ReadData_Control = FSL_S_CONTROL, DIR = O, BUS = MCH0
PORT MCH0_ReadData_Data = FSL_S_DATA, DIR = O, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH0
PORT MCH0_ReadData_Read = FSL_S_READ, DIR = I, BUS = MCH0
PORT MCH0_ReadData_Exists = FSL_S_EXISTS, DIR = O, BUS = MCH0
PORT MCH1_Access_Control = FSL_M_CONTROL, DIR = I, BUS = MCH1
PORT MCH1_Access_Data = FSL_M_DATA, DIR = I, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH1
PORT MCH1_Access_Write = FSL_M_WRITE, DIR = I, BUS = MCH1
PORT MCH1_Access_Full = FSL_M_FULL, DIR = O, BUS = MCH1
PORT MCH1_ReadData_Control = FSL_S_CONTROL, DIR = O, BUS = MCH1
PORT MCH1_ReadData_Data = FSL_S_DATA, DIR = O, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH1
PORT MCH1_ReadData_Read = FSL_S_READ, DIR = I, BUS = MCH1
PORT MCH1_ReadData_Exists = FSL_S_EXISTS, DIR = O, BUS = MCH1
PORT MCH2_Access_Control = FSL_M_CONTROL, DIR = I, BUS = MCH2
PORT MCH2_Access_Data = FSL_M_DATA, DIR = I, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH2
PORT MCH2_Access_Write = FSL_M_WRITE, DIR = I, BUS = MCH2
PORT MCH2_Access_Full = FSL_M_FULL, DIR = O, BUS = MCH2
PORT MCH2_ReadData_Control = FSL_S_CONTROL, DIR = O, BUS = MCH2
PORT MCH2_ReadData_Data = FSL_S_DATA, DIR = O, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH2
PORT MCH2_ReadData_Read = FSL_S_READ, DIR = I, BUS = MCH2
PORT MCH2_ReadData_Exists = FSL_S_EXISTS, DIR = O, BUS = MCH2
PORT MCH3_Access_Control = FSL_M_CONTROL, DIR = I, BUS = MCH3
PORT MCH3_Access_Data = FSL_M_DATA, DIR = I, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH3
PORT MCH3_Access_Write = FSL_M_WRITE, DIR = I, BUS = MCH3
PORT MCH3_Access_Full = FSL_M_FULL, DIR = O, BUS = MCH3
PORT MCH3_ReadData_Control = FSL_S_CONTROL, DIR = O, BUS = MCH3
PORT MCH3_ReadData_Data = FSL_S_DATA, DIR = O, VEC = [0:(C_MCH_NATIVE_DWIDTH-1)], BUS = MCH3
PORT MCH3_ReadData_Read = FSL_S_READ, DIR = I, BUS = MCH3
PORT MCH3_ReadData_Exists = FSL_S_EXISTS, DIR = O, BUS = MCH3
PORT PLB_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB_MID_WIDTH-1)], BUS = SPLB
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_SPLB_DWIDTH/8)-1)], BUS = SPLB
PORT PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB
PORT PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB
PORT PLB_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Mem_DQ_I = "", DIR = I, VEC = [0:(C_MAX_MEM_WIDTH-1)], IO_IF = emc_0, IO_IS = emc_data_I
PORT Mem_DQ_O = "", DIR = O, VEC = [0:(C_MAX_MEM_WIDTH-1)], IO_IF = emc_0, IO_IS = emc_data_O
PORT Mem_DQ_T = "", DIR = O, VEC = [0:(C_MAX_MEM_WIDTH-1)], IO_IF = emc_0, IO_IS = emc_data_T
PORT Mem_A = "", DIR = O, VEC = [0:(C_MCH_SPLB_AWIDTH-1)], PERMIT = BASE_USER, DESC = 'Memory Address Bus', IO_IF = emc_0, IO_IS = emc_addr
PORT Mem_RPN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Reset/Power Down', IO_IF = emc_0, IO_IS = emc_rst
PORT Mem_CEN = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'Memory Chip Enable Active Low', IO_IF = emc_0, IO_IS = emc_csn
PORT Mem_OEN = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'Memory Output Enable', IO_IF = emc_0, IO_IS = emc_oen
PORT Mem_WEN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Write Enable', IO_IF = emc_0, IO_IS = emc_wen
PORT Mem_QWEN = "", DIR = O, VEC = [0:((C_MAX_MEM_WIDTH/8)-1)], PERMIT = BASE_USER, DESC = 'Memory Qualified Write Enable'
PORT Mem_BEN = "", DIR = O, VEC = [0:((C_MAX_MEM_WIDTH/8)-1)], PERMIT = BASE_USER, DESC = 'Memory Byte Enable', IO_IF = emc_0, IO_IS = emc_ben
PORT Mem_CE = "", DIR = O, VEC = [0:(C_NUM_BANKS_MEM-1)], PERMIT = BASE_USER, DESC = 'Memory Chip Enable Active High', IO_IF = emc_0, IO_IS = emc_ce
PORT Mem_ADV_LDN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Advanced Burst Address/Load New Address', IO_IF = emc_0, IO_IS = emc_adv_ldn
PORT Mem_LBON = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Linear/Interleaved Burst Order'
PORT Mem_CKEN = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Clock Enable', IO_IF = emc_0, IO_IS = emc_cken
PORT Mem_RNW = "", DIR = O, PERMIT = BASE_USER, DESC = 'Memory Read Not Write'
PORT Mem_DQ = "", DIR = IO, VEC = [0:(C_MAX_MEM_WIDTH-1)], THREE_STATE = TRUE, TRI_I = Mem_DQ_I, TRI_O = Mem_DQ_O, TRI_T = Mem_DQ_T, ENABLE = MULTI, PERMIT = BASE_USER, DESC = 'Memory Data Bus', IO_IF = emc_0, IO_IS = emc_data

END
